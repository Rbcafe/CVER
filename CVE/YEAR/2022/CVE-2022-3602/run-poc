#!/bin/sh

# set LD_LIBRARY_PATH to your openssl .so file directory if you are testing a
# a developer copy
export LD_LIBRARY_PATH="../"

# Set to the path to openssl. For a developer copy this might be something like
# "../apps/" , assuming you have put this script in child subdirectory of your
# openssl build
export PATH_TO_OPENSSL="/usr/bin"

# Create the CA CSR
$PATH_TO_OPENSSL/openssl req -new -newkey rsa:2048 -config ca.cnf -keyout ca.key -noenc -out ca.csr

# Create the CA cert
$PATH_TO_OPENSSL/openssl x509 -in ca.csr -out ca.pem -req -signkey ca.key -extfile ca.cnf -extensions v3_req -days 1001

# Create the leaf CSR
$PATH_TO_OPENSSL/openssl req -new -newkey rsa:2048 -config leaf.cnf -keyout leaf.key -noenc -out leaf.csr

# Create the CA cert
$PATH_TO_OPENSSL/openssl x509 -CA ca.pem -CAkey ca.key -CAcreateserial -in leaf.csr -out leaf.pem -req -extfile leaf.cnf -extensions v3_req -days 1001

function run_client() {
    # Wait a few seconds
    sleep 3

    I=0
    while [ $I -le 10 ]
    do
        echo -n "test case $I ... "

        # This tests both the server -> client and client -> server issue at the same time
        (echo "test case $I" ; sleep 1) | $PATH_TO_OPENSSL/openssl s_client -connect localhost:9001 -chainCAfile ca.pem -cert leaf.pem -key leaf.key >> s_client_output 2>> s_client_errors

        grep "^test case $I$" s_server_output > /dev/null
        if [ $? -eq 0 ]; then
            echo "ok"
        else
            echo "possibly vulnerable"
        fi

        I=$(( $I + 1 ))
    done

    echo "ctrl-c when ready"
}

# Fork and run the client
run_client &

# Launch a server on port 9001
(sleep 20) | $PATH_TO_OPENSSL/openssl s_server  -cert leaf.pem -key leaf.key -cert_chain ca.pem -accept 9001 -verify 2 > s_server_output 2> s_server_errors
