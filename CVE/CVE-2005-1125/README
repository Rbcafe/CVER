Libsafe only works on 32-bit architectures

1) make build: Builds Libsafe, compiles the proof of concept exploit
	'thread', and compiles the library interposition code 'interpose.so'.
   make random MAX_DELAY=x: Randomizes the interposed delays in 'interpose.so'
	with miximum delay MAX_DELAY per interposition.
2) bug.sh: Runs the PoC exploit 'thread' in an environment that preloads
	Libsafe.
3) repeatbug.py: Runs bug.sh 1000 times and reports the number of times that
	Libsafe worked properly.
4) bug-interpose.sh: Runs the PoC exploit in an environment that preloads
	Libsafe as well as the library interposition code 'interpose.so'
5) repeatbug-interpose.py: Runs bug-interpose.sh 1000 times and reports the
	number of times that Libsafe worked properly.
6) gen_interpose.py: Generates interpose.c based off the function prototypes
	listed in 'func_names.txt'.
