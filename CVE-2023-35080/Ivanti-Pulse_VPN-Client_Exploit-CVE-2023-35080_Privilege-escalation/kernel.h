#pragma once

#include <Windows.h>
#include <stdint.h>
#include <winternl.h>
#include <stdio.h>

#include "error.h"

SYSTEM_INFORMATION_CLASS SystemExtendedHandleInformation = 64;
SYSTEM_INFORMATION_CLASS SystemModuleInformation = 11;

typedef struct _SYSTEM_HANDLE
{
    PVOID Object;
    PVOID UniqueProcessId;
    HANDLE HandleValue;
    ULONG GrantedAccess;
    USHORT CreatorBackTraceIndex;
    USHORT ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
} SYSTEM_HANDLE, * PSYSTEM_HANDLE;

typedef struct _SYSTEM_HANDLE_INFORMATION_EX
{
    ULONG_PTR HandleCount;
    ULONG_PTR Reserved;
    SYSTEM_HANDLE Handles[1];
} SYSTEM_HANDLE_INFORMATION_EX, * PSYSTEM_HANDLE_INFORMATION_EX;

// From https://medium.com/@b1tst0rm/one-ring-zero-to-rule-them-all-c2c9d7582d8f
typedef struct {
    PVOID Section;
    PVOID MappedBase;
    PVOID ImageBase;
    ULONG ImageSize;
    ULONG Flags;
    USHORT LoadOrderIndex;
    USHORT InitOrderIndex;
    USHORT LoadCount;
    USHORT OffsetToFileName;
    CHAR FullPathName[0x0100];
} RTL_PROCESS_MODULE_INFORMATION;

typedef struct {
    ULONG NumberOfModules;
    RTL_PROCESS_MODULE_INFORMATION Modules[ANYSIZE_ARRAY];
} RTL_PROCESS_MODULES;

typedef NTSTATUS(WINAPI* PNtQuerySystemInformation)(
    __in SYSTEM_INFORMATION_CLASS SystemInformationClass,
    __inout PVOID SystemInformation,
    __in ULONG SystemInformationLength,
    __out_opt PULONG ReturnLength
    );

BOOL BuildDevicePath(LPWSTR, LPWSTR);
BOOL OpenDevice(HANDLE*, LPWSTR);
void GetFunctionOffset(LPCSTR, uint64_t*);
void GetKernelBase(uint64_t*);
PVOID GetObjectPointedByHandle(HANDLE);