{
  "id": 2120609,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTIwNjA5",
  "url": "https://hackerone.com/reports/2120609",
  "title": "Circuit Breaker Authorization Issue",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2023-08-22T20:05:09.781Z",
  "submitted_at": "2023-08-22T20:05:09.911Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "strikeout",
    "url": "/strikeout",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 24626,
    "url": "https://hackerone.com/cosmos",
    "handle": "cosmos",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/7ujgxbvj1f55tubc30ya013fjaws/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/7ujgxbvj1f55tubc30ya013fjaws/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Cosmos",
      "twitter_handle": "cosmos",
      "website": "https://cosmos.network",
      "about": "The Internet of Blockchains."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-09-18T19:13:40.456Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2023-09-03T05:07:47.308Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "2500.0",
  "formatted_bounty": "$2,500",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2023-10-03T05:07:47.469Z",
  "allow_singular_disclosure_after": -11525463.327645192,
  "singular_disclosure_allowed": true,
  "vote_count": 24,
  "voters": [
    "shreyaschavhan",
    "n1m0",
    "zy9ard3",
    "shubham_srt",
    "dilawer",
    "neil-tsakatsa",
    "x0_boot_0x",
    "ppawn",
    "eminf",
    "shivammusic",
    "and 14 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 4.9,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "none",
      "integrity": "low",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 16623,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/cosmos/cosmos-sdk",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 339820,
      "category": "team",
      "content": "A bug was discovered in the Cosmos SDK in which an account that has authorization for some messages in the circuit breaker module could reset the circuit breaker for any message, despite not having that permission.  An additional authorization check was added to ensure the permission model is correct.",
      "user": {
        "id": 2848909,
        "username": "amulet_mizmo",
        "name": "mizmo",
        "bio": "Amulet",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2023-08-08T16:59:42.398Z",
        "url": "https://hackerone.com/amulet_mizmo",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/ozk7ee7d9qbt9yz4809wiwhny0op/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ozk7ee7d9qbt9yz4809wiwhny0op/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/ozk7ee7d9qbt9yz4809wiwhny0op/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "id": 340283,
      "category": "researcher",
      "content": "### Summary of Impact\nCircuit Breaker authorization model has a flaw. A user with SOME_MSGs permissions on a single message is able to reset ALL circuit breakers. \n\n### Details\nThe circuit breaker module is used for turning on or off messages in the Cosmos SDK. The idea is that if a serious vulnerability occurred, an administrator could trip the circuit breaker to disable the message, preventing exploitation. \n\nThere are two operations that are important for this module:\n* Trip: Turn off the service. \n* Reset: Turn on the service after it's been tripped.\n\nThere are three types of users with this: \n* ADMIN: Able to trip and reset **all**circuit breakers. Additionally, they can grant additional permissions to other users for all user types. \n* ALL_MSGs: Able to trip and reset **all ** circuit breakers. \n* SOME_MSGs: Able to trip and reset **some** circuit breakers. \n\nThe SOME_MSGs user should only be able to act on particular messages, as designated by the name. This is true for tripping, as you can only trip the allowlisted message. However, this is not true for the *reset* functionality. If a user is granted permissions to a single message via SOME_MSGs permissions, they are able to reset ALL messages. This is the vulnerability.\n\nFrom looking at the [code](https://github.com/cosmos/cosmos-sdk/blob/780cad872bde7131bf11dbc0b020c73febfd6780/x/circuit/keeper/msg_server.go#L119) for this module, for tripping a circuit breaker, the SOME_MSGs case checks to see if the user has access to the particular message. However, this loop is missing on the [reset](https://github.com/cosmos/cosmos-sdk/blob/780cad872bde7131bf11dbc0b020c73febfd6780/x/circuit/keeper/msg_server.go#L167) case. \n\n### Testing \nSetting up a full blockchain via Ignite on this version of the Cosmos-SDK didn't seem possible. So, I created a test file for this instead. \nThis is attached to this report. To use this, follow the steps below: \n\n1. Use Cosmos SDK version 50. I tested this on the ``v0.50.0-rc.0`` specifically. \n2. Replace my file test file with ``cosmos-sdk/x/circuit/keeper/msg_server_test.go``. This is the testing file used for this particular functionality. \n3. Go to the directory where the new test file was added.\n4. Run ``go test -mod=readonly -run TestResetCircuitBreakerMaxPOC -v`` to execute my test. \n5. Notice that even though the user only has access to ``url`` message, they are able to call ``reset`` on the ``url_bad`` message. This demonstrates the vulnerability discussed above.\n\n### Remediation \n\nTo remediate this problem, break out the ``Permissions_LEVEL_SOME_MSGS`` into its own block for ``ResetCircuitBreaker`` just like ``TripCircuitBreaker`` does and iterate over the loop to validate if they have access to the particular message to reset it.\n\n## Impact\n\nImagine that there is a module where the governance voted a user to have the ability to trip or reset a circuit breaker for a single message. Now, something extremely important and unrelated has a serious vulnerability in it, such as the banking module. The admin rushes to trip the circuit breaker on this message. However, to their surprise, two minutes later the message is turned on again. Users are exploiting this like mad until all of the funds have been drained. What happened? An authorization flaw in the circuit breaker allowed the message to be turned back on by an authorized user. Being able to turn back messages in this state is real bad and undermines the purpose of this module.",
      "user": {
        "id": 2843412,
        "username": "strikeout",
        "name": "Maxwell Dulin",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "https://maxwellduiln.com",
        "location": "Seattle, WA",
        "created_at": "2023-08-02T17:37:14.637Z",
        "url": "https://hackerone.com/strikeout",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
