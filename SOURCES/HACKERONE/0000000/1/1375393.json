{
  "id": 1375393,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMzc1Mzkz",
  "url": "https://hackerone.com/reports/1375393",
  "title": "\"External status checks\" can be accepted by users below developer access if the user is either author or assignee of the target merge request",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2021-10-20T07:03:56.355Z",
  "submitted_at": "2021-10-20T07:03:56.531Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "joaxcar",
    "url": "/joaxcar",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/9865qc9er7t2lratx5rgszbf3257/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58?response-content-disposition=inline%3B%20filename%3D%224FB38693-148C-4D50-BBCD-D726D3AE2B4F.jpeg%22%3B%20filename%2A%3DUTF-8%27%274FB38693-148C-4D50-BBCD-D726D3AE2B4F.jpeg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSQ564LXW%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T141833Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDl76KVUFS0hN8YruFStxJXVErBlHnUq37TLzE6NJ4nVgIhANpbiTp%2BMBG4Nwb5E7dtwmMEX5oh%2FQf%2BDE1tYHw3IkRRKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5IgysR5bYjXDNHPUxaW8qjwUn5sVCnmMuonjKnG%2FT4J4WQrTsBQX1SNmTEPNbtsQv5XcKQaoPHieXQdr%2B%2B1X5avNpXfOZbh0pZ6CXdrJ4yYa55f0HXkeQiH0zcQ0fif5j1pP8jC%2Blsq%2BD9fB7SzZQg6RmosBSYA4XGzLy8%2FPyGRLQ28yjB4W8KTl8fBM4CmJJFWLBmzWUBK2SOnDwMfsDL5%2BmafcYaKkz0yszM1cg3XozTAFLh8hmoIUAWpu77QkIzg0Ht8%2B93fM%2FYsZn5uKr6IpQ2U4pqWdLfB29cuQ%2Fcqg62XxGu%2BLk6jR1jXWEegWhMonWqQeGJPWbh8kEDYxBzUAidK12bSQGyMxonksvquoUumwsvEUzmQd%2BhHIBPGEfHEpImOlgzqswJwZ%2F4JNoWjfIUk3c2lvDijlThqGBqTQoB645h%2B4iprdRTJwkrRB74qIwzHH8cv8viZ7ZrieVZK6heyAtoEGA%2BZN6Yt1%2Fh3uEHlmtJnS1Vmef8OPs7HDSzKz4njXcD7iXOt625xzMEBsfshpisEQDc6V%2BgE%2BBXbdv%2FT4XaJkVUN7kUFRWxoez0R%2FafT55iChRzC%2FCCCtXPxRwQLswXHFkjSKPv6sVfuM5MRTBUP55DDIHcRMXtwEjecS03yT%2BLa3gpqGgU9vRMfcH0LWQdYklhl1sQ6N1w3UJ%2BzTVF7HEgKCpghOKhwVCK9huxD72fxZOO6FF5FJzK3DifWVeM1v32dnnKItdegNY3N8My9s4MQJ%2B3ECyboRUjyg2nm%2BDhuYrpgIelJVrUGgu74IzyiQ2A%2FCKjoDOYFSWGrm4y%2B2UnhJeZRlQds%2FlnTD4xuiMof7htaNeiZuyDqfi6JTbOSG%2FNqB7QSE2ezcJ75qQGAqDpKeqbVdeTC34MIa2ra4GOrABDubMC6LwabfeW3Qsfz2RgL7fTEyxJw929PcIhksJK3EmRE2rUVVoVGGm7fTwmneEB55wcJn7xtg4Rs3f5YiKxBbRlxeqJEXHdJJWWaOq%2BpG%2BMHzVFgbZYimMKoU39IYu2PyQrofnOmHZ%2FEB3I1PLguFv1fjZlzVTHUwnD4kRx2g5tTJLggeCKerD5uXmMSsk8WllCOp%2FdA8M69%2BsXGmqNNPZRG6tkFF%2FJPssbKNyXTU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=958cce899bac757208971ec2a606ef1d59e46d01ea7a54eb24c1203453b5836e"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-06-08T14:04:26.012Z",
  "bug_reporter_agreed_on_going_public_at": "2022-05-25T11:46:41.219Z",
  "team_member_agreed_on_going_public_at": "2022-06-08T14:04:25.776Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\n\nAny user who is either author or assignee of a merge request can approve that merge request's `external status checks`. This includes users with `Guest` access that creates MR's either through email or through a fork of the project. It also includes users with `Guest` or `Reporter` access getting assigned to an MR, which is not uncommon in public projects.\n\nThere exists a tiny overlap with my report [1375376](https://hackerone.com/reports/1375376) which is yet not triaged. I describe this overlap in the end of this summary. The reports look similar, but the vulnerabilities are not related. A fix in 1375376 would not fix this report, only the overlap.\n\nThe `external status check` documentation does not offer too much information about how the feature is supposed to function. But the developer discussions and the unit tests suggests that approving an `external status check` should be restricted for users with at least `Developer` access in the project. Here is the issue tracking the development https://gitlab.com/gitlab-org/gitlab/-/issues/267519\n\nIn this [thread](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/59137#note_567776066) the possibility of users abusing the fact that a status check is not tied to any special token. Rather they use regular PAT's, these discussion mentions\n\n> find_merge_request_with_access will at least mean that only those with developer+ access to the project in question would be able to exploit the feature in this way.\n\nThe [unit tests](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/spec/requests/api/status_checks_spec.rb#L29) for this feature checks this assumption with these lines\n\n```\ndescribe 'permissions' do\n    before do\n      stub_licensed_features(external_status_checks: true)\n    end\n\n    it { expect { subject }.to be_allowed_for(:maintainer).of(project) }\n    it { expect { subject }.to be_allowed_for(:developer).of(project) }\n    it { expect { subject }.to be_denied_for(:reporter).of(project) }\n  end\n```\n\nValidating if the user making the request is developer+.\n\nSo to enforce this they have put an authentication block checking if the user have permission to respond to `external status checks` using the function called `find_merge_request_with_access` in this way\n```\nmerge_request = find_merge_request_with_access(params[:merge_request_iid], :approve_merge_request)\n```\nChecking the permission `:approve_merge_request` which is enabled for developers. But as it turns out, this permission is also enabled for users with the permission `:update_merge_request`. In https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/policies/merge_request_policy.rb there is this rule\n\n```\n rule { can?(:update_merge_request) }.policy do\n    enable :approve_merge_request\n  end\n```\nThat enables the permission for anyone that are allowed to update the MR. And in https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/policies/issuable_policy.rb there exists this rule\n\n```\nrule { can?(:guest_access) & assignee_or_author }.policy do\n    enable :read_issue\n    enable :update_issue\n    enable :reopen_issue\n    enable :read_merge_request\n    enable :update_merge_request\n    enable :reopen_merge_request\n  end\n```\nenabling `:update_merge_request` for anyone that have `:guest_access` and is either assignee or author.\n\nThis is probably the root of the problem. And as far as I could make out this is not the intended behavior. A user with `Guest` access can create an MR by forking and directly send approval for all `external status checks` to lure the developers that the MR have been checked. It leads to at least two problems:\n\n* A user with no membership can create a MR in a public project and then \"approve\" the `external status check's without any membership\n* A user who is demoted to `Reporter` in a private project can still \"approve\" `external status check's in MR's where the user is either author or assignee\n\nand at the moment thanks to the vulnerability that I have reported in [1375376](https://hackerone.com/reports/1375376) at present it is also possible to:\n* A user who is demoted to `Guest` in a private project can still \"approve\" `external status check's in MR's where the user is either author or assignee while not being able to actually view the MR\n\n### Steps to reproduce\n\nExternal status checks is an `Ultimate` feature, so make sure the project is created in such an environment\n\n1. Create two users `owner01` and `guest01`\n2. Log in as `owner01` and create a public project `project01` by visiting https://gitlab.com/projects/new#blank_project and take a note of the project ID\n3. Go to the project settings page and expand the tab `merge requests` and scroll down to `external status checks`, settings page https://gitlab.com/owner01/project01/edit\n4. Create a status check with any name and endpoint, and leave the \n5. Log out and log in as `guest01`\n6. Go to the project page https://gitlab.com/owner01/project01 and create a fork with the `fork` button, call it `fork01`.\n7. When the fork is created, create a new branch in the fork https://gitlab.com/guest01/fork01/-/branches/new called `new_branch`\n8. When the fork is created directly click on the option \"create a merge request\", in the \"New merge request\" page click `Change branches` and select the target branch as any branch on the original `project01`\n9. Click \"Create\" and a new MR should be created in `project01` (this is a guest contribution and a normal open-source flow, but note that the `guest01` user is NOT a member of `project01`)\n10. Go to https://gitlab.com/-/profile/personal_access_tokens and create an access token for the API for `guest01`\n11. Open a terminal and make this request to get the ID of the status check (user `project01` ID and MR IID which is probably 1 and `guest01` token), take a note of the returned ID of the status check\n```\ncurl \"https://gitlab.███/api/v4/projects/<PROJECT_ID>/merge_requests/<MR_IID>/status_checks\" -H \"Authorization: Bearer <TOKEN>\"\n```\n12. Send this request to check for the SHA, the request will fail with a message telling you which SHA to use, in this request we use a dummy SHA=a (make sure to also replace CHECK_ID to the found ID from step 12)\n```\ncurl --request POST \\\n  --url 'https://gitlab.com/api/v4/projects/<PROJECT_ID>/merge_requests/<MR_IID>/status_check_responses?sha=a&external_status_check_id=<CHECK_ID>' \\\n  --header 'Authorization: Bearer <TOKEN>'\n```\n13. Now use the returned SHA in this request to finally \"approve\" the status check for the MR\n```\ncurl --request POST \\\n  --url 'https://gitlab.domain.com/api/v4/projects/<PROJECT_ID>/merge_requests/<MR_IID>/status_check_responses?sha=<SHA>&external_status_check_id=<CHECK_ID>' \\\n  --header 'Authorization: Bearer <TOKEN>'\n```\n14. Go to the MR page and verify that the status check is now green and checked, https://gitlab.com/owner01/project01/-/merge_requests/1\n\n### Impact\n\nA `Guest` user can send acknowledge messages to \"approve\" `external status checks` on MR's where the user is either author or assignee. This makes it possible for a malicious user to \"spoof\" acceptance of MR's in projects where the user should not be able to do this. In public projects this mean that any guest contribution from non-members can have its `external status checks` checked by the author itself even if not a member of the project.\n\n### What is the current *bug* behavior?\n\nUsers with access level below `Developer` can accept `external status checks` if they are either author or assignee of the MR\n\n### What is the expected *correct* behavior?\n\nOnly `Developer`+ users that are members of the project should be able to user their PAT to \"approve\" the `external status check`\n\n### Output of checks\n\nThis bug happens on GitLab.com\n\n## Impact\n\nA `Guest` (or `Reporter`) user can send acknowledge messages to \"approve\" `external status checks` on MR's where the user is either author or assignee. This makes it possible for a malicious user to \"spoof\" acceptance of MR's in projects where the user should not be able to do this. In public projects this mean that any guest contribution from non-members can have its `external status checks` checked by the author itself even if not a member of the project.",
  "bounty_amount": "610.0",
  "formatted_bounty": "$610",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 11,
  "voters": [
    "yukusawa18",
    "zy9ard3",
    "thruster",
    "yassinek3ch",
    "rzx007x",
    "bl4de",
    "cametome006",
    "shivammusic",
    "hangone",
    "meispi",
    "and 1 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 4.3,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 18138,
    "asset_type": "URL",
    "asset_identifier": "gitlab.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
