{
  "id": 1736317,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzM2MzE3",
  "url": "https://hackerone.com/reports/1736317",
  "title": "XSS via Client Side Template Injection on www.███/News/Speeches",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2022-10-15T18:30:43.968Z",
  "submitted_at": "2022-10-15T18:30:44.042Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "chef_shell",
    "url": "/chef_shell",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2023-01-06T18:47:59.553Z",
  "bug_reporter_agreed_on_going_public_at": "2023-01-06T18:32:14.942Z",
  "team_member_agreed_on_going_public_at": "2023-01-06T18:47:59.402Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Dear DoD - Team,\nI am able to execute javascript code on www.███████/News/Speeches.\n\nThis endpoint has a search functionality with the parameter `Search`. The supplied value to this parameter gets embedded into the website.\nFurthermore the frontend of the website is presumably created with a template engine. These engines handle user supplied data within double curly braces `{{...}}` for example. If the user input is not sanitized corretly template injection can occur.\n\nWhen supplying the `Search` parameter with a value inside double curly braces it gets evaluated and the result is then embedded into the web page.\n\nFor example the search value `www.███████/News/Speeches?Search={{7*7}}` gets evaluated to `49` and put into the web page (see image_1.png).\nBesides simple mathematical equations, javascript code can be put inside those braces too (see image_2.png). This will execute the code as well which results in a XSS vulnerability.\n\nThere are some mitigations to this. For example some methods are blacklisted which means alert(1) is not allowed. However this can be bypassed by encoding the payload into a base64 string and call a decode method before evaluating (executing) the code.\n\nI've come up with a simple payload which triggers all javascript code thus bypassing the blacklisting of potential dangerous methods.\n\n`https://www.████/News/Speeches/?Search={{window['eval'](window['atob'](window['decodeURIComponent']('BASE_64_ENCODED_PAYLOAD')))}}`\n\nA poc video is attached.\n\n## Recap\n\nA client side template injection vulnerability is present through the `Search` parameter. This leads to the ability to run arbitrary javascript code on the client side.\n\n## Impact\n\n- run arbitrary javascript code on the victims machine\n- Since the javascript code is run within the realm of ██████ CORS bypass on other endpoints could be possible.\n- Forgery of information\n\n## System Host(s)\nwww.█████████\n\n## Affected Product(s) and Version(s)\n\n\n## CVE Numbers\n\n\n## Steps to Reproduce\n- Copy the provided link in the description section\n- Replace the `BASE_64_ENCODED_PAYLOAD` with an actual base64 encoded javascript code. For Example `YWxlcnQoMSk=` which is `alert(1)` in base64.\n - Insert the crafted url into the browser.\n- done\n\n## Suggested Mitigation/Remediation Actions\nSanitize the user input so double curly braces `{{...}}` won't trigger a client side server injection\n\n",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 6,
  "voters": [
    "shreyaschavhan",
    "zy9ard3",
    "shubham_srt",
    "iwannabecomfy",
    "shivammusic",
    "kastberg"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
