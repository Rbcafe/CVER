{
  "id": 1108418,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTA4NDE4",
  "url": "https://hackerone.com/reports/1108418",
  "title": "SSRF allows reading AWS EC2 metadata using \"readapi\" variable in Streamlabs Cloudbot",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2021-02-21T20:20:20.201Z",
  "submitted_at": "2021-02-21T20:20:20.385Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "nrockhouse",
    "url": "/nrockhouse",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/036/861/9a1070658b292822260496ed5cab48466b0aaa12_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 32972,
    "url": "https://hackerone.com/logitech",
    "handle": "logitech",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/032/972/8aa1ae9384c034f209edabfd44bac468c0bbbcdb_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/032/972/8aa1ae9384c034f209edabfd44bac468c0bbbcdb_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Logitech",
      "twitter_handle": "logitech",
      "website": "https://www.logitech.com",
      "about": "Logitech is a consumer electronics manufacturer, specialising in smart home and video collaboration equipment, gaming accessories and peripherals"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-02-24T20:25:08.334Z",
  "bug_reporter_agreed_on_going_public_at": "2021-02-23T10:50:28.917Z",
  "team_member_agreed_on_going_public_at": "2021-02-24T20:25:08.152Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "200.0",
  "formatted_bounty": "$200",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 28,
  "voters": [
    "th3hidd3nmist",
    "zerody",
    "najeh_halawani",
    "ninetynine",
    "th4nu_0x0",
    "dmc3",
    "ali",
    "eren",
    "sudi",
    "sakshamguruji",
    "and 18 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 5.0,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 52462,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.streamlabs.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 26960,
      "category": "team",
      "content": "Detailed summary is provided by the hacker below.",
      "user": {
        "id": 1275877,
        "username": "logi_harsha",
        "name": "",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2020-08-05T17:29:48.981Z",
        "url": "https://hackerone.com/logi_harsha",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "id": 26859,
      "category": "researcher",
      "content": "## Summary:\nStreamlabs Cloudbot is a customisable chatbot provided by Streamlabs which allows the creation of custom commands along with custom responses. These chat responses can take in \"Variables\" wrapped in curly brackets as documented in https://streamlabs.com/dashboard#/cloudbot/commands/variables, such as `{{user.name}}` which translates to the username of the viewer who executed the command in stream chat.\n\nSome of these \"Variables\" can take in arguments, one of it is the `readapi` variable, in the form of `{readapi.<url_here>}`. When the custom command is executed, Cloudbot backend translates these \"Variables\" in the custom responses template into their respective values, and then sends it on the stream chat. To translate the `readapi` variable,  an HTTPS request is sent to the provided URL, and then returns its response in place of the `{readapi.<url_here>}` variable. Example:\n  * `The server's IP is {readapi.https://api.ipify.org}` -> `The server's IP is xx.xxx.xxx.x`.\n\nHowever, the backend checks to see if the supplied URL is using the `https://` protocol. If any other protocol is supplied, including `http://`, the backend simply replaces the variable with `[Https required]`, as such:\n  * `The server's IP is {readapi.http://api.ipify.org}` -> `The server's IP is [Https required]`.\n\nOther than that, there's other several caveats.\n  1. The response has to be a common human-readable `Content-Type`. For example, having no `Content-Type`, or having `text/plain`, `text/html`, `application/json` as the `Content-Type` would return the response in chat successfully. Meanwhile, `application/javascript`, `application/octet-stream` or `image/png` would cause `[Invalid Content-Type]` to be shown.\n\n  1. The response code must be 2xx, so `404 Not Found` pages or `500 Internal Server Error` pages are all replaced with `[Bad Server Response / Too slow]` in the chat.\n\n  1. The timeout value is very low, my estimate is around 3000 ms. If the web server could not respond within this time frame, the connection is dropped and `[Bad Server Response / Too slow]` will be shown. This makes it hard to differentiate an open, closed, or filtered port when fingerprinting with SSRF port scanning in the backend server.\n\n  1. There appears to be a limit for the content length, I did not test out what is the exact value for this, but anything exceeding this limit will simply not return anything, so `abc{readapi.https://superbigsite/}def` -> `abcdef`.\n\n  1. The response data cannot contain any curly brackets `{` or `}`, which I believe is because it represents variables. The backend recursively translates variables until there are no variables left, so it may be to prevent infinite loops or at least a high number of requests being sent. Response data containing the symbols will simply not returning anything, same behaviour as mentioned in the point above.\n\nThe HTTPS-only requirement prevents me from querying the AWS EC2 metadata service directly, since it can only be requested via HTTP. Fortunately, Cloudbot's backend follows redirects, even if it's to an HTTP URL. I simply hosted a file `slpoc.php` on my server containing the following contents.\n\n```php\n<?php header('Location: http://169.254.169.254/latest/meta-data/'); ?>\n```\n\nThen, a `readapi` variable is set to send a request to this PHP file. (The prefixing `A` and suffixing `B` is used to ensure I would get a reply even if the variable content is empty).\n  * `A{readapi.https://mydomain/slpoc.php}B` -> `Aami-id ami-launch-index ami-manifest-path block-device-mapping/ events/ hostname identity-credentials/ instance-action instance-id instance-type local-hostname local-ipv4 mac metrics/ network/ placement/ profile public-hostname public-ipv4 public-keys/ reservation-id security-groups services/B`\n\nAs can be seen above, the EC2 instance does not have an IAM role assigned to it. This limits me from being able to escalate this further to file disclosure, RCE, or an AWS account takeover. Since Cloudbot runs on multiple different EC2 servers for load balancing, there may be potential misconfigured servers that my Cloudbot isn't running on which allows such an escalation, but not that I could find.\n\nAttempts on redirecting to other protocols (ex. `gopher://`, `ftp://`, `file://`, `dict://`) have all returned `[Bad Server Response / Too slow]` with nothing hitting my test servers, which means the request library being used here in the backend is likely exclusively only for web requests.\n\nNote that some AWS endpoints which return JSON data, such as http://169.254.169.254/latest/dynamic/instance-identity/document **cannot** be retrieved due to caveat number 5 as previous stated, which also further limited my ability to get access keys, even if an IAM role is attached.\n\nThe applied fix no longer follows redirects, the behaviour now is that it would simply throw `[Bad Server Response / Too slow]` for redirects, which should prevent anyone from querying the AWS metadata endpoint, or any HTTP URLs for that matter.",
      "user": {
        "id": 36861,
        "username": "nrockhouse",
        "name": "Nicholas Mun",
        "bio": "Cyber Security Consultant @ Across Verticals, Degree in Cyber Security, Diploma in Software Engineering, Ex-Software Intern at Radica Software",
        "cleared": false,
        "verified": false,
        "website": "https://blog.rockhouse.dev",
        "location": "Malaysia",
        "created_at": "2015-07-19T08:20:26.132Z",
        "url": "https://hackerone.com/nrockhouse",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/036/861/9a1070658b292822260496ed5cab48466b0aaa12_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/036/861/9a1070658b292822260496ed5cab48466b0aaa12_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/036/861/9a1070658b292822260496ed5cab48466b0aaa12_original.jpg/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
