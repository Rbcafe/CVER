{
  "id": 1679969,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjc5OTY5",
  "url": "https://hackerone.com/reports/1679969",
  "title": "Host Header Injection on https://███/████████/Account/ForgotPassword",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2022-08-25T11:29:54.581Z",
  "submitted_at": "2022-08-25T11:29:54.609Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "696e746c6f6c",
    "url": "/696e746c6f6c",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/us07h25asqbp6r6afsu70je4iwha/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-10-14T18:03:18.258Z",
  "bug_reporter_agreed_on_going_public_at": "2022-10-07T19:19:05.748Z",
  "team_member_agreed_on_going_public_at": "2022-10-14T18:03:18.115Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Dear DoD Team,\n\nI found one high bug on your another domain. This is from Hack US Program. Affected domain is https://█████/\n\nAn attacker can manipulate the Host header as seen by the web application and cause the application to behave in unexpected ways.\nVery often multiple websites are hosted on the same IP address. This is where the Host Header comes in. This header specifies which website should process the HTTP request. The web server uses the value of this header to dispatch the request to the specified website. Each website hosted on the same IP address is called a virtual host. And It's possible to send requests with arbitrary Host Headers to the first virtual host.\n\nHere's the PoC btw:\n\n███\n\nThank you DoD!\n\n## Impact\n\nTampering of Host header can lead to the following attacks:\n1) Web Cache Poisoning-Manipulating caching systems into storing a page generated with a malicious Host and serving it to others.\n2) Password Reset Poisoning-Exploiting password reset emails and tricking them to deliver poisoned content directly to the target.\n3) Cross Site Scripting - XSS can be performed, if the value of Host header is used for writing links without HTML-encoding. For example Joomla used to write Host header to every page without HTML Encoding like this: <link href=”http://_SERVER['HOST']”> which led to cross site scripting.\n4) Access to internal hosts-To access internal hosts.\n5.) It can also lead to Phishing Attacks.\n\n## System Host(s)\n███████\n\n## Affected Product(s) and Version(s)\nUsers are affected\n\n## CVE Numbers\n\n\n## Steps to Reproduce\n1. Go to this domain: https://███/████████/\n2. Go to vendor login.\n3. Create a test account.\n4. Go to Forgot Password Reset: https://████/██████/Account/ForgotPassword\n5. Before inserting your email. \n6. Turn your foxy proxy on.\n7. Open your burp suite and go to http history tab.\n8. Now insert your email.\n9. In http history in burp you will see this request:\n\n```javascript\nPOST /████████/Account/ForgotPassword HTTP/1.1\nHost: ███\nCookie: .AspNetCore.Antiforgery.wZhPOrJ1UhI=; TS014b77bb=; ASP.NET_SessionId=; TS0144f203=; CSRF-TOKEN=\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0\nAccept: application/json, text/javascript, */*; q=0.01\nAccept-Language: hr,hr-HR;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nX-Csrf-Token: \nX-Requested-With: XMLHttpRequest\nContent-Length: 35\nOrigin: https://███████\nReferer: https://████/█████████/Account/ForgotPassword\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\nConnection: close\n\n{\"Email\":\"███████\"}\n```\n10. Send this request to repeater tab.\n11. Change Host headet to attacker.com\n12. It shoud look like this:\n\n```javascript\nPOST /████████/Account/ForgotPassword HTTP/1.1\nHost: attacker.com\nCookie: .AspNetCore.Antiforgery.wZhPOrJ1UhI=; TS014b77bb=; ASP.NET_SessionId=; TS0144f203=; CSRF-TOKEN=\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0\nAccept: application/json, text/javascript, */*; q=0.01\nAccept-Language: hr,hr-HR;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nX-Csrf-Token: \nX-Requested-With: XMLHttpRequest\nContent-Length: 35\nOrigin: https://████\nReferer: https://███████/████/Account/ForgotPassword\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\nConnection: close\n```\n13. Now send request and you will get 200 OK response.\n14. Go to your mail/gmail.\n15. You will see some magic.\n16. PoC is down there.\n\n## Suggested Mitigation/Remediation Actions\n\n\n",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 6,
  "voters": [
    "zy9ard3",
    "khizer47",
    "shivammusic",
    "sey194",
    "diaaa",
    "sebin-thomas"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 186873,
      "category": "researcher",
      "content": "Twitter: https://twitter.com/0x1int\n\nAlso for this type of Host header injection / cache poisoning bug I will give you advice for fixing this bug. Since I seee your team still didn't validate host header. Though I noticed that host header is not validated on multiple domains. And I'm not sure that you shouldn't keep password reset links and keep new method for password reset such as getting temporary password on your email. Like your team implemented that.\nSuggested Mitigation/Remediation Actions\nI'd like to recommend to use `$_SERVER['SERVER_NAME']` rather than `$_SERVER['HTTP_HOST'].`\n  Make sure to check if it matches a whitelist of domains that you serve:\n```php\n $domains = ['example.com', 'foo.bar.baz'];\n if ( ! in_array($_SERVER['SERVER_NAME'], $domains)) {\n     // error\n }\n```\nDespite what its name implies, unless you followed the first solution, `$_SERVER['SERVER_NAME']` will also be populated by the Host header value when PHP runs through a \"catch all\" configuration.\nThus, they are both equal unless your HTTP server is properly configured, hence why both solutions above refer to `$_SERVER['SERVER_NAME']` - it effectively doesn't matter if you use that or `$_SERVER['HTTP_HOST'].`\n`$_SERVER['SERVER_NAME']` will also be populated by the Host header value when code runs through a \"catch all\" configuration.\nThough they are both equal unless your HTTP server is properly configured, hence why both solutions above refer to `$_SERVER['SERVER_NAME']` - it effectively doesn't matter if you use that or `$_SERVER['HTTP_HOST'].`\n1\nThis is the code to resolve the host header attack. URL have to be specified.\n```php\n$allowed_domains = array('yourdomain1', 'yourdomain2', 'yourdomain3');\n$default_domain  = 'yourprimedomain';\n\nif (in_array($_SERVER['HTTP_HOST'], $allowed_domains, TRUE))\n{\n    $domain = $_SERVER['HTTP_HOST'];\n}\nelse\n{\n    $domain = $default_domain;\n}\n\nif (! empty($_SERVER['HTTPS']))\n{\n    $config['base_url'] = 'https://'.$domain;\n}\nelse\n{\n    $config['base_url'] = 'http://'.$domain;\n}\n```\nAnd put this on your header:\n```php\n<base href=\"<?php echo base_url(); ?>\" />\n```\nOne more fix:\n```xml\ncom.ibm.rules.decisioncenter.check-host = true\ncom.ibm.rules.decisioncenter.host-whitelist-patterns = <url_patterns>\ncom.ibm.rules.decisioncenter.check-host. \n```\nIf it's set to true then host servers are validated but if it's set to false such as com.ibm.rules.decisioncenter.check-host = false then value will be false obviously.\ncom.ibm.rules.decisioncenter.host-whitelist-patterns this specifies URLs that needs to be validated in a nutshell whitelisted.  Make sure to use Regex as a property value so, the \".*\" at the end is required to specify any following characters. You can specify several values, separated by a comma.\nSecond thing:\nConfigure a parameter for Rule Execution Server. Try to find In your XML file, ilog.rules.res.TRUSTED_HOSTS_CONFIGURATION parameter. Only if there's XML file:\n```xml\n<context-param>\n   <description>\n      Host HTTP header protection configuration.\n      When enabled, please provide a list of trusted hosts (separated by semicolons).\n      Each host must be a valid regular expression.\n      Example: enableHostsWhitelist=true,hosts=host1.com;.*\\.company\\.com;myserver\n   </description>\n   <param-name>ilog.rules.res.TRUSTED_HOSTS_CONFIGURATION</param-name>\n   <param-value>enableHostsWhitelist=false,hosts=</param-value>\n</context-param>\n```\nWhen `ilog.rules.res.TRUSTED_HOSTS_CONFIGURATION` parameter `enableHostsWhitelist` set to true, the protection against the host header injection is enabled. In this case, enter a list of the host servers that are trusted. You can enter multiple hosts, separated by a semicolon (;).\nIf the `ilog.rules.res.TRUSTED_HOSTS_CONFIGURATION` parameter is set to false then value will be false. And Repackage and redeploy the Decision Center and Rule Execution Server archives.\n\n\nThank you! Have a good day!",
      "user": {
        "id": 2045840,
        "username": "696e746c6f6c",
        "name": "",
        "bio": "We trust to indexOf() function when it comes to postMessage() exploitation.",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "Zagreb, HR",
        "created_at": "2021-10-26T16:54:07.049Z",
        "url": "https://hackerone.com/696e746c6f6c",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/us07h25asqbp6r6afsu70je4iwha/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/us07h25asqbp6r6afsu70je4iwha/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/us07h25asqbp6r6afsu70je4iwha/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
