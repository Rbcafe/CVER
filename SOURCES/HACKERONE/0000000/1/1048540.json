{
  "id": 1048540,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDQ4NTQw",
  "url": "https://hackerone.com/reports/1048540",
  "title": "IDOR on https://██████ via POST UID enables database scraping",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-12-01T23:05:29.376Z",
  "submitted_at": "2020-12-01T23:05:29.394Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "skarsom",
    "url": "/skarsom",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/AJF5UwM9J4LCZWYcZzShLMAG/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-04-08T18:50:37.284Z",
  "bug_reporter_agreed_on_going_public_at": "2021-04-07T04:44:58.379Z",
  "team_member_agreed_on_going_public_at": "2021-04-08T18:50:37.145Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nThe UID parameter on █████████ in the ██████ (███████) system, with ███████, does not validate that the caller has permission to view information on the UID entered, thereby enabling personnel and student data extraction.\n\n**Description:**\nThe user operations API endpoint for the ███ (██████████) is ███. It is used for login, forgot password, and administrators viewing user information.\n\nUnfortunately, this endpoint lacks basic security precautions, the most serious of which appears to enable database scraping via ███ (I assume this is for ████████).\n\nBy entering sequential and numerical user IDs via the UID parameter, an unauthenticated and unauthorized external attacker can scrape the ████████ database's emails, ████ info, ████████ scores, and first & last names.\n\n## Impact\nAn unauthenticated, unauthorized external attacker can obtain the full names, emails, military branches, and ████ scores of all users registered in the █████ (███) system.\n\n## Step-by-step Reproduction Instructions\n\n1. Run the following cURL command: `curl 'https://███'  --data-raw 'sendingForm=██████' `\n\n2. Success.\n\n## Other Notes\nThis ██████████ endpoint appears extremely insecure in general. There is a very verbose ASPX error if you enter sendingForm with any number greater than ██████ and don't specify a UID. There is a null user/UID in the system with UID █████████, which will be matched against whenever not entering a parameter (i.e. excluding \"un\" and \"pn\" during login on ███).\n\nI suspect more damage is possible with this endpoint, but as I have already unintentionally and accidentally extracted information on UID █████████(which is not me), I am reporting the vulnerability now and ceasing penetration █████████ing against the endpoint.\n\n## Suggested Mitigation/Remediation Actions\n1. Ensure that sendingForm type ████████ can only be utilized by logged in administrative users.\n2. Ensure that a null parameter in any form does not evaluate to \"true\" (so only specifying a username without a password does not lead to a successful login).\n████████. Disable ASP verbose error generation.\n4. Given how central ████ appears to be, and that it contains information on tens of thousands of students, perform an audit of the source code. It does not appear to use any best practices.\n\n## Impact\n\nAn unauthenticated, unauthorized external attacker can obtain the full names, emails, military branches, and █████ scores of all users registered in the ███ (███) system.\n\nAn adversarial intelligence agency could obtain information on students participating in DOD ██████ instructional programs.",
  "weakness": {
    "id": 55,
    "name": "Insecure Direct Object Reference (IDOR)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 7,
  "voters": [
    "skarsom",
    "ayoub0x1",
    "0nlymohammed",
    "dastan_9408",
    "bbda4d81f5d3890e46d35ce",
    "ekgaribadmi",
    "meispi"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
