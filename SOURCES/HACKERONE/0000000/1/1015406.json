{
  "id": 1015406,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDE1NDA2",
  "url": "https://hackerone.com/reports/1015406",
  "title": "SQL Injection in www.██████████",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-10-21T16:18:02.301Z",
  "submitted_at": "2020-10-21T16:18:02.334Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "val_brux",
    "url": "/val_brux",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/i46n8vgh4q5q8xzhv9dgbq1y905n/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-01-12T21:58:41.797Z",
  "bug_reporter_agreed_on_going_public_at": "2021-01-12T17:22:36.344Z",
  "team_member_agreed_on_going_public_at": "2021-01-12T21:58:41.695Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "##Description:\nSQL Injection is a vulnerability which allows interference with the queries performed on a database, to obtain sensitive information which could be really useful to attackers. A web application database is often queried using user-requests parameters, which when are not properly sanitized can be modified injecting malicious code.  In this case, the vulnerable endpoint is http://www.████████ and the vulnerable parameter is the POST rnum parameter. Respecting the program guidelines, I performed the minimal amount of testing required to prove that a vulnerability existed, but please tell me if I can bring the exploitation further to give more information.\n\n##Reproduction steps\n1 -Repeat the below requests with a interceptor proxy (for example, using Burp).\n```\nPOST ████ HTTP/1.1\nHost: www.████\nContent-Length: 72\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://www.███████\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://www.███████████\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7\nCookie: PHPSESSID=█████\nConnection: close\n\n███████\n```\n```\nPOST ██████████ HTTP/1.1\nHost: www.███████\nContent-Length: 72\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://www.█████\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://www.████████████████\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7\nCookie: PHPSESSID=████\nConnection: close\n\n█████\n```\nIn the first case, the record obtained from the database is the following:\n```\n██████\n```\n██████\nWhilst in the second case, the record obtained is:\n```\n███\n```\n█████\nThis confirms that the OFFSET clause is concatenated to the original query and there is the possibility to exploit a SQL Injection.\n\n## Impact\n\nThe vulnerability could allow an attacker to dump sensitive and personal data from the web application database (such as usernames and password hashes) or to perform authentication bypasses.",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 7,
  "voters": [
    "tokyoenigma",
    "dastan_9408",
    "sensilis",
    "s_b5i57",
    "soupsandwich",
    "dhacks1997",
    "z3rod3x"
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
