{
  "id": 1573634,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTczNjM0",
  "url": "https://hackerone.com/reports/1573634",
  "title": "CVE-2022-32207: Unpreserved file permissions",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2022-05-17T17:28:53.876Z",
  "submitted_at": "2022-05-17T17:28:53.931Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "nyymi",
    "url": "/nyymi",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool for doing internet transfers"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-32207"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2022-06-27T06:55:36.074Z",
  "bug_reporter_agreed_on_going_public_at": "2022-06-27T06:55:36.032Z",
  "team_member_agreed_on_going_public_at": "2022-06-27T06:53:26.873Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nCurl fails to preserve file permissions when writing:\n- `CURLOPT_COOKIEJAR` database\n- `CURLOPT_ALTSVC` database\n- `CURLOPT_HSTS` database\n\nInstead the permissions is always reset to 0666 & ~umask if the file is updated.\n\nAs a result a file that was before protected against read access by other users becomes other user readable (as long as umask doesn't have bit 2 set).\nOut of these files only the `CURLOPT_COOKIEJAR` is likely to contain sensitive information.\n\nIn addition curl will replace softlink to the database with locally written database, or if the application is run privileged, specifying `\"/dev/null\"` as a file name can lead to system overwriting the special file and result in inoperable system.\n\nThis is CWE-281: Improper Preservation of Permissions\n\n## Steps To Reproduce:\n\n  1.  `umask 022`\n  2.  `install -m 600 /dev/null cookie.db`\n  3. `curl -b cookie.db -c cookie.db https://google.com`\n  4.  `ls -l cookie.db`\n\nAt least for  `CURLOPT_COOKIEJAR` this vulnerability was introduced in https://github.com/curl/curl/commit/b834890a3fa3f525cd8ef4e99554cdb4558d7e1b - this change was introduced to fix a issue https://github.com/curl/curl/issues/4914\n\n## Fix recommendations\n\nIf a file file is created and moved over a the old one, only do this if the file is regular file. Anything else is likely going to end up causing unexpected behaviour, outright failing, or if the user has high enough permissions, damage to the operating system.\n\nSafe cloning of file permissions can only be achieved if the owner / group of the file match the current user (else group permissions might be incorrect). Hence creating a new file and moving it over the old one should IMO only be attempted if the file user and group match that of the previous file.\n\nIf a method of creating a new file is still desired, something like this could be attempted to cover the most use cases:\n\n ```\n  /* If old file is a regular file attempt creating a new file with same ownership */\n  struct stat st;\n  if (stat(filename, &st) != -1 && S_ISREG(st.st_mode)) {\n    FILE *file;\n    int fd;\n    struct stat nst;\n    fd = open(tempstore, O_CREAT | O_EXCL, 0700);\n    if (fd == -1)\n      goto fail;\n    if (fstat(fd, &nst) == -1 ||\n       nst.st_uid != st.st_uid || nst.st_gid != st.st_gid) {\n      /* newly created file doesn't have same ownership, we can't proceed safely */\n      close(fd);\n      unlink(tempstore);\n      goto fail; // or perhaps try direct write instead?\n     }\n    /* use same mode as old file */\n    if (fchmod(fd, st.st_mode) == -1) {\n      close(fd);\n      unlink(tempstore);\n      goto fail;\n    }\n    file = fdopen(fd, FOPEN_WRITETEXT);\n    if (!file) {\n      close(fd);\n      unlink(tempstore);\n      goto fail;\n   }\n   /* write to file */\n   /* if successful move file over filename etc */\n  }\n  else Â {\n    /* use direct file write */\n  }\n ```\n\n## Impact\n\nLeak of sensitive information",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2022-07-27T06:53:26.983Z",
  "allow_singular_disclosure_after": -48929544.37512607,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "zy9ard3",
    "polem4rch",
    "shivammusic"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
