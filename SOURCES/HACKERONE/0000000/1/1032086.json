{
  "id": 1032086,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDMyMDg2",
  "url": "https://hackerone.com/reports/1032086",
  "title": "csi-snapshot-controller crashes when processing VolumeSnapshot with non-existing PVC",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-11-12T07:20:20.713Z",
  "submitted_at": "2020-11-12T07:20:20.753Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "piqin",
    "url": "/piqin",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 39386,
    "url": "https://hackerone.com/kubernetes",
    "handle": "kubernetes",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Kubernetes",
      "twitter_handle": "kubernetesio",
      "website": "https://kubernetes.io/",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8569"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-12-03T01:31:59.488Z",
  "bug_reporter_agreed_on_going_public_at": "2020-12-03T01:31:59.390Z",
  "team_member_agreed_on_going_public_at": "2020-12-02T21:23:14.050Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Report Submission Form\n\nI was asked by Kubernetes Product Security and H1 Employee @turtle_shell to open a new report with the same details as report #995699.\n\n# Summary:\ncsi-snapshot-controller crashes when processing VolumeSnapshot with non-existing PVC\n\n# Kubernetes Version:\n1.19\n\n# Component Version:\nsnapshot-controller from external-snapshotter repo ver 3.0.0\nhttps://github.com/kubernetes-csi/external-snapshotter/releases/tag/v3.0.0\n\n# Steps To Reproduce:\n1.   Install Kubernetes 1.19 with snapshot-controller v3.0.0\n2.   Create VolumeSnapshot object with empty spec.volumeSnapshotClass and spec.source.persistentVolumeClaimName = <non-existing PVC name \n\n    ```\n    apiVersion: snapshot.storage.k8s.io/v1beta1\n    kind: VolumeSnapshot\n    metadata:\n      name: new-snapshot\n    spec:\n      source:\n        persistentVolumeClaimName: blabla\n    ```\n3.   watch snapshot-controller die\n\n# Supporting Material/References:\n[list any additional material (e.g. screenshots, logs, etc.)]\n\nsnapshot-controller log:\n\n    E0929 06:42:38.147021       1 snapshot_controller_base.go:338] checkAndUpdateSnapshotClass failed to setDefaultClass the snapshot source PVC name is not specified\n    E0929 06:42:38.147118       1 runtime.go:78] Observed a panic: \"invalid memory address or nil pointer dereference\" (runtime error: invalid memory address or nil pointer dereference)\n    goroutine 161 [running]:\n    k8s.io/apimachinery/pkg/util/runtime.logPanic(0x1446fc0, 0x201e670)\n            /go/src/github.com/kubernetes-csi/external-snapshotter/vendor/k8s.io/apimachinery/pkg/util/runtime/runtime.go:74 +0xa6\n    k8s.io/apimachinery/pkg/util/runtime.HandleCrash(0x0, 0x0, 0x0)\n        /go/src/github.com/kubernetes-csi/external-snapshotter/vendor/k8s.io/apimachinery/pkg/util/runtime/runtime.go:48 +0x89\n    panic(0x1446fcit sh0, 0x201e670)\n        /usr/lib/golang/src/runtime/panic.go:969 +0x175\n    github.com/kubernetes-csi/external-snapshotter/v3/pkg/common-controller.(*csiSnapshotCommonController).syncSnapshotByKey(0xc0001f8e00, 0xc0006a6ae0, 0x19, 0x0, 0xbc)\n        /go/src/github.com/kubernetes-csi/external-snapshotter/pkg/common-controller/snapshot_controller_base.go:215 +0x9d7\n    github.com/kubernetes-csi/external-snapshotter/v3/pkg/common-controller.(*csiSnapshotCommonController).snapshotWorker(0xc0001f8e00)\n        /go/src/github.com/kubernetes-csi/external-snapshotter/pkg/common-controller/snapshot_controller_base.go:188 +0xed\n    k8s.io/apimachinery/pkg/util/wait.BackoffUntil.func1(0xc0006ba8b0)\n        /go/src/github.com/kubernetes-csi/external-snapshotter/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:155 +0x5f\n    k8s.io/apimachinery/pkg/util/wait.BackoffUntil(0xc0006ba8b0, 0x1774260, 0xc0001f0030, 0x1, 0xc00002a1e0)\n        /go/src/github.com/kubernetes-csi/external-snapshotter/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:156 +0xad\n    k8s.io/apimachinery/pkg/util/wait.JitterUntil(0xc0006ba8b0, 0x0, 0x0, 0x1, 0xc00002a1e0)\n        /go/src/github.com/kubernetes-csi/external-snapshotter/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:133 +0x98\n    k8s.io/apimachinery/pkg/util/wait.Until(0xc0006ba8b0, 0x0, 0xc00002a1e0)\n        /go/src/github.com/kubernetes-csi/external-snapshotter/vendor/k8s.io/apimachinery/pkg/util/wait/wait.go:90 +0x4d\n    created by it shgithub.com/kubernetes-csi/external-snapshotter/v3/pkg/common-controller.(*csiSnapshotCommonController).Run\n        /go/src/github.com/kubernetes-csi/external-snapshotter/pkg/common-controller/snapshot_controller_base.go:139 +0x2ae\n    panic: runtime error: invalid memory address or nil pointer dereference [recovered]\n            panic: runtime error: invalid memory address or nil pointer dereference\n    [signal SIGSEGV: segmentation violation code=0x1 addr=0xa0 pc=0x12b1d97]\n\n## Impact\n\nDoS of snapshot-controller. It's restarted by Kubernetes, but it dies processing the same VolumeSnapshot again and again.\n\n* Users can't create snapshots of their volumes.\n* Kubernetes (snapshot-controller) does not clean up VolumeSnapshotContent objects when user deletes a VolumeSnapshot and its Retain policy is Delete.\n\nAll other Kubernetes functionality is not impacted.",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "weakness": {
    "id": 51,
    "name": "NULL Pointer Dereference"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-01-01T21:23:14.136Z",
  "allow_singular_disclosure_after": -98296535.14399809,
  "singular_disclosure_allowed": true,
  "vote_count": 15,
  "voters": [
    "sw33tlie",
    "rook1337",
    "h4x0r_dz",
    "cryptographer",
    "vijay5647",
    "7005indian-bs",
    "phxt",
    "itsmekriss",
    "imtiaz0x",
    "n1cotheh4cker",
    "and 5 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 34432,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "github.com/kubernetes-csi",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
