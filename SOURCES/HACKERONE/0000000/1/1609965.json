{
  "id": 1609965,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjA5OTY1",
  "url": "https://hackerone.com/reports/1609965",
  "title": "RCE via the DecompressedArchiveSizeValidator and Project BulkImports (behind feature flag)",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2022-06-23T03:05:28.695Z",
  "submitted_at": "2022-06-23T03:05:28.831Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "vakzz",
    "url": "/vakzz",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/6zbovkumst7oljmo9v21pig3yh9j/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c?response-content-disposition=inline%3B%20filename%3D%2294971b5a75a669ea52903c09fc847f3434930258211181557be06162f5a8bac0.jpg%22%3B%20filename%2A%3DUTF-8%27%2794971b5a75a669ea52903c09fc847f3434930258211181557be06162f5a8bac0.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS4CNW75T%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142724Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIDmkHYCcawy3Sb8QBlv2L9dRaTD6HSDV3TbjWBmZorWnAiEA0CZ53zGUVgh0fiMkhSU8TF%2FBE%2BtBPrZ5XHuwsr8IHVAqsQUIdxADGgwwMTM2MTkyNzQ4NDkiDE3%2BLnmDb%2B%2FPajki%2FiqOBX0%2Fqe%2BqZVy0Jp6bijwxmDvg0Xqn4XctdGV3Wm4bY188L5jul3GRvTsDvwpICTjB%2B3LT6eyrRH6gl9J4HXF9q9yqM5ZxJEVzvGNmZ9bpsMMuHRNJp7fihen9HyPWuAOqdKt%2FAv9T2%2BzEYjLeajCy53b0E%2BVb3dm%2FTsy506%2B%2BmrgB38bGZiyfeCem3eZu687lGBLoRWTsXaHR%2F5hvWPEo%2Fs5eNhWcX0VHSuk3rz0KYGaOjjFazM1Q%2BOA01kM0I05s5lza2BzzgGiAdprvEmmtS5vBOfwEHcGJMXIoCvdFolrS%2BQ1fXBVPGcm0BXNpW%2BpSYqNfnhFtJ%2FJ%2B8ChCVUfyMT9Myv5hacblnOkNNea4hBhofu5bhefF4lCXxuwPPeUqs8mWHkR4O%2B5Bo9tgctPRR%2BA%2FQCm86vxM19KtlsppB7JvYuvLiH2jizvTg62iup9GBKJyogVXrn8FRELJsSw6R0LSQTSF1XnpfBqoJWOQCG7xvVi9PfRFZPaaTkfSowjA9iuW9%2BRz%2BeUC2868SXamkT2CnFli9Q8PSppf9z2Mntillpk749wSStjy4mONIjPDP9Z4jtZBkwLw601cVbtFELajOVFM%2B7WINdclJa8sgDEqYcRbfvRSJa5ShSyVbquO15DMDt5AnV4bBcTLtykIpAivgIL0dV21r0T1ujfi3BrXjA44tYm8a9zaI2kZiyO2OoJzgvlzBny4kKYozPeso8ysmmJSOcvHrRGqFf1r64gigkTfrA6bohlUKUaqhLnC3PhtknoScEsGiWUO1eKpwg6fyHj20VycABkhP0OusmvZXR0ukV4ceMyLRKlRtzQMR2ubHzOsR4%2FQ3fNjkhoDNE6L9FLoyjtwatwQQ7WcrjD%2B3a2uBjqxAclEdJGaJgbhdDlidGgw6vzzg4gdjLmJRPj1qQeS0ZpIpxhp3%2FpvXd2qQUcJIwhK7sK6kI3Od%2B%2FV1CWvzhy6EZoJgOKe1IDwDulIA1tGcjp%2FCus6%2BIZ5r%2FaswOJxKl%2Ff3uQKGEFA2rk%2BLyHGtaDahUMuN6af70DatpL9%2B9A%2BzRNmukwOrOKIjxd7ayl57LdZ1PHcJYcqbGT%2BKAa5uzR6ojk%2F%2F1%2Bhz5frj0D9IlPJKFV8AA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5bf3e7ac67c7ee0c85ecefe56ce96be80fcdb37340eda8487559fa4ad5e8e4bc"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2022-2185"
  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2022-09-13T04:40:52.091Z",
  "bug_reporter_agreed_on_going_public_at": "2022-08-05T07:30:40.178Z",
  "team_member_agreed_on_going_public_at": "2022-09-13T04:40:51.878Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\n\nThe `DecompressedArchiveSizeValidator` is used to check the size of a archive before extracting it:\n\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.1.0-ee/lib/gitlab/import_export/decompressed_archive_size_validator.rb#L82\n```ruby\n      def command\n        \"gzip -dc #{@archive_path} | wc -c\"\n      end\n\n   def validate\n        pgrp = nil\n        valid_archive = true\n\n        Timeout.timeout(TIMEOUT_LIMIT) do\n          stdin, stdout, stderr, wait_thr = Open3.popen3(command, pgroup: true)\n          stdin.close\n```\n\nSince `command` is a string and passed directly to `Open3.popen3` it will be interpreted as a shell command, so if `archive_path` contains any special characters it can be used to run arbitrary commands.\n\nOne of the places that the `DecompressedArchiveSizeValidator` is used is in the [Gitlab::ImportExport::FileImporter](https://gitlab.com/gitlab-org/gitlab/-/blob/v15.1.0-ee/lib/gitlab/import_export/file_importer.rb#L110),\n\n```ruby\n     def size_validator\n        @size_validator ||= DecompressedArchiveSizeValidator.new(archive_path: @archive_file)\n      end\n```\n\nIt gets `@archive_file` from  the constructor, and is used by the [Gitlab::ImportExport::Importer](https://gitlab.com/gitlab-org/gitlab/-/blob/v15.1.0-ee/lib/gitlab/import_export/importer.rb#L48) which gets it from `project.import_source`.\n\nUnder normal circumstances `import_source` is nil and is generated by the `FileImporter` using `@archive_file = File.join(@shared.archive_path, Gitlab::ImportExport.export_filename(exportable: @importable))`.\n\nMost of the places I've checked do not allow you to set the `import_source` for a project, or have the `import_type` set to something other than `gitlab_project` or `gitlab_custom_project_template` (which is required to use the `::Gitlab::ImportExport::Importer`).\n\nThere is one place though, in the `BulkImports::Projects::Pipelines::ProjectPipeline`. Luckily this is disabled by default as it requires the `bulk_import_projects` feature to be enabled. If/once this feature is enabled, it's possible to trigger the above flow.\n\nThis is possible as the two transformer on the `ProjectPipeline` are `:BulkImports::Common::Transformers::ProhibitedAttributesTransformer` and `::BulkImports::Projects::Transformers::ProjectAttributesTransformer`,  which first removes a list of prohibited keys:\n\n```ruby\nPROHIBITED_REFERENCES = Regexp.union(\n          /\\Acached_markdown_version\\Z/,\n          /\\Aid\\Z/,\n          /_id\\Z/,\n          /_ids\\Z/,\n          /_html\\Z/,\n          /attributes/,\n          /\\Aremote_\\w+_(url|urls|request_header)\\Z/ # carrierwave automatically creates these attribute methods for uploads\n        ).freeze\n```\n\nAnd then sets a few other values:\n```ruby\n          entity = context.entity\n          visibility = data.delete('visibility')\n\n          data['name'] = entity.destination_name\n          data['path'] = entity.destination_name.parameterize\n          data['import_type'] = PROJECT_IMPORT_TYPE\n          data['visibility_level'] = Gitlab::VisibilityLevel.string_options[visibility] if visibility.present?\n          data['namespace_id'] = Namespace.find_by_full_path(entity.destination_namespace)&.id if entity.destination_namespace.present?\n\n          data.transform_keys!(&:to_sym)\n```\n\nAll of the other params are allowed and passed directly into `project = ::Projects::CreateService.new(context.current_user, data).execute`. The first thing the create service does its to check if it's creating from a template, and if so the `CreateFromTemplateService` is used instead:\n\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.1.0-ee/app/services/projects/create_service.rb#L25-27\n```ruby\n    def execute\n     if create_from_template?\n        return ::Projects::CreateFromTemplateService.new(current_user, params).execute\n      end\n    # ...\n    end\n\n    def create_from_template?\n      @params[:template_name].present? || @params[:template_project_id].present?\n    end\n```\n\nSince we control all of the params, this path can be triggered by setting `template_name` to a valid template such as `rails`.  This then uses the `GitlabProjectsImportService` which allows the `import_type` to be changed from `gitlab_project_migration` to `gitlab_project`.\n\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.1.0-ee/app/services/projects/gitlab_projects_import_service.rb#L61-76\n```ruby\n    def prepare_import_params\n      data = {}\n      data[:override_params] = @override_params if @override_params\n\n      if overwrite_project?\n        data[:original_path] = params[:path]\n        params[:path] += \"-#{tmp_filename}\"\n      end\n\n      if template_file\n        data[:sample_data] = params.delete(:sample_data) if params.key?(:sample_data)\n        params[:import_type] = 'gitlab_project'\n      end\n\n      params[:import_data] = { data: data } if data.present?\n    end\n```\n\nThe `Projects::CreateService` service is then called again with the updated `import_type`, but the rest of our params the same. This causes the `import_schedule` to happen as `@project.gitlab_project_migration?` is no longer true\n\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.1.0-ee/app/services/projects/create_service.rb#L276-282\n```ruby\n    def import_schedule\n      if @project.errors.empty?\n        @project.import_state.schedule if @project.import? && !@project.bare_repository_import? && !@project.gitlab_project_migration?\n      else\n        fail(error: @project.errors.full_messages.join(', '))\n      end\n    end\n```\n\nIf a custom `import_source` was used, it will be used as the `@archive_file` for the `Gitlab::ImportExport::FileImporter`.  After `wait_for_archived_file` has reached `MAX_RETRIES` (it continues instead of failing) then `validate_decompressed_archive_size` will be called and then `Open3.popen3` with a controllable string.\n\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.1.0-ee/lib/gitlab/import_export/file_importer.rb#L45\n\n```ruby\n       wait_for_archived_file do\n          validate_decompressed_archive_size if Feature.enabled?(:validate_import_decompressed_archive_size)\n          decompress_archive\n        end\n\n      def wait_for_archived_file\n        MAX_RETRIES.times do |retry_number|\n          break if File.exist?(@archive_file)\n\n          sleep(2**retry_number)\n        end\n\n        yield\n      end\n```\n\n### Steps to reproduce\n\n1. spin up a gitlab instance\n1. ssh in and enable bulk project imports with from a rails console: `sudo gitlab-rails console` then `::Feature.enable(:bulk_import_projects)`\n1. start watching the logs with `sudo gitlab-ctl tail`\n1. create an api token\n1. create a new group\n1. create a new project in that group\n1. download {F1785226} and change `PROJECT_PATH` to the full path of the project above and `PROJECT_ID` to its id\n1. change `\"import_source\":\"/tmp/ggg;echo lala|tee /tmp/1234;#\",` to be your custom command (it cannot contain `>` as json will convert it to `\\u003c`)\n1. (optional) remove `proxies={\"http\":\"http://127.0.0.1:8080\", \"https\":\"http://127.0.0.1:8080\"}` if you are not using burp/another proxy\n1. run it with `FLASK_APP=api_project_ql.py flask run`\n1. start ngrok with `ngrok http 5000`\n1.  go to new group -> import group\n1. enter the ngrok http address and your token from above in the `Import groups from another instance of GitLab` section\n1. select the group created above, change the parent to `No parent` and choose a new group name\n1. hit import\n1. you should see requests being made, then after the project is imported and the `wait_for_archived_file` has timed out (takes a few minutes) you should see something like following error in the logs and the payload will execute:\n\n```\ncommand exited with error code 2: tar (child): /tmp/ggg;echo lala|tee /tmp/1234;#: Cannot open: No such file or directory\ntar (child): Error is not recoverable: exiting now\ntar: Child returned status 2\ntar: Error is not recoverable: exiting now\n```\n\n```bash\nvagrant@gitlab:~$ cat /tmp/1234\nlala\nvagrant@gitlab:~$\n```\n\n### Impact\n\nIf the `bulk_import_projects` feature is enabled, allows an attacker to execute arbitrary commands on a gitlab server\n\n\n### What is the current *bug* behavior?\n* The `DecompressedArchiveSizeValidator` passes a string to `popen` that can contain attacker controlled data\n* The `ProjectPipeline` does not correctly filter the project params\n\n### What is the expected *correct* behavior?\n* The `DecompressedArchiveSizeValidator` should use `Gitlab::Popen` and the command should be an array of strings\n* The `ProjectPipeline` should use the `Gitlab::ImportExport::AttributeCleaner` or just have a whitelist of allowed params\n\n### Relevant logs and/or screenshots\n\n```json\n{\n    \"severity\": \"ERROR\",\n    \"time\": \"2022-06-23T01:52:57.556Z\",\n    \"correlation_id\": \"0d72e54e82938b4b82aa3dcafe6c4dfe\",\n    \"exception.class\": \"Gitlab::ImportExport::Error\",\n    \"exception.message\": \"command exited with error code 2: tar (child): /tmp/ggg;echo lala|tee /tmp/1234;#: Cannot open: No such file or directory\\ntar (child): Error is not recoverable: exiting now\\ntar: Child returned status 2\\ntar: Error is not recoverable: exiting now\",\n    \"user.username\": \"vakzz\",\n    \"tags.program\": \"sidekiq\",\n    \"tags.locale\": \"en\",\n    \"tags.feature_category\": \"importers\",\n    \"tags.correlation_id\": \"0d72e54e82938b4b82aa3dcafe6c4dfe\",\n    \"extra.sidekiq\": {\n        \"retry\": false,\n        \"queue\": \"repository_import\",\n        \"version\": 0,\n        \"backtrace\": 5,\n        \"dead\": false,\n        \"status_expiration\": 86400,\n        \"memory_killer_memory_growth_kb\": 50,\n        \"memory_killer_max_memory_growth_kb\": 300000,\n        \"args\": [\n            \"31\"\n        ],\n        \"class\": \"RepositoryImportWorker\",\n        \"jid\": \"9d28590a58ec7db944453edc\",\n        \"created_at\": 1655948922.4369478,\n        \"correlation_id\": \"0d72e54e82938b4b82aa3dcafe6c4dfe\",\n        \"meta.user\": \"vakzz\",\n        \"meta.client_id\": \"user/2\",\n        \"meta.caller_id\": \"BulkImports::PipelineWorker\",\n        \"meta.remote_ip\": \"192.168.0.144\",\n        \"meta.feature_category\": \"importers\",\n        \"meta.root_caller_id\": \"Import::BulkImportsController#create\",\n        \"meta.project\": \"imported_13/export_project\",\n        \"meta.root_namespace\": \"imported_13\",\n        \"worker_data_consistency\": \"always\",\n        \"idempotency_key\": \"resque:gitlab:duplicate:repository_import:e64a87ccd733ff3c9b12cd20d98ea1d44a21196e9d0398c0af668ee84bf77358\",\n        \"size_limiter\": \"validated\",\n        \"enqueued_at\": 1655948922.442958\n    },\n    \"extra.importer\": \"Import/Export\",\n    \"extra.exportable_id\": 31,\n    \"extra.exportable_path\": \"imported_13/export_project\",\n    \"extra.import_jid\": null\n}\n```\n\n### Output of checks\n#### Results of GitLab environment info\n\n```\nSystem information\nSystem:\t\tUbuntu 20.04\nProxy:\t\tno\nCurrent User:\tgit\nUsing RVM:\tno\nRuby Version:\t2.7.5p203\nGem Version:\t3.1.4\nBundler Version:2.3.15\nRake Version:\t13.0.6\nRedis Version:\t6.2.7\nSidekiq Version:6.4.0\nGo Version:\tunknown\n\nGitLab information\nVersion:\t15.1.0-ee\nRevision:\t31c24d2d864\nDirectory:\t/opt/gitlab/embedded/service/gitlab-rails\nDB Adapter:\tPostgreSQL\nDB Version:\t12.10\nURL:\t\thttp://gitlab.wbowling.info\nHTTP Clone URL:\thttp://gitlab.wbowling.info/some-group/some-project.git\nSSH Clone URL:\tgit@gitlab.wbowling.info:some-group/some-project.git\nElasticsearch:\tno\nGeo:\t\tno\nUsing LDAP:\tno\nUsing Omniauth:\tyes\nOmniauth Providers:\n\nGitLab Shell\nVersion:\t14.7.4\nRepository storage paths:\n- default: \t/var/opt/gitlab/git-data/repositories\nGitLab Shell path:\t\t/opt/gitlab/embedded/service/gitlab-shell\n```\n\n## Impact\n\nIf the `bulk_import_projects` feature is enabled, allows an attacker to execute arbitrary commands on a gitlab server.",
  "bounty_amount": "33510.0",
  "formatted_bounty": "$33,510",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 1785226,
      "file_name": "api_project_ql.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tvzrzl7wohlwhw466rornjse92sk?response-content-disposition=attachment%3B%20filename%3D%22api_project_ql.py%22%3B%20filename%2A%3DUTF-8%27%27api_project_ql.py&response-content-type=text%2Fx-python-script&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS4CNW75T%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T142724Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIDmkHYCcawy3Sb8QBlv2L9dRaTD6HSDV3TbjWBmZorWnAiEA0CZ53zGUVgh0fiMkhSU8TF%2FBE%2BtBPrZ5XHuwsr8IHVAqsQUIdxADGgwwMTM2MTkyNzQ4NDkiDE3%2BLnmDb%2B%2FPajki%2FiqOBX0%2Fqe%2BqZVy0Jp6bijwxmDvg0Xqn4XctdGV3Wm4bY188L5jul3GRvTsDvwpICTjB%2B3LT6eyrRH6gl9J4HXF9q9yqM5ZxJEVzvGNmZ9bpsMMuHRNJp7fihen9HyPWuAOqdKt%2FAv9T2%2BzEYjLeajCy53b0E%2BVb3dm%2FTsy506%2B%2BmrgB38bGZiyfeCem3eZu687lGBLoRWTsXaHR%2F5hvWPEo%2Fs5eNhWcX0VHSuk3rz0KYGaOjjFazM1Q%2BOA01kM0I05s5lza2BzzgGiAdprvEmmtS5vBOfwEHcGJMXIoCvdFolrS%2BQ1fXBVPGcm0BXNpW%2BpSYqNfnhFtJ%2FJ%2B8ChCVUfyMT9Myv5hacblnOkNNea4hBhofu5bhefF4lCXxuwPPeUqs8mWHkR4O%2B5Bo9tgctPRR%2BA%2FQCm86vxM19KtlsppB7JvYuvLiH2jizvTg62iup9GBKJyogVXrn8FRELJsSw6R0LSQTSF1XnpfBqoJWOQCG7xvVi9PfRFZPaaTkfSowjA9iuW9%2BRz%2BeUC2868SXamkT2CnFli9Q8PSppf9z2Mntillpk749wSStjy4mONIjPDP9Z4jtZBkwLw601cVbtFELajOVFM%2B7WINdclJa8sgDEqYcRbfvRSJa5ShSyVbquO15DMDt5AnV4bBcTLtykIpAivgIL0dV21r0T1ujfi3BrXjA44tYm8a9zaI2kZiyO2OoJzgvlzBny4kKYozPeso8ysmmJSOcvHrRGqFf1r64gigkTfrA6bohlUKUaqhLnC3PhtknoScEsGiWUO1eKpwg6fyHj20VycABkhP0OusmvZXR0ukV4ceMyLRKlRtzQMR2ubHzOsR4%2FQ3fNjkhoDNE6L9FLoyjtwatwQQ7WcrjD%2B3a2uBjqxAclEdJGaJgbhdDlidGgw6vzzg4gdjLmJRPj1qQeS0ZpIpxhp3%2FpvXd2qQUcJIwhK7sK6kI3Od%2B%2FV1CWvzhy6EZoJgOKe1IDwDulIA1tGcjp%2FCus6%2BIZ5r%2FaswOJxKl%2Ff3uQKGEFA2rk%2BLyHGtaDahUMuN6af70DatpL9%2B9A%2BzRNmukwOrOKIjxd7ayl57LdZ1PHcJYcqbGT%2BKAa5uzR6ojk%2F%2F1%2Bhz5frj0D9IlPJKFV8AA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=41b1db1ce87e7571b14439e305e5b38f8dd7b3a9afb7bf24bca80d57fa1fb8b6",
      "file_size": 2609,
      "type": "text/x-python-script",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 273,
  "voters": [
    "akr3ch",
    "b19r8a14",
    "kntjrld",
    "alex_volk",
    "shreyaschavhan",
    "subtlegrowth",
    "bfr4nk",
    "viridian_40826d",
    "jumpydata",
    "shafou",
    "and 263 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.9,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 39022,
    "asset_type": "OTHER",
    "asset_identifier": "Your Own GitLab Instance",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
