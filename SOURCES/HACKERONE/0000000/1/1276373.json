{
  "id": 1276373,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMjc2Mzcz",
  "url": "https://hackerone.com/reports/1276373",
  "title": "Information disclosure -> 2fa bypass -> POST exploitation ",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2021-07-23T18:33:23.314Z",
  "submitted_at": "2021-07-23T18:33:23.387Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "akashhamal0x01",
    "url": "/akashhamal0x01",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/vdyDQhCg37orFjBs8DU9T7Lf/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 443,
    "url": "https://hackerone.com/algolia",
    "handle": "algolia",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/443/6dc48cd913e21beebc873e81aaf28fd3b6b9e12e_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/443/6dc48cd913e21beebc873e81aaf28fd3b6b9e12e_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Algolia",
      "twitter_handle": "algolia",
      "website": "https://algolia.com",
      "about": "Hosted search API that delivers instant and relevant results from the first keystroke"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-09-08T13:40:42.147Z",
  "bug_reporter_agreed_on_going_public_at": "2021-09-06T09:20:41.932Z",
  "team_member_agreed_on_going_public_at": "2021-09-08T13:40:42.026Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Greetings!\n\nSo i was testing algolia.com. Impressed to find out that there are mitigations in place to prevent POST exploitation such as : \n\nWhen 2fa is enabled we need \"old password\"  to update following things : \n\n- To update the password\n- To disable the 2fa, etc (might more more....)\n\nAnd we need 2fa codes to do following actions : \n\n- To change email\n- To download recovery codes \n- To delete account, etc (might be more...)\n\nSo given these security checks, even if an account is compromised ( attacker don't know password or have access to 2fa or anything but only access to account)\n\nFor example, just consider a scene that the victim is  using your website in cyber cafe and forgets to for example logout.\n\nSo the attacker will check all functionalities to make victims account his/her but provided that he/she needs to have either access to 2fa or know password then he/she will be helpless. So now attacker starts to find vulnerabilities in website!\n\nSo here i found that the \"gauth_secret\" is potentially leaked in response (which is not normal and is unnecesarry to leak), which means that the attacker who got access to the account can take advantage of this information leakage , use that \"gauth_secret\" value in authenticator app and then bypass the checks by providing the correct codes!\n\nSo this way an attacker can bypass authentication and execute critical actions like :\n\n- updating mail , deleting acc , etc\n\n# Steps to reproduction :\n\nfirst login into algolia.com and then \n\n- Go to \"https://www.algolia.com/account/support\" \n- There will be 2 buttons : \"Revoke\" and \"Renew\", click on \"Renew\" and intercept that request using proxy like burp suite\n- Now  send that request to repeater and forward that request\n-  In repeater, replay the request and check response and look for \"gauth_secret\" and then copy the value of that key\n- download google authenticator app and then paste it , then it will show the codes\n- Now u can execute actions as you know the 2fa codes now!\n\n## Impact\n\nSince there are checks implemented for every critical action , i think the leakage of \"gauth_secret\" here let attacker bypass those checks by knowing 2fa\n\nSo now the attacker can delete account, update email and do much more critical actions and totally compromise victims account\n\n\nSolution : Don't leak the gauth_secret in response",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-10-06T09:20:42.050Z",
  "allow_singular_disclosure_after": -74321671.59072734,
  "singular_disclosure_allowed": true,
  "vote_count": 71,
  "voters": [
    "nima_owji",
    "fqdn",
    "rook1337",
    "run_win",
    "burhan__xd",
    "tess",
    "shriyanss",
    "shubham_srt",
    "sudi",
    "akashhamal0x01",
    "and 61 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 310,
    "asset_type": "URL",
    "asset_identifier": "www.algolia.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
