{
  "id": 4114,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MTE0",
  "url": "https://hackerone.com/reports/4114",
  "title": "Persistent XSS: Editor link",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-03-16T11:30:47.494Z",
  "submitted_at": "2014-03-16T11:30:47.494Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "tomvg",
    "url": "/tomvg",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/088/bcadc0a4a87f5627226b724ae0dcacbee32cc3e7_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 18,
    "url": "https://hackerone.com/phabricator",
    "handle": "phabricator",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Phabricator",
      "twitter_handle": "phabricator",
      "website": "http://phacility.com/phabricator/",
      "about": "Phabricator is a collection of open source web applications that help software companies build better software."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2014-04-16T20:02:21.407Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2014-03-17T20:04:33.019Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The editor link used for external applications allows scheme other than `http:` or `https:`.  Although the `phutil_tag` function checks whether the scheme is `javascript:` to prevent XSS attacks ([see GitHub](https://github.com/facebook/libphutil/blob/6b1066f7c0b34f5a485ad5d8af57792b3acae4d9/src/markup/render.php#L19)), it is straightforward to bypass this check by adding a whitespace character in between `javascript` and `:`.  For instance, clicking a link with the following value for the `href` attribute will execute arbitary JavaScript code: \r\n\r\n```\r\njavascript\r\n:alert('xss')\r\n``` \r\n(note the newline character between `javascript` and `:`).\r\n\r\n# Replication steps:\r\n\r\n* Go to `settings/panel/display/`\r\n* Press \"Save\" with network panel of console active\r\n* Copy the POST request as cURL\r\n* Use `curl` to set the `editor` parameter to `javascript%0A%3Aalert%281%29` (this is not possible to do in the browser as it strips these characters from input fields)\r\n* Go to a repository, and click \"Edit\", you should now see an alert box pop up\r\n\r\n# Attack scenarios\r\n\r\nAlthough the JavaScript code will only be executed on the user's own account, several attack scenarios are possible:\r\n\r\n1. A temporary account take-over would allow the attacker to set the editor link to include JavaScript code. Even when the victim manages to recover his account, clicking on the \"Edit\" link will  give the attacker again control over the account.\r\n2. Several login-csrf were found in Phabricator, so an attacker could have abused this (or abuse it if a similar issue arises) to login the victim into his account. The attacker could use the XSS to trick the victim into entering his own credentials\r\n\r\n# Proposed fix\r\n\r\nIn the `phutil_tag` function, first filter all non-alphanumerical characters of `$href` and then check whether it starts with `javascript:`.",
  "bounty_amount": "300.0",
  "formatted_bounty": "$300",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2014-04-16T19:02:13.954Z",
  "allow_singular_disclosure_after": -310148561.41943413,
  "singular_disclosure_allowed": true,
  "vote_count": 6,
  "voters": [
    "tess",
    "fantam1",
    "cryptographer",
    "shivammusic",
    "khleymu_da",
    "omaratik123"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
