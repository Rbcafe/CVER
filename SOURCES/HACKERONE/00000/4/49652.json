{
  "id": 49652,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80OTY1Mg==",
  "url": "https://hackerone.com/reports/49652",
  "title": "Improperly validated fields allows injection of arbitrary HTML via spoofed React objects",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2015-02-28T17:38:13.663Z",
  "submitted_at": "2015-02-28T17:38:13.663Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "danlec",
    "url": "/danlec",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2015-03-18T13:11:50.503Z",
  "bug_reporter_agreed_on_going_public_at": "2015-03-18T13:11:48.827Z",
  "team_member_agreed_on_going_public_at": "2015-03-18T07:38:32.505Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Note:** I haven't yet investigated the implications of this fully, so this may be more severe than I'm currently aware of.  Right now the only exploits I'm aware of allow a team member to attack other team members.\r\n\r\nI've found a couple fields that I'd expect to be limited to string values, but which **actually accept data of arbitrary types**.  So far, I've found that these include:\r\n\r\n- The `reference` field on a report triage action\r\n- The `data` field of a trigger criterion\r\n\r\n(There are several other fields that seem to accept an arbitrary type, but appear to be converted into strings.  The above fields also come back from the server as non-strings.)\r\n\r\nBy manually crafting the JSON used when setting these fields, a malicious person can set them to non-string values, e.g. arrays or simple objects.  \r\n\r\nWhen these fields are rendered, they are assumed to be strings, and passed as the `children` argument when calling `React.createElement`.  Unfortunately, that argument is allowed to be text content **or a React child object**.  Since these fields can in fact be arbitrary objects, we can create an object that appears to be a React element, and which renders as something dangerous.\r\n\r\n**Proof of Concept**\r\n\r\nHere's how the exploit would work, using the `reference` field on a report:\r\n\r\nAs an attacker, open up a report and \"triage\" it, setting the reference field to an object that appears to be a React element.  This can be done from the console using the following command:  \r\n```\r\n$.ajax({ \r\n  url: \"https://hackerone.com/reports/bulk\", \r\n  method: 'post', \r\n  contentType: \"application/json\", \r\n  data: JSON.stringify({ \r\n    state: \"open\", \r\n    substate: \"triaged\", \r\n    report_ids: [… id of the report …], \r\n    reply_action: \"change-state\", \r\n    reference: {\r\n      _isReactElement: true,\r\n      _store: {},\r\n      type:\"body\",\r\n      props: {\r\n        dangerouslySetInnerHTML: {\r\n          __html:\r\n            \"<h1>Arbitrary HTML</h1><script>alert('No CSP Support :(')</script>\"\r\n        }\r\n      }\r\n    }   \r\n  }) \r\n})\r\n```  \r\n\r\nNow, as a victim, open the report and observe that arbitrary HTML has been inserted.\r\n\r\nFor the curious, here's what the fields in the fake React element do:\r\n\r\n- `_isReactElement` tricks React into thinking it's rendering an element\r\n- `_store` prevents a javascript error (React tries writing some properties of this field)\r\n- `type` is the type of element to be rendered\r\n- `props` is the properties of the spoofed element.  `dangerouslySetInnerHTML` is a [special field](http://facebook.github.io/react/docs/special-non-dom-attributes.html) that lets you manually set the inner HTML for the element.",
  "bounty_amount": "5000.0",
  "formatted_bounty": "$5,000",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2015-04-17T07:38:33.833Z",
  "allow_singular_disclosure_after": -278567908.94786805,
  "singular_disclosure_allowed": true,
  "vote_count": 17,
  "voters": [
    "dirk",
    "cxzer0",
    "irvinlim",
    "spam404",
    "ali",
    "xsam",
    "dreadpiraterobertt",
    "gamliel",
    "r3y",
    "japz",
    "and 7 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
