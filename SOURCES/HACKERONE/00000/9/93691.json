{
  "id": 93691,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85MzY5MQ==",
  "url": "https://hackerone.com/reports/93691",
  "title": "Arbitrary write on s3://shopify-delivery-app-storage/files",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-10-13T19:22:49.202Z",
  "submitted_at": "2015-10-13T19:22:49.202Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "brakhane",
    "url": "/brakhane",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/040/726/4b47d99eec4ee906a402afb934855158d1e6d929_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1382,
    "url": "https://hackerone.com/shopify",
    "handle": "shopify",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Shopify",
      "twitter_handle": "",
      "website": "https://www.shopify.com",
      "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2015-10-15T18:55:26.436Z",
  "bug_reporter_agreed_on_going_public_at": "2015-10-15T18:55:26.206Z",
  "team_member_agreed_on_going_public_at": "2015-10-14T22:31:57.913Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Short\n====\nThe policy used to upload files via the Delivery app is too generic which results in an arbitrary write (and replace) of files in the files/ directory.\n\nDisclaimer: While I was unable to create a second store to fully test this (I can't create new development stores right now, support is researching this), I strongly believe that this vulnerability works as I expect it to work due to the nature of the policy.\n\nCurrent Policy\n====\n\n    {\n    \"expiration\": \"2015-10-14T15:27:47Z\",\n    \"conditions\": [\n        {\n            \"bucket\": \"shopify-delivery-app-storage\"\n        },\n        [\n            \"starts-with\", \"$key\", \"files/\"\n        ],\n        {\n            \"acl\": \"private\"\n        },\n        {\n            \"success_action_status\": \"200\"\n        },\n        [\"content-length-range\", 0, 5368709120]\n    ]\n    }\n\n\nWhat's wrong here\n====\n\nThe only (security relevant) limitations we have here are:\n - Signature + Policy are only valid for one day\n - The key has to start with files/\n - ACL has to be set private\n\nSo, one can basically write arbitrary files to the S3 bucket as long as those are within the files/ dir. This doesn't hinder anybody as all the 'good stuff to replace' is under that dir. As the ACL is private, files can just be downloaded when the delivery app signed a download request, so the attacker needs to get a hold on a valid link.  \n\nThe vector\n====\n - Find a shop with a downloadable good and purchase it OR get a manual direct link\n - Grab the bucket key when the file will be downloaded directly from S3 (via signed url)\n - Go to your own shop, create a product with a downloadable good\n - Note down the parameters used to POST the file when you upload it\n - Issue a new request to the key recorded from the data you don't own with the parameters you just grabbed from your own delivery app\n - Profit\n\nOne could do a ton of fun stuff to the files, to my mind come Viruses, Exploits, Illegal Content, etc.\n\nHow it should be\n====\n\nThe policy should be tailored directly to the upload at hand, especially the key. The app does return the specific path already where the file should be placed by the client, I don't see why the policy doesn't reflect that. The policy should be nailed directly to that key to eliminate this vulnerability.\n\nWhat I did that you should cleanup\n====\nI did upload 2 files to the bucket which don't belong to anyone, those files are:\n - files/hackerone/simon/brakhane/kitty.jpg\n - files/kitty.jpg\n\nYou might want to clean them away as they can't be downloaded anyway and just cost you money.\n\nCheers,\nSimon\n\nPS: I do hope strongly this isn't already known ;)",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2015-11-13T22:31:58.125Z",
  "allow_singular_disclosure_after": -260370919.6936293,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "drsniper",
    "techguynoob",
    "shivammusic",
    "spetr0x"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
