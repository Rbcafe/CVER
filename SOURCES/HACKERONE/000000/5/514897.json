{
  "id": 514897,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTQ4OTc=",
  "url": "https://hackerone.com/reports/514897",
  "title": "Possible to enumerate Addresses of users using AddressId and guessing the delivery_subzone",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-03-25T14:13:38.202Z",
  "submitted_at": "2019-03-25T14:13:38.202Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bigbug",
    "url": "/bigbug",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/193/109/585fd367d9fe6feb8fb35840fdadb04d16004b0b_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 2943,
    "url": "https://hackerone.com/zomato",
    "handle": "zomato",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/943/71b47f9aa21166f0989dfb97112ca10c66a9d0b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/943/71b47f9aa21166f0989dfb97112ca10c66a9d0b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Zomato",
      "twitter_handle": "Zomato",
      "website": "https://www.zomato.com",
      "about": "The fastest way to search for great places to eat at and order from around you. Serving 24 countries worldwide."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-07-15T08:03:14.353Z",
  "bug_reporter_agreed_on_going_public_at": "2020-07-15T08:03:14.250Z",
  "team_member_agreed_on_going_public_at": "2020-07-15T07:56:22.004Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Description**\n\nThe title may seem a bit confusing but I will try to make it as simple as possible. Let us dive into it.\n\nWhen we login to zomato.com and click on `Order Food`, We are redirected to the endpoint like `/mumbai/order-food-online?delivery_subzone=10159` where `mumbai` is the city and `10159` is the `delivery_subzone`. \n\nThe important thing here is that the page contains our full address we selected for purchase. \n\n{F451667}\n\nAs we can see, the page displays our **full address** we selected. In our case, I have selected an address with Tag `Other`. This could also be our `Home` address in case of genuine regular users. \n\nOn digging deeper this value comes from the cookie `selectedAddressId`, which is set when a user selects a saved address. \n\nWhen a request is sent, the server looks for this value to display the address on the order page. \n\n\nBut there is a catch to it. The server only returns the **Full Address** if it matches the correct **delivery_subzone**. \nIf the value of selectedAddressId does not match the delivery_subzone in which the address id falls under, the server only returns the **geo-location** and not the full address. \n\nLet us see this in practice:\n\n**Request**\n\n```\n:method: GET\n:path: /mumbai/order-food-online?delivery_subzone=10159\n:authority: www.zomato.com\n:scheme: https\nuser-agent: Mozilla/5.0 (Windows NT 6.3; rv:46.0) Gecko/20100101 Firefox/46.0\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\naccept-language: en-US,en;q=0.5\naccept-encoding: gzip, deflate, br\nreferer: https://www.zomato.com\ncookie: selectedAddressId=████████\n```\n\nNow in above request We have requested the server to fetch the Full Address of `AddressId=██████`. (This is my genuine AddressId) with the subzone 10159 (genuine subzone).\n\nThis is how a normal request looks like. The response will contain by **Full Address** because my subzone value is right. \n\nNow this can be used to enumerate the addresses of users **provided you have the right subzone value**\n\n###Why is this attack Practical and Impactful\n\n1. This can fetch the full address of any AddressId provided you have the right delivery_subzone value.\n2. If an attacker has the right subzone value he can get the full address associated with the AddressId. \n3. This attack also works in an **unauthenticated manner**. meaning the attacker needs to just set the target AddressId in the cookie field without authenticating, which makes tracing difficult. (cookie: selectedAddressId=████)\n4. **Lastly and Most Important** - There is **no Rate limiting**\n\nThe combination of an unauthenticated attacker with no rate limiting makes this attack seamlessly practical. I have tried couple of random values myself and managed to verify and obtain the full address of the victim.\n\n**Steps to reproduce**\n\nHere for the sake of reproducability, you can use my genuine address Id - `███`. This has value `██████` (My genuine Address :) )\n\n1. Login to zomato\n2. Click on `Order Food`\n3. Intercept the request and send to repeater (Burp Suite)\n4. Now change `selectedAddressId` cookie to `cookie: selectedAddressId=████`\n5. You will receive mu full address in the response.\n\nYou can also use my alternate test account AddressId `███` and the delivery_subzone `1050`\nThe expected value is `Other - A wing, imaginary road, Dahisar West`. \n\n###Exploit Raw Request\n\n```\n:method: GET\n:path: /mumbai/order-food-online?delivery_subzone=10159\n:authority: www.zomato.com\n:scheme: https\nuser-agent: Mozilla/5.0 (Windows NT 6.3; rv:46.0) Gecko/20100101 Firefox/46.0\naccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\naccept-language: en-US,en;q=0.5\naccept-encoding: gzip, deflate, br\nreferer: https://www.zomato.com\ncookie: selectedAddressId=████████\n```\n\n###Exploit CURL request\n\n`curl \"https://www.zomato.com/mumbai/order-food-online?delivery_subzone=1050\" -H \"Host: www.zomato.com\" -H \"User-Agent: Mozilla/5.0 (Windows NT 6.3; rv:46.0) Gecko/20100101 Firefox/46.0\" -H \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" -H \"Accept-Language: en-US,en;q=0.5\" --compressed -H \"Referer: https://www.zomato.com\" -H \"Cookie: selectedAddressId=██████;\" -H \"Connection: keep-alive\"`\n\n## Impact\n\n1. Enumerate Addresses of users with help of address ID and `delivery_subzone`\n2. No Rate limiting leads to BruteForce of delivery_subzone to retrieve addresses\n3. Unauthenticated attacker can enumerate addresses without any limitation",
  "bounty_amount": "1500.0",
  "formatted_bounty": "$1,500",
  "weakness": {
    "id": 55,
    "name": "Insecure Direct Object Reference (IDOR)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 22,
  "voters": [
    "n4tur3_",
    "ali",
    "sudi",
    "mr-hakhak",
    "ashhhh",
    "dastan_9408",
    "naategh",
    "khizer47",
    "blackturtle",
    "ba1219c9231f1b4b03e84b4",
    "and 12 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 4.8,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "none",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 383,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.zomato.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
