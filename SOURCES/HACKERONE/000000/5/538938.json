{
  "id": 538938,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81Mzg5Mzg=",
  "url": "https://hackerone.com/reports/538938",
  "title": "[domokeeper] Unintended Require",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-04-16T01:03:04.098Z",
  "submitted_at": "2019-04-16T01:03:04.098Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ermilov",
    "url": "/ermilov",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/066/860/675cf13b580684485fa62b5e472d044d85cbccca_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-07-04T09:37:27.121Z",
  "bug_reporter_agreed_on_going_public_at": "2019-07-04T09:37:26.993Z",
  "team_member_agreed_on_going_public_at": "2019-07-04T09:25:59.751Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report Unintended Require vulnerability in `domokeeper`\nIt allows reading arbitary json files and load non-production code.\n\n# Module\n\n**module name:** domokeeper\n**version:** 0.2.0\n**npm page:** `https://www.npmjs.com/package/domokeeper`\n\n## Module Description\n\ndomokeeper server: a pluggable domotic control server for Raspberry Pi 2/3\n\n## Module Stats\n\n[24] downloads in the last day\n[45] downloads in the last week\n[72] downloads in the last month\n\n# Vulnerability\n\n## Vulnerability Description\n\n`domokeeper` is an express server which dynamically loads (with help of `require()`) some parts of the code. As long as the path to required module is passed in a HTTP request without any sanitization, anybody can cause code to load that was not intended to run on the server.\n\nsource code example:\n\nindex.js\nline 83\n```\napp.get('/plugins/:id', function (req, res) {\n  var plugin = require(req.params.id);\n  res.json(plugin);\n})\n```\n\nIn addition, the fact that output of the module is passed to server response directly (in the example above) leads to an information leakage. For example it is possible to read `package.json` file or any other json file.\n\nDetailed description of this bug can be found here: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html\n\n## Steps To Reproduce:\n\n* install `domokeeper`\n\n```\nnpm i domokeeper\n```\n\n* run it\n\n```\nnode node_modules/domokeeper/bin.js\n```\n\n* by default it starts at `localhost:43569`, so by navigating to `http://localhost:43569/plugins/.%2Fpackage.json` in the browser you are able to read the output of `package.json` file\n\n## Patch\n\n## Supporting Material/References:\n\n> State all technical information about the stack where the vulnerability was found\n\n- OS: Linux Mint current\n- Node.js: 8.15.0\n- NPM:6.4.0\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nAn attacker is able to control the x in require(x) and cause code to load that was not intended to run on the server or read json files.",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-08-03T09:25:59.900Z",
  "allow_singular_disclosure_after": -143006127.07480383,
  "singular_disclosure_allowed": true,
  "vote_count": 6,
  "voters": [
    "ermilov",
    "bl4de",
    "ali",
    "nervx",
    "armansameer",
    "blackageek"
  ],
  "severity": {
    "rating": "medium",
    "score": 5.9,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
