{
  "id": 232432,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMzI0MzI=",
  "url": "https://hackerone.com/reports/232432",
  "title": "Universal Cross-Site Scripting in Keybase Chrome extension",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2017-05-27T12:50:11.868Z",
  "submitted_at": "2017-05-27T12:50:11.868Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jupenur",
    "url": "/jupenur",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 2809,
    "url": "https://hackerone.com/keybase",
    "handle": "keybase",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Keybase",
      "twitter_handle": "keybaseio",
      "website": "https://keybase.io",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-07-26T15:46:45.361Z",
  "bug_reporter_agreed_on_going_public_at": "2017-06-26T15:46:44.312Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Description\n\nThe Keybase Chrome extension makes heavy use of the insecure `innerHTML` DOM API, resulting in Universal Cross-Site Scripting on all Keybase-supported social networking websites.\n\n## Steps to reproduce the issue\n\n1. Install the [Keybase Chrome extension](https://chrome.google.com/webstore/detail/keybase/ognfafcpbkogffpmmdglhbjboeojlefj)\n2. Navigate to the following URL address: `https://news.ycombinator.com/user?id=jupenur&id=%22%3E%3Ciframe%20src%3D%22javascript:alert(document.domain)%22`\n3. Click on the **Keybase Chat** button\n4. You should see a JavaScript `alert` dialog with the domain name of the affected social networking site (`news.ycombinator.com`) in it\n\nThis example targets an HN profile page, but it should be equally possible to trigger the same vulnerability on any other supported website. The websites potentially affected are\n\n* reddit.com\n* twitter.com\n* facebook.com\n* github.com\n* news.ycombinator.com\n* keybase.io\n* keybase.pub\n\nIt may also be possible to exploit the vulnerability without requiring the user to click a button.\n\n## Suggested fix\n\nThe vulnerable code exploited in the example above is in the file `content.js`\n\n```JavaScript\n// Render the Keybase chat reply widget\nfunction renderChat(parent, user, nudgeSupported, closeCallback) {\n  const oobNudgeHTML = `\n      <p>\n        You will need to let <a target=\"_blank\" href=\"${user.href()}\" class=\"external-user\">${user.display()}</a> know that they have a Keybase message waiting for them.\n      </p>\n      <p>\n        Share this handy link: <span class=\"keybase-copy\">https://keybase.io/docs/extension</span>\n      </p>\n  `;\n```\n\nThe functions `user.href()` and `user.display()` return strings parsed from the URL. These values are used directly in HTML markup (via `innerHTML`) at multiple points in the code.\n\n**It is recommended to avoid the use of `innerHTML` entirely.** Standard DOM methods like `createElement` should be used instead. The code also contains a function, `safeHTML`, which could be used to escape all untrusted input, but this is much more error prone.\n",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "weakness": {
    "id": 63,
    "name": "Cross-site Scripting (XSS) - DOM"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-07-26T15:46:44.380Z",
  "allow_singular_disclosure_after": -206744190.05977228,
  "singular_disclosure_allowed": true,
  "vote_count": 23,
  "voters": [
    "inhibitor181",
    "tk0",
    "ras-it",
    "bl4de",
    "danila",
    "spam404",
    "apapedulimu",
    "gamliel",
    "xyodh",
    "r3y",
    "and 13 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.1,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
