{
  "id": 240886,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNDA4ODY=",
  "url": "https://hackerone.com/reports/240886",
  "title": "Multiple File Manipulation bugs in WP Super Cache ",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2017-06-17T01:02:06.362Z",
  "submitted_at": "2017-06-17T01:02:06.362Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "paulos__",
    "url": "/paulos__",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/008/601/abf2077609ef0546be8676abd1bec49aaefc9ff2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 111,
    "url": "https://hackerone.com/automattic",
    "handle": "automattic",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Automattic",
      "twitter_handle": "",
      "website": "https://automattic.com",
      "about": "WordPress.com, Jetpack, Texts, Akismet, Gravatar, WooCommerce, Crowdsignal, Tumblr and more!"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2018-10-29T12:20:46.370Z",
  "bug_reporter_agreed_on_going_public_at": "2018-09-29T12:20:01.579Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "### Summary\n\nI got redirected to report the vulnerabilities here by Brandon Kraft (one of your developers), so I am reporting them here.\n\nBasically, the issue is caused because of insufficient filtering (there is one but it can be bypassed)\n\nFor instance, in /wp-cache.php, you used:\n\n`1575: $page = str_replace('..', '', preg_replace('/[ <>\\'\\\"\\r\\n\\t\\(\\)]/', '', $_POST['deletepage'])) . '/';`\n\nto fight File inclusion attacks by filtering out .. so ../../../other/directories attacks won't happen. however there is a bypass for this, while pocking around, I noticed .%00.../.%00.../path works the same as ../../path because of the nullbyte in the middle. to test if your patch can stop this, lets try:\n```php\n$page = str_replace('..', '', preg_replace('/[ <>\\'\\\"\\r\\n\\t\\(\\)]/', '', $_GET['deletepage'])) . '/';\nunlink($page);\n```\n\nBy sending .%00.../.%00.../path.file -- an attacker can delete file in my example.\n\nNow this vulnerability is all over the code and by looks of it, affects all kinds of versions including the latest one.\n\nIn `/wp-cache.php`:\n```php\n1575: $page = str_replace('..', '', preg_replace('/[ <>\\'\\\"\\r\\n\\t\\(\\)]/', '', $_POST['deletepage'])) . '/'; \n1576: $pagefile = realpath(ABSPATH . $page . 'index.html'); \n1584: unlink unlink($pagefile); \n```\n\nor \n```php\n1576: $pagefile = realpath(ABSPATH . $page . 'index.html'); \n1575: $page = str_replace('..', '', preg_replace('/[ <>\\'\\\"\\r\\n\\t\\(\\)]/', '', $_POST['deletepage'])) . '/';\n1585: unlink unlink($pagefile . '.gz'); \n```\n\nor in `/wp-cache-phase1.php`:\n\nwhere `$requset_uri` is defined as:\n```php\n15: $request_uri = str_replace('..', '', preg_replace('/[ <>\\'\\\"\\r\\n\\t\\(\\)]/', '', $_SERVER['REQUEST_URI'])); \n```\n\nand used multiple times all over the code. \n\nAnd in /advanced-cache.php to unlink file, to delete, read, rename, opendir and in multiple places all over the code base.\n\nI believe instead of reporting each, reporting why the mitigation is bypassable is so much more easier.\n\n### Recommended Fix:\n\nTo include nullbytes in the str_replace check.\n\n\nThanks,\nPaulos",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-10-29T12:20:01.633Z",
  "allow_singular_disclosure_after": -167012647.1936555,
  "singular_disclosure_allowed": true,
  "vote_count": 15,
  "voters": [
    "jensec",
    "ali",
    "savitar0x01",
    "eveeez",
    "khizer47",
    "paulos__",
    "cryptographer",
    "b4155f7c29acd42c27d007a",
    "qwerty002",
    "reppie",
    "and 5 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
