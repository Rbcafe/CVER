{
  "id": 292797,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTI3OTc=",
  "url": "https://hackerone.com/reports/292797",
  "title": "ActionController::Parameters .each returns an unsafe hash",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2017-11-24T15:05:52.002Z",
  "submitted_at": "2017-11-24T15:05:52.002Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "abuisman",
    "url": "/abuisman",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8164"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-05-18T20:15:57.565Z",
  "bug_reporter_agreed_on_going_public_at": "2020-05-18T20:15:57.431Z",
  "team_member_agreed_on_going_public_at": "2020-05-18T19:44:52.963Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Rails 5.1.4\n\nThe goal of `ActionController::Parameters`'s `permit` method (strong parameters) is to prevent accidental trust in the parameters sent by the client. We can therefore not simply create a hash of all the parameters in the params without permitting them first. When we really want to do this there is the method `to_unsafe_h`, indicating the importance of controlling when an unsafe hash is returned. However, when we use `.each` on our parameters object, an unsafe hash is returned that includes all the keys and their values in a new hash:\n\n```ruby\nparams = ActionController::Parameters.new(city: 'Nijmegen', country: 'Netherlands', language: 'Dutch')\n\nparams.to_h\n\n# ActionController::UnfilteredParameters: unable to convert unpermitted parameters to hash\n# from ...lib/ruby/gems/2.4.0/gems/actionpack-5.1.4/lib/action_controller/metal/strong_parameters.rb:265:in `to_h'\n\nparams.permit(:city)\n=> <ActionController::Parameters {\"city\"=>\"Nijmegen\"} permitted: true>\n\nparams.permit(:city).to_h\n=> {\"city\"=>\"Nijmegen\"}\n\nparams.to_unsafe_h\n=> {\"city\"=>\"Nijmegen\", \"country\"=>\"Netherlands\", \"language\"=>\"Dutch\"}\n\nparams.each {}\n=> {\"city\"=>\"Nijmegen\", \"country\"=>\"Netherlands\", \"language\"=>\"Dutch\"}\n```\n\nThis behaviour is extra strange when contraste with how `select` works:\n\n```ruby\nparams.select { true }\n=> <ActionController::Parameters {\"city\"=>\"Nijmegen\", \"country\"=>\"Netherlands\", \"language\"=>\"Dutch\"} permitted: false>\n```\n\nHere you can see that select returns an instance of `ActionController::Parameters` that has `permitted: false`\n\n## Impact\n\nAn attacker could find out about the accidental use of each in working with parameters in a controller and use this knowledge to send additional (more than provided in a form) parameters along and in this way circumvent authorisation checks.\n\n```ruby\n# controller:\n\ndef update\n  # Attacker has included the parameter: `{ is_admin: true }`\n  User.update(clean_up_params)\nend\n\ndef clean_up_params\n  \n   params.each { |k, v|  SomeModel.check(v) if k == :name }\nend\n```\n\nThe example (admittedly simplified) above shows a possible scenario where a developer builds a method to do something with each param in a seperate method after which he might expect his parameters to adhere to normal working `permitted: true/false`. Slightly unexpected behaviour that could cause security issues.\n\nBiggest threat would seem to be to opensource projects where attackers can survey the project's code.",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-06-17T19:44:53.080Z",
  "allow_singular_disclosure_after": -115405805.86457174,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "foobar7",
    "mainteemoforfun",
    "microhacker",
    "jabawack81"
  ],
  "severity": {
    "rating": "medium",
    "score": 6.5,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
