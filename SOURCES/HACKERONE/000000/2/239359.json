{
  "id": 239359,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMzkzNTk=",
  "url": "https://hackerone.com/reports/239359",
  "title": "Timing attack woocommerce, simplify commerce gateway",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2017-06-12T22:09:27.026Z",
  "submitted_at": "2017-06-12T22:09:27.026Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": true,
    "username": "b258ea62bf297b02afa9854",
    "url": "/b258ea62bf297b02afa9854",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 111,
    "url": "https://hackerone.com/automattic",
    "handle": "automattic",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Automattic",
      "twitter_handle": "",
      "website": "https://automattic.com",
      "about": "WordPress.com, Jetpack, Texts, Akismet, Gravatar, WooCommerce, Crowdsignal, Tumblr and more!"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-09-11T13:48:38.534Z",
  "bug_reporter_agreed_on_going_public_at": "2017-08-16T12:52:38.313Z",
  "team_member_agreed_on_going_public_at": "2017-09-11T13:48:38.502Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "file `class-wc-gateway-simplify-commerce.php` method `return_handler` e.g. where woocommerce marks the order regarding its payment / transaction.\n\n```\npublic function return_handler() {\n\t\t@ob_clean();\n\t\theader( 'HTTP/1.1 200 OK' );\n\n\t\tif ( isset( $_REQUEST['reference'] ) && isset( $_REQUEST['paymentId'] ) && isset( $_REQUEST['signature'] ) ) {\n\t\t\t$signature = strtoupper( md5( $_REQUEST['amount'] . $_REQUEST['reference'] . $_REQUEST['paymentId'] . $_REQUEST['paymentDate'] . $_REQUEST['paymentStatus'] . $this->private_key ) );\n\t\t\t$order_id  = absint( $_REQUEST['reference'] );\n\t\t\t$order     = wc_get_order( $order_id );\n\n\t\t\tif ( $signature === $_REQUEST['signature'] ) {\n\t\t\t\t$order_complete = $this->process_order_status( $order, $_REQUEST['paymentId'], $_REQUEST['paymentStatus'], $_REQUEST['paymentDate'] );\n\n\t\t\t\tif ( ! $order_complete ) {\n\t\t\t\t\t$order->update_status( 'failed', __( 'Payment was declined by Simplify Commerce.', 'woocommerce' ) );\n\t\t\t\t}\n\n\t\t\t\twp_redirect( $this->get_return_url( $order ) );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\twp_redirect( wc_get_page_permalink( 'cart' ) );\n\t\texit();\n\t}\n```\nHere is used md5 for signature generation, but string comparison isn't safe towards timing attack. Having in mind the length of the md5 hash string 32 and minimal character set used for it `a-z` and `0-9`, then discovering the right signature will require 32 rounds * X requests per character => no need even for distributed attack regarding successful guessing the generated signature.\n\nIn order to protect the customers and merchants I would like to point the usage of [hash_equals](http://php.net/manual/en/function.hash-equals.php) with its [wordpress alternative](https://developer.wordpress.org/reference/functions/hash_equals/) e.g.\n\n`... if (hash_equals($signature, $_REQUEST['signature'])) ...`\n",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-09-15T12:52:38.369Z",
  "allow_singular_disclosure_after": -202348279.18531066,
  "singular_disclosure_allowed": true,
  "vote_count": 9,
  "voters": [
    "marcs0h",
    "cuso4",
    "apapedulimu",
    "edoverflow",
    "eveeez",
    "kuyschi",
    "mr_r3boot",
    "japz",
    "vindi_cator"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
