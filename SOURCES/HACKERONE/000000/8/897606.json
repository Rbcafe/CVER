{
  "id": 897606,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84OTc2MDY=",
  "url": "https://hackerone.com/reports/897606",
  "title": "[3DS][SSL][SDK] Unchecked number of audio channels in Mobiclip SDK leads to RCE in eShop movie player",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "none",
  "readable_substate": "Resolved",
  "created_at": "2020-06-13T16:19:42.423Z",
  "submitted_at": "2020-06-13T16:19:42.423Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "mrnbayoh",
    "url": "/mrnbayoh",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/189/059/1c4c4bf47adafcca63b8256be5721d27653948a2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16634,
    "url": "https://hackerone.com/nintendo",
    "handle": "nintendo",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/634/999cefca933756faeeb2ea39c07557943437c94f_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/634/999cefca933756faeeb2ea39c07557943437c94f_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Nintendo",
      "twitter_handle": "",
      "website": "http://www.nintendo.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-12-18T12:12:31.117Z",
  "bug_reporter_agreed_on_going_public_at": "2020-12-18T09:53:47.409Z",
  "team_member_agreed_on_going_public_at": "2020-12-18T12:12:31.039Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "weakness": {
    "id": 5,
    "name": "Heap Overflow"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 43,
  "voters": [
    "hackerandya",
    "krypt1c",
    "dee-see",
    "rook1337",
    "bibekshah",
    "ali",
    "mrnbayoh",
    "rahulkadavil_",
    "akashhamal0x01",
    "f_m",
    "and 33 more..."
  ],
  "severity": {
    "rating": "none",
    "score": 0.0,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 373948,
    "asset_type": "HARDWARE",
    "asset_identifier": "Nintendo 3DS System",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 25907,
      "category": "team",
      "content": "-",
      "user": {
        "id": 60412,
        "username": "tattsun",
        "name": "Ramen Chevalier",
        "bio": null,
        "cleared": false,
        "verified": false,
        "website": null,
        "location": null,
        "created_at": "2016-03-11T10:24:56.230Z",
        "url": "https://hackerone.com/tattsun",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "id": 25891,
      "category": "researcher",
      "content": "#Affected Systems\n- Platform: (New) Nintendo 3DS\n- Region: ALL\n- System version: 11.13 (latest at the time of writing)\n\n#Description\nThe Mobiclip SDK used for parsing moflex videos does not check the number of audio channels in an audio stream. This leads to a miscalculation of free space remaining in a heap buffer, and then a buffer overflow.\n\n#Vulnerability\nThe `mw::mo::helper::PcmAudioPresentation::GetNextAudioDataPtr` function is used to calculate the address where the incoming audio data should be copied before getting processed:\n```\nvoid* GetNextAudioDataPtr(audio_presentation* ap, uint32_t data_size) {\n    int64_t offset = ap->bufferOffset;\n    int64_t already_played = GetTotalSamplePlayed(ap->soundId); //this is calculated like this: (previous_data_length / (nb_channels*2))\n    int64_t already_played_bytes = already_played << ap->audioStreamInfo->nbChannels;\n\n    uint32_t free_space = ap->bufferSize - (uint32_t)(offset - already_played_bytes);\n    uint32_t remaining_space = ap->bufferSize - offset;\n\n    if(remaining_space < data_size) {\n        offset = 0;\n        free_space -= remaining_space; \n    }\n    if(free_space < data_size)\n        return NULL; \n    return ap->buffer + offset;\n}\n```\n\nWe can see that to get the number of already used bytes in the audio buffer it first gets the number of \"audio units\" already used (number of shorts in PCM16 format). This is done by calling the `GetTotalSamplePlayed` function, which relies on the `GetSampleLength` function. Thus, the `already_played` value is calculated like this for PCM16 data: `previous_data_length / (nb_channels*2)`. This is the number of PCM16 data units that have already been processed.\nThen to get the number of bytes already processed, `already_played_bytes` is calculated based on `already_played` like this: `already_played_bytes = already_played << nb_channels`, which is equivalent to `already_played_bytes = already_played * pow(2, nb_channels)`. When the number of channels is 1 or 2, this is correct because `2 * nb_channels = pow(2, nb_channels)`. However the number of channels is provided by video files and is not checked, thus it is possible to set a number of channels greater than 2 (up to 256).\nWhen the number of channels is greater than 2, ` pow(2, nb_channels) > 2 * nb_channels`, thus the calculation of `free_space` becomes incorrect and can be far greater than the real free space remaining. One can for example set the number of already processed data and the number of channels such that `already_played_bytes = 0x8XXXXXXX` which is enough to totally bypass the size check.\n\n## Impact\n\nBecause of [#894922](https://hackerone.com/reports/894922), anyone can exploit this vulnerability and get remote code execution in usermode under the eShop application.\nMoreover, this could potentially(?) be exploited without any SSL flaw by someone able to submit games to the eShop catalog, however since I don't know the validation process and checks performed, I cannot ensure this is possible.\nNote that one can exploit this vulnerability without any noticeable change to the eShop application behavior. This means the user has no way to know something bad is happening before launching the video playback.\n",
      "user": {
        "id": 189059,
        "username": "mrnbayoh",
        "name": "nba::yoh",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2017-08-03T22:13:34.989Z",
        "url": "https://hackerone.com/mrnbayoh",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/189/059/1c4c4bf47adafcca63b8256be5721d27653948a2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/189/059/1c4c4bf47adafcca63b8256be5721d27653948a2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/189/059/1c4c4bf47adafcca63b8256be5721d27653948a2_original.png/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
