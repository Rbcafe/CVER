{
  "id": 895727,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84OTU3Mjc=",
  "url": "https://hackerone.com/reports/895727",
  "title": "Rack parses encoded cookie names allowing an attacker to send malicious `__Host-` and `__Secure-` prefixed cookies",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2020-06-10T23:58:33.703Z",
  "submitted_at": "2020-06-10T23:58:33.703Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "fletchto99",
    "url": "/fletchto99",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/egeK1BGNaCNZkCgKcCQFvWHY/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8184"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-06-16T13:27:52.001Z",
  "bug_reporter_agreed_on_going_public_at": "2020-06-16T01:20:37.715Z",
  "team_member_agreed_on_going_public_at": "2020-06-16T13:27:51.894Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The [rack cookie parser](https://github.com/rack/rack/blob/c9ff9709afa70ca0e427aa06643c851f498359dc/lib/rack/utils.rb#L215) parses the cookie string using [`unescape`](https://github.com/rack/rack/blob/c9ff9709afa70ca0e427aa06643c851f498359dc/lib/rack/utils.rb#L215). This allows a malicious attacker to set a second cookie with the name being percent encoded. Typically it would be expected that we cannot trust cookies and in _most_ cases that's true. However in a couple of cases certain expectations are set. Cookies allow for [cookie prefixes](https://textslashplain.com/2015/10/09/duct-tape-and-baling-wirecookie-prefixes/) on the cookie name to indicate to the browser certain attributes. In this case there are 2 special attributes we care about: `__Secure-` and `__Host-`. When the browser sends these cookies to the server certain [assumptions](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#Attributes) are be made around these cookies:\n\n1. `__Secure-` prefix: Cookies names starting with `__Secure-` (dash is part of the prefix) must be set with the secure flag from a secure page (HTTPS).\n2. `__Host-` prefix: Cookies with names starting with `__Host-` must be set with the secure flag, must be from a secure page (HTTPS), must not have a domain specified (and therefore aren't sent to subdomains) and the path must be `/`\n\nThe flaw in Rack allows for a `__%48ost-` or `__%53ecure-` cookie to be set **without** the required attributes (I.e. set without HTTPS, from root domain, or from a secure page). This means a malicious cookie set by an attacker could set a `__%48ost-` cookie from a subdomain knowing that Rack would parse it as `__Host-`. Furthermore, since the browser won't enforce the `HostOnly` attribute to `__%48ost-` cookies an attacker could control the `__Host-` prefixed cookie from a subdomain by setting a wildcard domain on the `__%48ost-` cookie.\n\nIt should be noted that while the [cookie spec](https://tools.ietf.org/html/rfc6265#section-4.1.1) recommends encoding for the value of a cookie it doesn't make any suggestions around the encoding of the name of a cookie.\n\nHere's a simple PoC test case which fails :\n\n```ruby\n# frozen_string_literal: true\n\nrequire_relative 'helper'\n\ndescribe Rack::Utils, \"malicious cookie\" do\n  # Fails and __Host-evil reads the malicious value and sets it as the cookie\n  # rather than reading the actual __Host cookie\n  #\n  # Furthermore, browsers enforce HostOnly for `__Host-` cookies but they would\n  # not enforce it for \"__%48ost\" cookies so a malicious script could potentially\n  # set this cookie knowing it would be parsed as the `__Host-` cookie\n  #\n  # Lastly, when the cookie is made it could be set with the `.example.com` domain\n  # wildcard, thus a malicious script on a subdomain could set the cookie and it\n  # would be parsed by the root domain\n  #\n  # This is due to the cookie being unescaped, thus:\n  # URI.unescape(\"__%48ost-evil\") => \"__Host-evil\"\n  #\n  # Currently fails, should be passing\n  it \"doesnt parse malicious __Host cookie\" do\n    env = Rack::MockRequest.env_for(\"\", \"HTTP_COOKIE\" => \"__%48ost-evil=evil;__Host-evil=abc\")\n    cookies = Rack::Utils.parse_cookies(env)\n    cookies.must_equal({ \"__%48ost-evil\" => \"evil\", \"__Host-evil\" => \"abc\"  })\n  end\n\n  # Less of a security issue and more of a bug\n  it \"generic foo=bar example\" do\n    env = Rack::MockRequest.env_for(\"\", \"HTTP_COOKIE\" => \"%66oo=baz;foo=bar\")\n    cookies = Rack::Utils.parse_cookies(env)\n    cookies.must_equal({ \"%66oo\" => \"baz\", \"foo\" => \"bar\" })\n  end\nend\n```\n\nAn attacker could potentially set the cookie from a malicious script on a subdomain like so, bypassing any expectations around the attributes of the cookie:\n```\ndocument.cookie = \"__%48ost-evil=evil; domain=.example.com\";\n```\n\nI should note I work for GitHub, I'm not sure if there's any conflict with payouts in this case (and I certainly don't want/need a payout), however should you chose to payout for this I'd like the money to be donated to charity. If possible could it please be donated to [NAACP Legal Defense and Education Fund](https://www.naacpldf.org/support/fiscal-responsibility/) their donaiton page can be found [here](https://org2.salsalabs.com/o/6857/p/salsa/donation/common/public/?donate_page_KEY=15780&_ga=2.63873391.1784282200.1591830687-771342060.1591210817).\n\n## Impact\n\nAn attacker can control cookies by encoding creating a second cookie with the name url encoded. This means that the `__Host-` and `__Secure-` prefixed cookies can be controlled. Furthermore, a malicious attacker could set this cookie from a subdomain and have it apply to the root domain, in which case the Rack would parse the attackers cookie.",
  "weakness": {
    "id": 97,
    "name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-07-16T01:20:37.826Z",
  "allow_singular_disclosure_after": -112969596.61580208,
  "singular_disclosure_allowed": true,
  "vote_count": 46,
  "voters": [
    "jatindhankhar",
    "ali",
    "brahim_boufakri01",
    "amad3u6",
    "0xwise",
    "prinzhorn",
    "d4rkm4tter",
    "0619",
    "sudoshekhar",
    "safisecu",
    "and 36 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
