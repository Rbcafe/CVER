{
  "id": 881891,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84ODE4OTE=",
  "url": "https://hackerone.com/reports/881891",
  "title": "File System Monitoring Queue Overflow",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "low",
  "readable_substate": "Informative",
  "created_at": "2020-05-24T18:37:13.000Z",
  "submitted_at": "2020-05-24T18:37:13.000Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ihsinme",
    "url": "/ihsinme",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/EfzvpGEZUFwUq5x6HAHsiUtY/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 3059,
    "url": "https://hackerone.com/owncloud",
    "handle": "owncloud",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/003/059/d31dc64427bbbf2e428a0b0b97bce59b98d2ba0d_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/003/059/d31dc64427bbbf2e428a0b0b97bce59b98d2ba0d_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "ownCloud",
      "twitter_handle": "ownCloud",
      "website": "https://www.owncloud.com",
      "about": "ownCloud GmbH is the company behind the ownCloud Project - the most downloaded open source project for data and file sync, share and view."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-12-03T14:01:05.136Z",
  "bug_reporter_agreed_on_going_public_at": "2021-12-03T13:55:22.801Z",
  "team_member_agreed_on_going_public_at": "2021-12-03T14:01:05.000Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "in the source code \"owncloud/client\" in the file \"src/gui/folderwatcher_linux.cpp\" in the function \"void FolderWatcherPrivate :: inotifyRegisterPath (const QString & path)\" by calling \"inotify_add_watch\" the file paths are set for monitoring\n\n```cpp\n int wd = inotify_add_watch(_fd, path.toUtf8().constData(),\n        IN_CLOSE_WRITE | IN_ATTRIB | IN_MOVE | IN_CREATE | IN_DELETE | IN_DELETE_SELF | IN_MOVE_SELF | IN_UNMOUNT | IN_ONLYDIR);\n```\nBut in the specified call, the flag \"IN_Q_OVERFLOW\" is omitted, which allows an attacker to influence the operation of the software.\nThe essence of the impact is to form a large number of events overflowing the monitoring queue.\nIn my opinion, the most effective and not noticeable will be creating a hidden file, writing data to it, closing and deleting.\n\nIt is worth noting that the function code \"void FolderWatcherPrivate :: slotReceivedNotification (int fd)\"\n\n```cpp\n  do {\n        len = read(fd, buffer.data(), buffer.size());\n        error = errno;\n        /**\n          * From inotify documentation:\n          *\n          * The behavior when the buffer given to read(2) is too\n          * small to return information about the next event\n          * depends on the kernel version: in kernels  before 2.6.21,\n          * read(2) returns 0; since kernel 2.6.21, read(2) fails with\n          * the error EINVAL.\n          */\n        if (len < 0 && error == EINVAL) {\n            // double the buffer size\n            buffer.resize(buffer.size() * 2);\n            /* and try again ... */\n            continue;\n        }\n    } while (false);\n``` \n\nAs my tests showed, it does not provide an increase in the buffer, which could offset the impact.\nThe function reads part of the data from the queue, since the minimum buffer necessary for reading is much less than 2048.\n\n```\nSpecifying a buffer of size\nsizeof(struct inotify_event) + NAME_MAX + 1\nwill be sufficient to read at least one event.\n```\n\n## Impact\n\nThus, the essence of the impact will consist in overflowing the monitoring queue.\nWhat will force the system to discard incoming events and the program will skip them.\nSkipping program monitoring events will lead to incorrect display of files and directories in the program, and will also affect the synchronization with the server.",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 0,
  "voters": [],
  "severity": {
    "rating": "low",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 471,
    "asset_type": "DOWNLOADABLE_EXECUTABLES",
    "asset_identifier": "Desktop Client",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
