{
  "id": 876719,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NzY3MTk=",
  "url": "https://hackerone.com/reports/876719",
  "title": "Signedness issue in ClassInfo message handler leads to RCE on CS:GO client",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-05-17T20:31:35.960Z",
  "submitted_at": "2020-05-17T20:31:35.960Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "teapotd",
    "url": "/teapotd",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/608/299/04ce35091b45f8cbc3318bf18cd4d31762db3481_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23363,
    "url": "https://hackerone.com/valve",
    "handle": "valve",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Valve",
      "twitter_handle": "",
      "website": "https://www.valvesoftware.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-05-27T16:53:16.538Z",
  "bug_reporter_agreed_on_going_public_at": "2021-05-04T05:06:42.581Z",
  "team_member_agreed_on_going_public_at": "2021-05-27T16:53:16.377Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "7500.0",
  "formatted_bounty": "$7,500",
  "weakness": {
    "id": 12,
    "name": "Array Index Underflow"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 34,
  "voters": [
    "njbooher",
    "arm4nd0",
    "fqdn",
    "gamer7112",
    "mvc",
    "ali",
    "xsky",
    "romesful",
    "yusuf_furkan",
    "ahmedrazaidrisi",
    "and 24 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.6,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 1286,
    "asset_type": "DOWNLOADABLE_EXECUTABLES",
    "asset_identifier": "csgo.exe",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 56474,
      "category": "team",
      "content": "Title:         Signedness issue in ClassInfo message handler leads to RCE on CS:GO client\nScope:         csgo.exe\nWeakness:      Array Index Underflow\nSeverity:      Critical (9.6)\nLink:          https://hackerone.com/reports/876719\nDate:          2020-05-17 20:31:35 +0000\nBy:            @chaynik\n\nDetails:\nVulnerability\n-------------\n\n`CSVCMsg_ClassInfo` message is used by Source Engine to pass information about entity classes. It is described by the following Protobuf:\n\n```\nmessage CSVCMsg_ClassInfo {\n    message class_t {\n        optional int32 class_id = 1;\n        optional string data_table_name = 2;\n        optional string class_name = 3;\n    }\n\n    optional bool create_on_client = 1;\n    repeated .CSVCMsg_ClassInfo.class_t classes = 2;\n}\n```\n\nThe bug is present in `CSVCMsg_ClassInfo` message handler on client. The pseudocode of function that handles this message:\n\n```cpp\nbool ProcessClassInfo(CSVCMsg_ClassInfo *msg) {\n    ...\n    int nClasses = msg->classes_size;\n    ClassInfo *pClasses = new ClassInfo[nClasses];\n    ...\n    for (int i = 0; i < nClasses; i++) {\n        class_t *src = msg->classes[i];\n        if (src->class_id >= nClasses) { // class_id can be negative!\n            ...\n            return false;\n        }\n        ClassInfo *dst = &pClasses[src->class_id];\n        ...\n    }\n    ...\n}\n```\n\nAn array of appropriate size is allocated to hold the received information. The array is indexed by `class_id`, which is improperly sanitized: it can be an arbitrary negative integer. This allows an out of bounds write, which can be exploited to perform remote code execution.\n\nAny Source Engine (and Source 2) game that uses Protobuf network messages should be affected by this vulnerability, including CS:GO and Dota 2. Only CS:GO has been tested.\n\nExploit details\n---------------\n\nThe Proof-of-Concept exploit consists of two main phases:\n\n1. ASLR bypass - the bug is used to get base address of `client_panorama.dll`\n2. Remote code execution - the bug is used to divert control flow to ROP chain\n\nIn order to craft a [ROP](https://en.wikipedia.org/wiki/Return-oriented_programming) chain, attacker needs to know the absolute address of some application module. The [ASLR](https://en.wikipedia.org/wiki/Address_space_layout_randomization) attempts to prevent it by randomizing memory layout.\n\n### Bypassing the ASLR\n\nSource Engine has mechanism that allows server to set and query \"cvars\" - variables that control various game-related settings. The exploit leverages cvars to steal a pointer to predictable memory location in game process:\n\n1. Spray the heap with entities\n    - we want to make heap allocations more predictable\n    - if we allocate 500+ entities there is high chance that last of them are side-by-side\n2. Delete last 20 entities\n    - deallocated data, including pointers to vtables, remains on heap\n3. Set some cvar to a string of appropriate length\n    - we want it to be allocated in place of old entities\n    - we want the vtable pointer of some old entity to be right after the end of the string\n4. Use the vulnerability to overwrite null terminator of cvar string\n    - we want the class-infos to get allocated next to cvar\n    - if we succeed, the cvar string will be extended to contain the vtable pointer\n5. Query the cvar string\n    - the leaked vtable pointer allows us to calculate `client_panorama.dll` base address\n\nThere is one issue with this idea: the client breaks connection after the vulnerability is used, due to some late sanity check. There's an easy way around it though. Server can queue a `retry` command to be executed on client, so the client automatically reconnects.\n\n### Executing code\n\nAfter succesful pointer leakage, a ROP chain that runs `calc.exe` is crafted using gadgets from `client_panorama.dll`. The RCE is performed as follows:\n\n1. Deliver the ROP chain in `CCSUsrMsg_ShowMenu` user message\n    - client stores it in global buffer in `client_panorama.dll`\n    - we can easily calculate address to it\n2. Spray the heap with entities\n    - we want to make heap allocations more predictable\n3. Use the vulnerability to overwrite vtable pointer of some entity\n    - we want the class-infos to get allocated after last entity\n4. The client breaks connection and deallocates entities\n    - the fake vtable will divert control flow to our ROP chain\n    - the ROP chain will launch Calculator app\n\nReproduction\n------------\n\nThe PoC script simulates a malicious CS:GO server. It demonstrates RCE capability on CS:GO client for Windows (version 13752, 2020-05-14 stable release).\n\n1. Download the attached Python 3 script: F831986\n2. Run the script (possibly on another host)\n3. Start CS:GO client\n4. Connect to the malicious server\n5. Wait for `calc.exe` to pop up\n\nSimilarly as in #470520, Steam browser protocol can be used to launch an attack from web browser:\n\n1. Download the attached Python 3 script: F831986\n2. Run the script (possibly on another host)\n3. Download attached HTML file - F831987\n4. Set address in iframe URL to the malicious server\n5. Open downloaded HTML file and confirm `Open steam`\n6. Wait for `calc.exe` to pop up\n\n## Impact\n\nAn attacker can execute arbitrary code on the computer of anyone who attempts to connect to the server. After successful exploitation an attacker can gain control over victim's computer.\n\nThe connection to the server can be initiated manually by the victim or automatically by visiting malicious web site via Steam browser protocol.\n\nThe likelihood of victim joining the server via in-game server browser can be greatly improved by faking high player count and further social engineering. Many players sort server list by player amount.\n\nIn case of an attack from web browser many users don't need to click `Open steam` and this method requires no further interaction from user - connection will be initiated without confirmation (even game client will be started if it's not running).\n",
      "user": {
        "id": 300268,
        "username": "mcjohn",
        "name": "mcjohn",
        "bio": null,
        "cleared": false,
        "verified": false,
        "website": null,
        "location": null,
        "created_at": "2018-06-30T00:26:54.841Z",
        "url": "https://hackerone.com/mcjohn",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
