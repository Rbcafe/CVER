{
  "id": 885539,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84ODU1Mzk=",
  "url": "https://hackerone.com/reports/885539",
  "title": "Private list members disclosure via GraphQL",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2020-05-29T07:23:13.570Z",
  "submitted_at": "2020-05-29T07:23:13.570Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ryotak",
    "url": "/ryotak",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/Nb79aqy3v6SyMh8rwZZh43cu/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 61,
    "url": "https://hackerone.com/x",
    "handle": "x",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "X (Formerly Twitter)",
      "twitter_handle": "XSecurity",
      "website": "https://x.com",
      "about": "X helps you create and share ideas and information instantly, without barriers."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-08-04T01:25:19.220Z",
  "bug_reporter_agreed_on_going_public_at": "2020-08-04T01:25:19.153Z",
  "team_member_agreed_on_going_public_at": "2020-08-03T18:54:48.732Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nDue to improper queries of GraphQL, the attacker can steal members of the private list.\n\n**Description:**\nTwitter implements a unique GraphQL endpoint, which can use only the queries that Twitter specified. However, there is a flaw in the backend (https://api.████████.com/graphql/iUmNRKLdkKVH4WyBNw9x2A/ListMembers).\nThis vulnerability requires snowflake brute-force, but it's not impossible. Snowflake is built from the timestamp, sequence id, and worker id. Sequence id is basically 0 because it'll reset automatically at the start of every millisecond. Worker id can have 2 ^ 10 = 1024 different values in principle.\nSo you need to send 1024 * 1000 = 1024000 requests to perform brute-force snowflake which created in a sec.\n1024000 * 60 = 61440000 requests will be enough to brute-force a list created in a minute.\nIt takes a few hours to perform, but it's not impossible.\n\n## Steps To Reproduce:\n\nTo reproduce this:\n1. Create a private list in account A and add some people.\n1. Login to account B, and trigger `ListMembers` request.\n1. Intercept the request and replace ID to the list's one which you created in step 1.\n1. Now, you know the members of account A's private list from account B.\n\nIn real attack: \n  1. Send requests to `https://api.█████████.com/graphql/iUmNRKLdkKVH4WyBNw9x2A/ListMembers?variables=%7B%22listId%22%3A%22[Valid Snowflake Here]%22%2C%22count%22%3A20%2C%22includePromotedContent%22%3Atrue%2C%22withHighlightedLabel%22%3Atrue%2C%22withTweetQuoteCount%22%3Atrue%2C%22withTweetResult%22%3Atrue%7D` until you got valid response.\n  1. If you found a valid snowflake, open `https://████████.com/i/lists/[ID Here]`.\n  1. If the list is private, you know members of the list now.\n\n## Supporting Material/References:\n\n██████\n\n## Impact\n\nLeakage of private list members.",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-09-02T18:54:48.823Z",
  "allow_singular_disclosure_after": -108759046.11864632,
  "singular_disclosure_allowed": true,
  "vote_count": 326,
  "voters": [
    "hltakydn",
    "tedminfosec",
    "acut3",
    "martinvw",
    "ashbi",
    "th3hidd3nmist",
    "joaxcar",
    "mokusou",
    "mizzle",
    "slingx",
    "and 316 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 1062,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.twitter.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 23901,
      "category": "researcher",
      "content": "## Summary\nBy chaining the timing attack and broken rate limit with a vulnerable GraphQL query, it was possible to read members of the private list via GraphQL.\n\n## Description\n\n### Starting\nOn May 28th, I noticed that Twitter has some weird endpoints.\nThat endpoint looked like this: `https://api.twitter.com/graphql/[Random String]/[Endpoint name]`.\nAfter doing a Google search, I found [this page](https://about.sourcegraph.com/graphql/graphql-at-twitter).\nAccording to this page, this is Twitter's GraphQL implementation, called `stored operations` or `persisted queries`.\nI haven't heard about them, so I've searched Google, and there seems to be no example (as far as I've seen) found a vulnerability in this feature.\nSo I decided to dig deeper into this.\n\n### Reconnaissance\nThis endpoint has a Random String part that makes enumeration difficult. As a result, it is difficult to find an endpoint by brute force.\nSo I started reading the JavaScript code for Twitter Web Client.\nAfter a while, I noticed that main.[Hex string].js stores Endpoint name and Random String as a pair.\n{F935327}\nTherefore, I used the Wayback Machine to enumerate the past main.[Hex string].js and took out all the Endpoint name and Random String from it.\nAt this point, a sufficient amount was collected, but from the above article, it seems that GraphQL is used not only in Twitter Web Client but also in Twitter Mobile Client and Tweetdeck, so I decided to extract it from there.\nIn the code of Twitter Android Client, the pair of Endpoint name and Random String was stored in `l63.java`, and in Tweetdeck, it was `bundle.[Hex string].js`.\n{F935329}\n{F935328}\nAs a result, I have gathered a list of over 700 endpoints, so I decided to move to the next stage.\n\n### Testing\nTesting over 700 endpoints can be a daunting task, but existing GraphQL clients don't support this type of endpoint, so I started testing with Firefox and the Burp Suite.\nThe test was run for several hours, so I will only pick and explain what is important.\nFirst, it seems that there is no problem if GraphQL's endpoint is just `/graphql`.\nYou can execute GraphQL by sending a POST request with `queryId` (this is the Random String above) and `variables` in Body to this endpoint. So the Endpoint name was not needed.\n{F935324}\nSecond, some Query IDs will give an error when trying to reference a field that does not exist.\nThis is probably due to an attempt to execute an old query on the current schema.\n{F935325}\nAfter testing for a while, I concluded that it is impossible to execute arbitrary GraphQL queries.\nThat's why I decided to run the queries one by one and drill down into the interesting ones.\nAfter a while, I focused on the `ListMembers` query.\nIt looks like this is a query that returns a list of members for a List. And there was no check that the target List was private or not in that query.\n\n### Reporting\nI found that I could retrieve the members of a private List using the `ListMembers` query (`iUmNRKLdkKVH4WyBNw9x2A`), so I reported this to Twitter.\nA few hours later, there was a reply from the Twitter Security Team, but it seems that the Twitter team thinks the Twitter ID is difficult to brute force.\nI thought that brute force is possible, so I tried creating a script to try brute force. However, due to the existence of rate limits, it was not possible to brute force.\n\n### Bypassing\nDirect brute force cannot be done because the rate limit of GraphQL itself cannot be avoided. However, the List-ID is not unique to GraphQL and is used in various APIs. Therefore, I decided to try using these APIs to see if brute force is possible.\nFortunately, Twitter's API rate limits were mostly broken. Even though Twitter's developer docs said that there was a rate limit, there were many that didn't.\nHowever, it seems that there is no vulnerability in the API of Twitter that leaks information on the private List, and it is not possible to confirm the existence of the private List.\nAt this point, I was considering self-closing the report. But it was not fun to give up here, so I decided to explore more possibilities.\nAfter a few minutes, I noticed the presence of the `x-response-time` header. This seems to be returning the time used for processing on the server-side.\nI immediately confirmed the difference in the `x-response-time` header when specifying the ID of the private List and when specifying the ID that does not exist.\nThere was a slight difference (10-20ms) in processing time between private List ID and non-existent ID. Using this, I can enumerate the IDs on any private List.\n{F935330}\n\n### Exploiting\nAfter creating a PoC that enumerates a List using the above vulnerabilities, I was hungry and decided to eat ramen.\nBefore I went to eat ramen, I deployed PoC to AWS and ran it.\nAfter returning home, I checked my AWS instance and rejoiced.\n`Potential List Detected: [Real List ID] (With 137ms delay)`\nIt looks like I found valid private List ID...\nAnd yes, I've confirmed that I can read members of any private List!\n\n### Conclusion\nI think this report is a good report showing that even a small vulnerability (confirmation of the existence of a private List) that is not normally recognized as a valid report can produce a greater effect by being linked with other vulnerabilities.\nAlso, by using the same technique like this one, you can enumerate all the Moments using the link-only sharing option that exists in Twitter's Moment function, but this does not seem to be a vulnerability (Twitter closed it as Informative.)\n{F935326}\nUnfortunately, when I was looking for a Twitter vulnerability after this report, my account was suspended. (I haven't received a reply from the support team yet...) \n(Edit: My account got unsuspended)\nSo I can't find any more Twitter vulnerabilities. Therefore, I'll share here some of the interesting information I found during my research. (If you find vulnerabilities based on this information, I would be grateful for a word of thanks.)\n\n#### PoC files\n{F935333}: It'll find unlisted moments (Intended behavior)\n{F935334}: It'll find valid List ID\n\n#### Twitter GraphQL Query IDs\n\n{F935320}\n{F935321}\n{F935322}\n{F935323}\n\n#### About protected tweets option\n\nTwitter's protected tweets option only protects Tweets. It won't protect Lists, Followers... etc.\nIf you're using a protected account and sharing some sensitive information in Lists, be careful with it. (Twitter said this is intended behavior.)\n\n#### Broken rate limits\n\nAfter sending this report, I deleted the list of endpoints that have the broken rate limit. And as my account got suspended, I can't test it anymore. So please find it by yourself.\n\nIf you have any questions, ask me on [Twitter](https://twitter.com/ryotkak) ;)",
      "user": {
        "id": 569456,
        "username": "ryotak",
        "name": "RyotaK",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "https://ryotak.net",
        "location": "",
        "created_at": "2019-04-04T07:16:31.098Z",
        "url": "https://hackerone.com/ryotak",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/Nb79aqy3v6SyMh8rwZZh43cu/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/Nb79aqy3v6SyMh8rwZZh43cu/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/Nb79aqy3v6SyMh8rwZZh43cu/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
