{
  "id": 808975,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84MDg5NzU=",
  "url": "https://hackerone.com/reports/808975",
  "title": "Rounding errors on rewarding a bounty leads to bypassing the 20% H1 commission fee",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2020-03-02T22:33:11.767Z",
  "submitted_at": "2020-03-02T22:33:11.767Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "haxta4ok00",
    "url": "/haxta4ok00",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/049/175/8449afdd3403f4de00b34719ee09823bad1c0a06_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-05-15T17:23:12.521Z",
  "bug_reporter_agreed_on_going_public_at": "2020-05-15T17:23:12.473Z",
  "team_member_agreed_on_going_public_at": "2020-05-15T17:01:48.468Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nThe team discovered a rounding error issue when rewarding hackers with a bounty. Through a series of micro-payments, a malicious program manager is able to pay a full amount to the hacker while evading the 20% H1 commission fee. \n\n**Description:**\nH1 has a system for awarding and paying hackers a monetary amount for a report. On each payment, HackerOne charges a 20% commission fee. As an example, if a program awards the hacker with 100$, HackerOne charges 20$. The total amount the program will have to pay is 100$ + 20$ = 120$.\n\nWhile testing, we noticed that we can enter a `float` value when issuing a reward, for example - 0.0004 . This resulted in an error and the request did not go through. Next, we noticed that the `bounty_award` and `bounty_fee` fields have a `float` type as well. During testing, we noticed that it has a limit of two numbers after the dot - `0.00`.\nFinally, we observed that the system has rounding values.\n\nThe `bounty_fee` is calculated as such:\n`bounty_fee` = `bounty_award/100*20`\n\n## Testing done:\n`bounty_award` = 1$ , `bounty_fee` = 0.2$\n`bounty_award` = 0.1$ , `bounty_fee` = 0.02$\n`bounty_award` = 0.01$ , `bounty_fee` = 0.002$ , but `bounty_fee` rounds two only two decimals. After rounding, the system will result in value - `bounty_fee`=`0.00`$\n\n### Optimal values\n`bounty_award` = 0.02$ , `bounty_fee` = 0.004$ - system rounding and will `bounty_fee` = 0.00$\n`bounty_award` = 0.03$,  `bounty_fee` = 0.006$ - system rounding and will `bounty_fee` = 0.01$ - not ideal\n\nIf the value is between 0.000 - 0.004, system rounding and will be `0.00` - good.\nIf the value is between 0.005 - 0.009, system rounding and will be `0.01` - bad.\n\nThis lead us to conclude that the optimal value to set a reward is 0.02$.\n\nThus, by sending multiple set award requests with a value of 0.01$ or 0.02$, we will effectively avoid the 20% commission fee.\n\nIn the report we show the result of working with the value 0.01$\n\n### Steps To Reproduce\n\n1) Select a report that should be rewarded\n2) In our testing we used report #808343\n3) Set award amount - 0.01$\n4) Intercept the request\n\nhttps://hackerone.com/reports/bulk\n```\nPOST\nX-CSRF-Token: you_token_:)\n\nmessage=&substate=bounty-award&bounty_amount=0.01&reference=&add_reporter_to_original=false&reply_action=set-bounty&mark_ineligible_for_bounty=false&reports_count=1&report_ids%5B%5D=808343&bounty_currency=USD\n```\n\n5) Repeat this request multiple times - this can do using an intruder style attack with null payloads, e.g. 100 requests.\n6) Check the billing dashboard under https://hackerone.com/hackerone_h1p_bbp3/billing.json?month=3&year=2020\n\n```\n`{\"activity_date\":\"2020-03-02T10:56:29.265Z\",\"activity_description\":\"Bounty for report #808343\",\"report_id\":808343,\"team_handle\":\"hackerone_h1p_bbp3\",\"report_url\":\"https://hackerone.com/reports/808343\",\"reporter\":\"ggttss1\",\"bounty_award\":0.01,\"bounty_fee\":0.0,\"debit_or_credit_amount\":-0.01,\"paid_to_hacker_date\":null}`\n```\n\nE.g:\n\"bounty_award\":0.01,\"bounty_fee\":0.0,\"debit_or_credit_amount\":-0.01`\n\nThe 20% fee was not paid.\n\n9) After all the testing and using the best values we have:\n`https://hackerone.com/hackerone_h1p_bbp3/billing.json?month=3&year=2020`\n\n###{\"balance\":99.88,\"fee_percentage\":20.0,\"team_active\":true,\"billing_2_0\":true,\"has_credit_card\":false,\"billing_start_date\":\"2020-02-11T00:01:22.214+00:00\",\"total_bounty_award\":1.28,\"total_fees\":0.05,\"invoice_total\":1.33,\"ending_balance\":98.55\n\nRewarded: 1.28$\nFee: 0.05$ \nInvoice total: 1.33$\n\nWhere in reality, it should have been:\nRewarded: 1.28$\nFee: (1.28/(100*20))  ~ 0.26$\nInvoice total: 1.33$\n\nWeâ€™ve effectively saved 0.21$. Obviously, this will have a big impact long term, especially when dealing with substantial amounts.\n\nThanks , @haxta4ok00 !\n\n## Impact\n\nBypassing the 20% commission charged by HackerOne, resulting in substantial financial loss for the platform.",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-06-14T17:01:48.589Z",
  "allow_singular_disclosure_after": -115677446.7106829,
  "singular_disclosure_allowed": true,
  "vote_count": 16,
  "voters": [
    "hunter",
    "sameerphad72",
    "bitsscrambler",
    "xsstestov",
    "eye_",
    "since2003",
    "sumit7",
    "excute",
    "b69fb2ebda43240ece9dbeb",
    "mcx2124",
    "and 6 more..."
  ],
  "severity": {
    "rating": "low",
    "score": 3.5,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "none",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 3,
    "asset_type": "URL",
    "asset_identifier": "hackerone.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
