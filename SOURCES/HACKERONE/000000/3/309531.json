{
  "id": 309531,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMDk1MzE=",
  "url": "https://hackerone.com/reports/309531",
  "title": "Stored XSS in Snapmatic + R★Editor comments",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-01-26T11:36:03.600Z",
  "submitted_at": "2018-01-26T11:36:03.600Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "europa",
    "url": "/europa",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 2143,
    "url": "https://hackerone.com/rockstargames",
    "handle": "rockstargames",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/143/db40b290ac0adcde231da85c33a668f610e6f4df_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/143/db40b290ac0adcde231da85c33a668f610e6f4df_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Rockstar Games",
      "twitter_handle": "RockstarGames",
      "website": "http://www.rockstargames.com/",
      "about": "Publishers of such popular games as Grand Theft Auto, Max Payne, Red Dead Redemption, L.A. Noire, Bully & more."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-04-19T22:14:18.783Z",
  "bug_reporter_agreed_on_going_public_at": "2018-04-08T13:42:19.897Z",
  "team_member_agreed_on_going_public_at": "2018-04-19T22:14:18.550Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "weakness": {
    "id": 62,
    "name": "Cross-site Scripting (XSS) - Stored"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-05-08T13:42:20.082Z",
  "allow_singular_disclosure_after": -182042124.06634948,
  "singular_disclosure_allowed": true,
  "vote_count": 112,
  "voters": [
    "flamezzz",
    "nrockhouse",
    "jokebookservice1",
    "manoelt",
    "irvinlim",
    "knight9",
    "b19r8a14",
    "airblender",
    "sp1d3rs",
    "mashoud1122",
    "and 102 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 430,
    "asset_type": "URL",
    "asset_identifier": "socialclub.rockstargames.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 7165,
      "category": "team",
      "content": "**Summary provided by the Researcher, @europa .**\n___________________________________________________________________________________________________________________________\nI requested the disclosure of what I hope is the final report regarding stored cross-site-scripting vulnerabilities on the Rockstar Games SocialClub, to also allow me to summarize the research that went into the other 5 reports. \nHave fun!\n\n### Report #1\nThe 6-months adventure into researching and bypassing the SocialClub WAF begun with a simple discovery at first: while the WAF was removing anything enclosed in `<.*`, some **control characters** (`\\b \\f \\n \\r \\t`) weren't being taken into account when injecting a `<`, allowing an adversary to create a malicious payload in the simple form of `<\\t`.\n\nA fix was deployed to **remove anything following a** `<`.\n\n### Report #2\nTwo weeks after the fix, I ended up discovering what would soon become a “head-scratching” mystery: injecting a **single** `%` in the payload would bypass the filter entirely and force the back-end to somehow produce an unescaped `<` along with the escaped one.\n\nThe original payload was complex and confusing, and it led me to the wrong conclusion that [over-consumption flaws](https://hackerone.com/redirect?signature=e9fdfe4ae08f06fd697d9820b6472cbc3aceb3a2&url=https%3A%2F%2Fwebsec.github.io%2Funicode-security-guide%2Fcharacter-transformations%2F%23overconsumption) were to blame, but as analysis proceeded, it was finally discovered that the culprit was the **simple, single** `%`.\n\nThe final payload `<%&lt;script/src=//...?` produced an output of `&lt;%<script/src=\"//...\" <=\"\" p=\"\">` from the back-end.\n\nA fix was deployed and the WAF rules were made more strict, defeating all attempts with a 302 redirect to an error page.\n\n### Report #3\nTwo months after the last fix, I discovered how the WAF wouldn't account for [Full-Width](https://hackerone.com/redirect?signature=94c9f9639fb2c55281d3c1e2820f40ecadc45807&url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2BFF00) and [Small-Forms](https://hackerone.com/redirect?signature=e823898824394a9c0700e14806b23d9982e8d57a&url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2BFE50) variants which, chained with the `%` confusion from the second report would again trick the back-end into producing a valid output: indeed, giving **`U+FF1C`** or **`U+FE64`** as the input would pass the WAF and the back-end would transform both into `<`. This is called a [best-fit match flaw](https://hackerone.com/redirect?signature=bc75d2374467e877b490cd0801b7c340ad395857&url=https%3A%2F%2Fwebsec.github.io%2Funicode-security-guide%2Fcharacter-transformations%2F%23best-fit) and it usually happens on Windows-powered technology stacks, where one of the processing layers fails to properly account for missing characters in destination codepages.\n\nThe payload `\\uFE64%\\uFF1Cscript/src=//...?`, evaded the WAF and produced `&lt;%<script/src=\"//...?\" class=\"badLink\"` in the HTML page.\n\nA first fix was deployed preventing both script injections and DOM events manipulation, both of which I was able to bypass after a few days using a combination of **control chars, percentages, breaks, and exotic function invokation**. The payload `\\uFF1C%\\uFE64input/autofocus onfocus\\b='[1].find(alert)'` successfully bypassed the new filters and popped an alert before the report was closed as resolved, allowing the team to look for a better solution in time. A second, stronger fix was deployed and the WAF rules were made even stricter prohibiting any combination of direct or indirect forms of `<` and `%` in suspicious contextes, plus any shape or form of `onXXX` DOM events.\n\n### Report #4\nThe new WAF rules prevented any kind of injection: no useful HTML elements, no DOM events. Anything went straight to /dev/null. After spending a few weeks in trial & error tests, I remembered how the payload from **report #3** would have a `badLink class` added to it, as the back-end detected a suspicious URI in the comment and would ~~strike it out~~ and prevent it from becoming clickable.\n\nAfter weeks of tests, in a few hours I was able to chain **_eight_ different techniques** to go through the WAF, the back-end filter, and the client-side Javascript filter:\n\n1. using `<>` to separate “trigger words” in order to turn them “invisible” to the WAF (ie: `&<>lt;`). The _back-end_ would remove it for me.\n2. using `\\u0025` instead of `%` which would now trigger the WAF\n3. using the unaccounted for `MATH` [MathML](https://hackerone.com/redirect?signature=f00315bb1ba003cb663832891ce2f04a5e1709e2&url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FMathML%2FElement%2Fmath) element\n4. using control characters (`\\n \\t \\b \\r \\f` from **report #1**) to break element names to trick the _back-end_ (not the WAF) into reassembling them in output (ie: `<m\\bath` instead of `<math`)\n5. using the `xml:base` attribute instead of the usual `href` to specify a Javascript URI\n6. injecting quotes to mess up the output from the back-end\n7. using an innocuos `href=#` to make everything following the payload clickable\n8. using a **fake URL** enclosed in `[]` to exploit a flaw in the rendering engine in the back-end that would cause it to move the payload outside of the \"badUrl\" element and place it where we could use it\n\nThe final payload was `&<>lt;%&<>lt;m\\bath xml:base=\\\"j<>avascript:alert(document.domain)//\\\" href=#\\\"[bad.url.pls]` which produced `&lt%<math xml:base=\"javascript:alert(document.domain)//\" href=\"#\" x=\"\" class=\"badLink\">[bad.url.pls]`\n\nAs a bonus note, this led to the discovery of a particular payload that would render a newsfeed comment **un-repliable and un-deletable**. Both flaws were fixed with better rules, and by preventing the back-end from stripping “*conveniently-placed*” tags and control characters.\n\n### Report #5\nSomewhat less-related to the SocialClub per sé, this was a variation on **report #3** where it was discovered that Snapmatic and R★ Editor comments would go a different validation flow than any other entry, and the [best-fit matchings](https://hackerone.com/redirect?signature=bc75d2374467e877b490cd0801b7c340ad395857&url=https%3A%2F%2Fwebsec.github.io%2Funicode-security-guide%2Fcharacter-transformations%2F%23best-fit) would once again act up but on a different codepage this time, when using **Left-Angle brackets** `U+3008 \"〈\"` from the [Cjk Symbols and Punctuation block](https://hackerone.com/redirect?signature=73b9a54dadbf0c72c2d6cba07cdf52f97d13da52&url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2B3000), and **Left-pointing Angle brackets** `U+2329 \"〈\"` from the [Miscellaneus Technical block](https://hackerone.com/redirect?signature=12de40484af21138b7e46413f2fa9bc6eaff769e&url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2B2300).\n\nWhile the Snapmatic/R★ Editor back-end would block `U+FF1C` and `U+FE64`, the other two would go through and get \"matched\" to `<` somewhere in the web technology stack. My last payload was `〈script/src=//...?` and it was promptly fixed in both its variations.\n\n### Conclusions\nThe Rockstar Games team is amazing. My first duplicate report was with them back in September and if it wasn't for @jmarshall reacting so politely to my unjustified noobish irk to a duplicate I would've probably dropped bug bounties altogether.\n\nIt's been great to be involved all these months into researching new things and approaches—failing for weeks at a time allowed me to learn new techniques and extremely peculiar quirks I now feel ready to share with the community. I still go back and try new ideas as of today, so far without success. Which is great.\n\nAd maiora!",
      "user": {
        "id": 57954,
        "username": "jmarshall",
        "name": "JMarshall",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2016-02-25T14:40:27.992Z",
        "url": "https://hackerone.com/jmarshall",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "id": 7061,
      "category": "researcher",
      "content": "I requested the disclosure of what I hope is the final report regarding stored cross-site-scripting vulnerabilities on the Rockstar Games SocialClub, to also allow me to summarize the research that went into the other 5 reports. \nHave fun!\n\n---\n\n### Report #1\nThe 6-months adventure into researching and bypassing the SocialClub WAF begun with a simple discovery at first: while the WAF was removing anything enclosed in `<.*`, some **control characters** (`\\b \\f \\n \\r \\t`) weren't being taken into account when injecting a `<`, allowing an adversary to create a malicious payload in the simple form of `<\\t`.\n\nA fix was deployed to **remove anything following a `<`**.\n\n### Report #2\nTwo weeks after the fix, I ended up discovering what would soon become a “head-scratching” mystery: injecting a **single `%`** in the payload would bypass the filter entirely and force the back-end to somehow produce an unescaped `<` along with the escaped one.  \nThe original payload was complex and confusing, and it led me to the wrong conclusion that [over-consumption flaws](https://websec.github.io/unicode-security-guide/character-transformations/#overconsumption) were to blame, but as analysis proceeded, it was finally discovered that the culprit was the **simple, single `%`**.\n\nThe final payload `<%&lt;script/src=//...?` produced an output of `&lt;%<script/src=\"//...\" <=\"\" p=\"\">` from the back-end.\n\nA fix was deployed and the WAF rules were made more strict, defeating all attempts with a 302 redirect to an error page.\n\n### Report #3\nTwo months after the last fix, I discovered how the WAF wouldn't account for [**Full-Width**](https://www.compart.com/en/unicode/block/U+FF00) and [**Small-Forms**](https://www.compart.com/en/unicode/block/U+FE50) variants which, chained with the `%` confusion from the second report would again trick the back-end into producing a valid output: indeed, giving **`U+FF1C` or `U+FE64`** as the input would pass the WAF and the back-end would transform both into `<`. This is called a [best-fit match flaw](https://websec.github.io/unicode-security-guide/character-transformations/#best-fit) and it usually happens on Windows-powered technology stacks, where one of the processing layers fails to properly account for missing characters in destination codepages.\n\nThe payload `\\uFE64%\\uFF1Cscript/src=//...?`, evaded the WAF and produced `&lt;%<script/src=\"//...?\" class=\"badLink\"` in the HTML page.  \n\nA first fix was deployed preventing both script injections and DOM events manipulation, both of which I was able to bypass after a few days using a combination of **control chars, percentages, breaks, and exotic function invokation**.  The payload `\\uFF1C%\\uFE64input/autofocus onfocus\\b='[1].find(alert)'` successfully bypassed the new filters and popped an alert before the report was closed as resolved, allowing the team to look for a better solution in time. A second, stronger fix was deployed and the WAF rules were made even stricter prohibiting any combination of direct or indirect forms of `<` and `%` in suspicious contextes, plus any shape or form of `onXXX` DOM events.\n\n### Report #4\nThe new WAF rules prevented *any* kind of injection: no useful HTML elements, no DOM events. Anything went straight to /dev/null. After spending a few weeks in trial & error tests, I remembered how the payload from **report #3** would have a `badLink` class added to it, as the back-end detected a suspicious URI in the comment and would ~~strike it out~~ and prevent it from becoming clickable.\n\nAfter weeks of tests, in a few hours I was able to chain **_eight_ different techniques** to go through the WAF, the back-end filter, and the client-side Javascript filter:\n\n1. using `<>` to separate “trigger words” in order to turn them “invisible” to the WAF (ie: `&<>lt;`). The _back-end_ would remove it for me.\n2. using `\\u0025` instead of `%` which would now trigger the WAF\n3. using the unaccounted for `MATH` [MathML element](https://developer.mozilla.org/en-US/docs/Web/MathML/Element/math)\n4. using control characters (`\\n \\t \\b \\r \\f` from **report #1**) to break element names to trick the _back-end_ (not the WAF) into reassembling them in output (ie: `<m\\bath` instead of `<math`)\n5. using the `xml:base` attribute instead of the usual `href` to specify a Javascript URI\n6. injecting quotes to mess up the output from the back-end\n7. using an innocuos `href=#` to make everything following the payload clickable\n8. using a **fake URL** enclosed in `[]` to exploit a flaw in the rendering engine in the back-end that would cause it to move the payload *outside* of the \"badUrl\" element and place it where we could use it \n\nThe final payload was `&<>lt;%&<>lt;m\\bath xml:base=\\\"j<>avascript:alert(document.domain)//\\\" href=#\\\"[bad.url.pls]` which produced `&lt%<math xml:base=\"javascript:alert(document.domain)//\" href=\"#\" x=\"\" class=\"badLink\">[bad.url.pls]`\n\nAs a bonus note, this led to the discovery of a particular payload that would render a newsfeed comment **un-repliable and un-deletable**. Both flaws were fixed with better rules, and by preventing the back-end from stripping *“conveniently-placed”* tags and control characters.\n\n### Report #5\nSomewhat *less-related* to the SocialClub per sé, this was a variation on **report #3** where it was discovered that Snapmatic and R★ Editor comments would go a different validation flow than any other entry, and the [best-fit matchings](https://websec.github.io/unicode-security-guide/character-transformations/#best-fit) would once again act up but on a different codepage this time, when using **Left-Angle brackets** `U+3008 \"〈\"` from the [Cjk Symbols and Punctuation block](https://www.compart.com/en/unicode/block/U+3000), and **Left-pointing Angle brackets** `U+2329 \"〈\"` from the [Miscellaneus Technical block](https://www.compart.com/en/unicode/block/U+2300).\n\nWhile the Snapmatic/R★ Editor back-end would block `U+FF1C` and `U+FE64`, the other two would go through and get \"matched\" to `<` somewhere in the web technology stack. My last payload was `〈script/src=//...?` and it was promptly fixed in both its variations.\n\n### Conclusions\nThe Rockstar Games team is amazing. My first duplicate report was with them back in September and if it wasn't for @jmarshall reacting so politely to my unjustified noobish irk to a duplicate I would've probably dropped bug bounties altogether.  \nIt's been great to be involved all these months into researching new things and approaches—failing for weeks at a time allowed me to learn new techniques and extremely peculiar quirks I now feel ready to share with the community. I still go back and try new ideas as of today, so far without success. Which is great.\n\nAd maiora!",
      "user": {
        "id": 189882,
        "username": "europa",
        "name": "Alessandro De Micheli",
        "bio": "OH GOD HOW DID THIS GET HERE I'M NOT GOOD WITH COMPUTERS",
        "cleared": true,
        "verified": true,
        "website": null,
        "location": "Rome",
        "created_at": "2017-08-07T16:08:08.728Z",
        "url": "https://hackerone.com/europa",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
