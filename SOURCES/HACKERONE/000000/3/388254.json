{
  "id": 388254,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zODgyNTQ=",
  "url": "https://hackerone.com/reports/388254",
  "title": "Account takeover vulnerability by editor role privileged users/attackers via clickjacking",
  "state": "Closed",
  "substate": "not-applicable",
  "severity_rating": "high",
  "readable_substate": "N/A",
  "created_at": "2018-07-29T13:01:58.516Z",
  "submitted_at": "2018-07-29T13:01:58.516Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "rewanth_cool",
    "url": "/rewanth_cool",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 55,
    "url": "https://hackerone.com/wordpress",
    "handle": "wordpress",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "WordPress",
      "twitter_handle": "wordpress",
      "website": "https://wordpress.org/",
      "about": "Beautiful sites of any kind."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2018-09-03T12:27:11.728Z",
  "bug_reporter_agreed_on_going_public_at": "2018-09-03T12:27:11.614Z",
  "team_member_agreed_on_going_public_at": "2018-08-17T15:04:04.298Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "####Vulnerability -\nEditor role privileged users are able to hack into other's account by exploiting clickjacking vulnerability.\n\n####Version-\n4.9.7\n\n####Issue-\nhttps://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html\nAs mentioned per the above link, the editor and admin roles are given permissions to inject arbitary javascript in the posts. Though its a severe vulnerability we can't report about injecting javascript to steal cookies.\n**But only the admin roles/users have the permissions to change the details of other users. Due to this vulnerability editor privileged users are even able to do account takeover of other users account.**\nAllowing the editor role privileged users to use unfiltered HTML (https://en.support.wordpress.com/code/) exposed a new vulnerability via clickjacking. Impact has been explained clearly in the below section. This attack expects the wordpress user to be logged in before he opens the malicious post link sent by the editor privileged user.\n\n####Reproduction steps-\n1. Create two user accounts, one with author/subscriber privileges and other with editor privileges.\n2. Get logged in using the editor privileged account and create a new post with the following code.\nReplace `159.65.157.23:9080` with your IP address.\n\n```\n<iframe src=\"http://159.65.157.23:9080/wp-admin/profile.php\" id=\"frame\" onload=\"loaded()\" style=\"visibility:hidden\"></iframe>\n\n<script>\nvar MyIFrame = document.getElementById(\"frame\");\nvar MyIFrameDoc = (MyIFrame.contentWindow || MyIFrame.contentDocument || MyIFrame.document);\nfunction loaded(){\nMyIFrameDoc.document.getElementById(\"your-profile\").first_name.value=\"hacked by rewanthcool\"\nMyIFrameDoc.document.getElementById(\"your-profile\").submit.click();\nalert(\"Your first name has been changed to \" + MyIFrameDoc.document.getElementById(\"your-profile\").first_name.value + \". Visit http://159.65.157.23:9080/wp-admin/profile.php for confirmation\");\n}\n</script>\n```\n\n3. Now click on `publish` button to publish the URL. Copy the URL to the malicious post.\n4. Now get logged in as another user with author/subscriber privileged roles in another browser/incognito tab.\n5. Now paste the malicious URL (copied in step 3) in this browser and press enter.\n6. Boom !! Now the open the profile page of the author/subscriber privileged user `http://159.65.157.23:9080/wp-admin/profile.php` and you can see his firstname got changed to rewanthcool.\n\n**Similarly you can change the email of the user** by changing `first_name` parameter in above payload to `email`. So, now your payload becomes, `MyIFrameDoc.document.getElementById(\"your-profile\").email.value=\"attacker_rewanthcool@gmail.com\"`. By submitting this payload, you will get a confirmation email link to your profile and you can takeover the victim's account.\n\n###NOTE-\nCSRF protection adds `_wpnonce` to prevent these kind of CSRF attacks but since we are handling everything in an iframe bypasses this CSRF protection as it generates a new valid `_wpnonce` while it gets loaded in the iframe.\n\nIn the above payload, the attacker was able to change the firstname of the victim. That's just a sample. In worst cases, there are two main fields in the same page. They are\n1. Email-id\n2. New Password which generates new password by click on a button.\n3. Sessions: Logout everywhere else.\n\nBy using the combination of hidden iframe and javascript, the attacker can craft a similar payload and takeover a wordpress users account.\n\n####Mitigation-\nDisallow editor privileged users from injecting iframes into the pages/posts by changing the `X-Frame-Options` header to `DENY`.\n\n## Impact\n\nEditor role users can access other users account and change his personal information, change this settings, etc just by making the user to visit a nicely crafted page post.\n\n###Worst-case attack scenario\nMost dangerous impact can be **account takeover** by changing the email-id and password of the victim by injecting an iframe.\n\n###Detailed explanation of vulnerability-\nCSRF on edit-profile has been smartly handled by wordpress developers by adding `_wpnonce` to it. But allowing the editor privileged users to inject iframes into the posts bypasses this CSRF protection.\n\nA hidden iframe can be put in a post and its URL can be sent to the victim(lower privileged user like author, subscriber, etc). Once the victim clicks on the URL sent by the attacker, the hidden iframe will be submitting a javascript request to change the victim's firstname and lastname. In worst cases, the attacker can submit two requests via iframe using javascript to make account takeover.\n1. First request, to generate new password via hidden iframe.. This disabled the victim from using old password.\n2. Second request, to change the victim's email id to attacker's email id via hidden iframe. This completely disables to user to use the `forgot-password` option as the email id has been changed.\n3. Attacker now clicks on `forgot-password` and a reset email will be sent to the attackers email id.\n4. Account takeover completed and editor privileged user hacked the other wordpress users with other privileges.\n\n###Bonus feature/exploit to lock the victim-\nThere's an option to logout from everywhere in the edit-profile page, by clicking on that the attacker can make sure that the victim is not logged into any other accounts after he changed the password.\n\nOnly admin privileged users should be having the abilities to change the personal information like usernames, email-id, etc of other accounts but due to this vulnerability the editor privileged user is also getting the same amount of privileges as admin privileged user which definitely is a bad practice.\n\nConsidering the high severity of the issue, I'm sure this will be considered as an exceptional report with immediate fix.",
  "weakness": {
    "id": 74,
    "name": "UI Redressing (Clickjacking)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 6,
  "voters": [
    "mr_r3boot",
    "cryptographer",
    "hkr0x01",
    "psfauzi",
    "azazmirbaz",
    "yrap1"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 2750,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "WordPress Core",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
