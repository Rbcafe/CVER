{
  "id": 339483,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMzk0ODM=",
  "url": "https://hackerone.com/reports/339483",
  "title": "\"Bad Protocols Validation\" Bypass in \"wp_kses_bad_protocol_once\" using HTML-encoding without trailing semicolons",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-04-17T10:31:53.400Z",
  "submitted_at": "2018-04-17T10:31:53.400Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "irsdl",
    "url": "/irsdl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/7jo54b8f326ksmuq63s1in1v7jxx/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 55,
    "url": "https://hackerone.com/wordpress",
    "handle": "wordpress",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "WordPress",
      "twitter_handle": "wordpress",
      "website": "https://wordpress.org/",
      "about": "Beautiful sites of any kind."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-11-16T20:06:36.629Z",
  "bug_reporter_agreed_on_going_public_at": "2019-10-17T20:06:35.775Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Description:\nThe wp_kses_bad_protocol_once function (https://developer.wordpress.org/reference/functions/wp_kses_bad_protocol_once/) is used to sanitise content from bad protocols and other characters. It detects the protocol (URI scheme) by using the first colon character. It compares the identified protocol with a list of good protocols to ensure it is safe. \n\nAs this function is used to parse HTML-encoded attributes as well, it also uses HTML-encoded variants of the colon character as shown below:\n```\n   $string2 = preg_split( '/:|&#0*58;|&#x0*3a;/i', $string, 2 );\n```\n\nHowever, the above function is flawed as it does not include HTML-encoded parameters that do not use a semicolon character afterwards. See \"Decimal HTML character references without trailing semicolons\" and \"Hexadecimal HTML character references without trailing semicolons\" at https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet for more information about the issue.\n\nThe following HTML code shows an example that can bypass the wp_kses_bad_protocol_once validation (see it in action at https://jsfiddle.net/x103n1f7/1/):\n```\n<a href=\"javascript&#58alert(document.domain)\">JS - Numerical Entities</a>\n<a href=\"javascript&#x3ax=1;alert(document.domain)\">JS - Hex Entities</a>\n```\n\nThe following fix is suggested by adding one line of code at the first line of the wp_kses_bad_protocol_once function to add a semicolon character after the html-encoded variants of the colon character when it is missing. The function will look like this:\n\n```\nfunction wp_kses_bad_protocol_once($string, $allowed_protocols, $count = 1 ) {\n///////////////// suggested fix starts here\n    $string = preg_replace( '/(&#0*58(?![;0-9])|&#x0*3a(?![;a-f0-9]))/i' , \"$1;\" , $string );\n///////////////// suggested fix ends here\n    $string2 = preg_split( '/:|&#0*58;|&#x0*3a;/i', $string, 2 );\n    if ( isset($string2[1]) && ! preg_match('%/\\?%', $string2[0]) ) {\n        $string = trim( $string2[1] );\n        $protocol = wp_kses_bad_protocol_once2( $string2[0], $allowed_protocols );\n        if ( 'feed:' == $protocol ) {\n            if ( $count > 2 )\n                return '';\n            $string = wp_kses_bad_protocol_once( $string, $allowed_protocols, ++$count );\n            if ( empty( $string ) )\n                return $string;\n        }\n        $string = $protocol . $string;\n    }\n \n    return $string;\n}\n```\n\n## Impact\n\nThis can lead to reflected or stored cross-site scripting attacks for the core or the modules that only rely on this function for the validation.",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-11-16T20:06:35.822Z",
  "allow_singular_disclosure_after": -133894563.60502703,
  "singular_disclosure_allowed": true,
  "vote_count": 34,
  "voters": [
    "moblig",
    "foobar7",
    "sameerphad72",
    "bl4de",
    "ali",
    "mik317",
    "sudi",
    "zayn1337",
    "enesdexh1",
    "khizer47",
    "and 24 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 2750,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "WordPress Core",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
