{
  "id": 384569,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zODQ1Njk=",
  "url": "https://hackerone.com/reports/384569",
  "title": "Bypassing the Trusted Link Alert System",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-07-20T14:31:59.105Z",
  "submitted_at": "2018-07-20T14:31:59.105Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "pipe-to-grep",
    "url": "/pipe-to-grep",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 17443,
    "url": "https://hackerone.com/vanilla",
    "handle": "vanilla",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Vanilla",
      "twitter_handle": "vanilla",
      "website": "http://vanillaforums.com",
      "about": "Vanilla is a powerfully simple discussion forum you can easily customize to make as unique as your community."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-06-07T20:20:56.148Z",
  "bug_reporter_agreed_on_going_public_at": "2019-05-08T20:20:51.646Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nI have discovered a means of bypassing the system that will alert users of an untrusted link utilizing the Right to Left Overrride unicode character. The alert looks like this: https://i.imgur.com/9rp1K7b.mp4\n\n**Description:**\nFor this demonstration, I have added \"facebook.com\" to the trusted sites. Here is the screen: https://i.imgur.com/7bYOgmH.png \n\nIf a link leads to http://facebook.com, Vanilla will not give an alert. This looks like this: https://i.imgur.com/12Ou6F9.mp4\n\nTo bypass this system, I have utilized the Right to Left Override unicode character. The character reverses the text following it, so http://{rtlo}facebook.com would appear as http://moc.koobecaf. However, when a domain contains unicode characters, the domain is formatted to a different version. So http(s)://{rtlo}facebook.com actually leads to xn--facebook-ps49b.com. If an attacker purchases this domain, he can provide a link that could appear as facebook.com and will be trusted by Vanilla. No warning will be given, and they will be taken directly to the dangerous link. This is shown here: https://i.imgur.com/inHussi.mp4\nNOTE: In the gif, I used whatever.com in square brackets, this can be changed to facebook.com to complete the illusion.\n\nNOTE: I did not purchase the domain. I added it to my /etc/hosts file, but it is purchasable here: https://i.imgur.com/iQ68Pm7.png\n\n## Steps to reproduce:\n\n1. Enumerate for the trusted domains of a forum\n2. Navigate to any text field you can use BBCode on. In order to gain a meaningful shell or something of the like, another user needs to see it.\n3. Find a way to copy the U+202e character. Windows offers a tool called character map, but you can also do this here: http://www.unicode-symbol.com/u/202E.html\n4. Go to another text field away from Vanilla to prepare your payload. I personally like the url bar of a new tab.\n5. In the text field, type (if you know the trusted site will force https, like google use that) http://trusteddomain.com\n6. Then paste the character after the double slashes.\n7. You will see the link in reverse. For example, http://{rtlo}link.com turns into http://moc.knil.\n8. Memorize the reverse version and retype it in another field. Then place the character in the same spot. \n9. Paste this into a tab and hit enter. You will see the ACE formatted url that you must buy. google.com With the character is https://xn--moc-4t7s.elgoog/\n10. Craft your final payload and copy it (I used Ctrl A and Ctrl C in a new tab). Go back to your vanilla.\n11. Type [whatyouwanttodisplay.com]() Paste the payload into the parentheses. \n\n## Anything else we should know?\nPlease watch the attached gifs for further clarification.\nThis affects any forum whether its live or local. \nThis was difficult to pin a category on, but I would consider it Bypass of a Forced Warning.\n\nThis makes phishing and social engineering **exponentially** easier. \nThe user won't know until it's too late.\n\n## Impact\n\nThe attacker could get a reverse shell on anybody. If that person has authority in a Vanilla system and credentials are found for the account, the attacker could potentially have total control of the forum. If the server host clicks the link, a www-data shell will be given on the site. By default, everyone locally has read privileges on the configuration files, database credentials could be compromised as well. \nThe attack could do anything that a normal attacker does with a false link, he could lead the user to phishing, malware, keyloggers, a shell, etc.",
  "weakness": {
    "id": 74,
    "name": "UI Redressing (Clickjacking)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-06-07T20:20:51.704Z",
  "allow_singular_disclosure_after": -147890820.93492094,
  "singular_disclosure_allowed": true,
  "vote_count": 8,
  "voters": [
    "ali",
    "sleepnotf0und",
    "cryptographer",
    "odraude",
    "0x08",
    "eissen5c",
    "pipe-to-grep",
    "i3andii"
  ],
  "severity": {
    "rating": "medium",
    "score": 5.7,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "low",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 2101,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.vanillaforums.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
