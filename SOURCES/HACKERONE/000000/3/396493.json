{
  "id": 396493,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTY0OTM=",
  "url": "https://hackerone.com/reports/396493",
  "title": "Reflected DOM XSS on www.starbucks.co.uk",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-08-17T11:25:53.034Z",
  "submitted_at": "2018-08-17T11:25:53.034Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bayotop",
    "url": "/bayotop",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1989,
    "url": "https://hackerone.com/starbucks",
    "handle": "starbucks",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/989/c9aa38cf3b1a91daa085d31e23d23f34cd1874df_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/989/c9aa38cf3b1a91daa085d31e23d23f34cd1874df_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Starbucks",
      "twitter_handle": "Starbucks",
      "website": "http://www.starbucks.com",
      "about": "OUR MISSION WITH EVERY CUP, WITH EVERY CONVERSATION, WITH EVERY COMMUNITY– WE NURTURE THE LIMITLESS POSSIBILITIES OF HUMAN CONNECTION"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-06-16T21:21:07.555Z",
  "bug_reporter_agreed_on_going_public_at": "2020-05-22T13:39:52.031Z",
  "team_member_agreed_on_going_public_at": "2020-06-16T21:21:07.452Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\n\n`www.starbucks.co.uk` is vulnerable to reflected DOM XSS due to 2 seemingly unexploitable issues. The first issue is unfixed for over a year now, #252908, the second issue originates in a 3rd party module called prettyPhoto. \n\n**Description:**\n\nVisiting the following link results in a JavaScript alert (use Firefox or Edge, Chrome's XSS Auditor blocks this particular payload):\n\n`https://www.starbucks.co.uk/shop/card/egift/thank-you/anything%2522onclick=%2522confirm(document.domain)#!\\'\\,\\*\\,/1`\n\nThis is possible because:\n\n1. there is a seemingly harmless HTML attribute injection into a `<link rel=\"canonical\">` element (unfixed for over a year, see #252908) and\n2. the prettyPhoto JavaScript module allows to trigger the `click` event on any existing HTML element.\n\nThe following is done by prettyPhoto in https://www.starbucks.com/static/resource/shop_js/676938998_en-US:\n\n```js\nfunction d() {\n  url = location.href;\n  hashtag = (url.indexOf(\"#!\") != -1) ? decodeURI(url.substring(url.indexOf(\"#!\") + 2, url.length)) : false;\n  return hashtag\n}\n\nhashIndex = d();\nhashRel = hashIndex;\nhashIndex = hashIndex.substring(hashIndex.indexOf(\"/\") + 1, hashIndex.length - 1);\nhashRel = hashRel.substring(0, hashRel.indexOf(\"/\"));\nhashIndex = parseInt(hashIndex);\nhashRel = hashRel.replace(/([ #;&,.+*~\\':\"!^$[\\]()=>|\\/])/g, \"\\\\$1\");\nsetTimeout(function() {\n  b(\"a[rel^='\" + hashRel + \"']:eq(\" + hashIndex + \")\").trigger(\"click\")\n}, 50)\n```\n\nNotice how the user-controlled `hashRel` variable is [sanitized to prevent DOM XSS](https://www.saotn.org/prettyphoto-dom-based-xss/#how-to-fix-prettyphoto-dom-based-xss) in a quite obscure manner. It only works because it prefixes `=` with a `\\` ruining all standard DOM XSS payloads known to me. Also notice that `\\` is **not** escaped which means that it's possible to inject arbitrary valid jQuery selectors.\n\nCombining these two issues makes it possible to execute arbitrary JavaScript, by injecting an `onclick` HTML attribute into the `<link rel=\"canonical\">` element and triggering it via the prettyPhoto JavaScript module by setting `hashRel` to `\\'\\,\\*\\,`. Due to the used jQuery version and it's lax parsing the following triggers the `click` event on all existing elements:\n\n```js\n$(\"a[rel^='\\\\\\\\'\\\\\\\\,\\\\\\\\*\\\\\\\\,']:eq(NaN)\").trigger(\"click\")\n```\n\n**Steps To Reproduce:**\n\nTested on latest Firefox and Edge:\n\n1. `https://www.starbucks.co.uk/shop/card/egift/thank-you/anything%2522onclick=%2522confirm(document.domain)#!\\'\\,\\*\\,/1`\n\n**Recommendation:**\n\nRegarding the HTML attribute injection I suggested a fix in #252908. Regarding prettyPhoto, I don't believe it's actively maintained anymore so a customization will be necessary in my opinion. White-listing allowed characters in `hashRel` is the way to go with something like `\\w+`.\n\n## Impact\n\nAttackers can execute arbitrary JavaScript in the victims' browsing context by tricking them into visiting an URL under the attackers' control. I believe you are aware of the dangers of XSS, but I am more then happy to show an actual exploit if needed.",
  "weakness": {
    "id": 61,
    "name": "Cross-site Scripting (XSS) - Reflected"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-06-21T13:39:52.101Z",
  "allow_singular_disclosure_after": -115082982.10241075,
  "singular_disclosure_allowed": true,
  "vote_count": 12,
  "voters": [
    "wh0ru",
    "e4366eolywrgpidfbio",
    "ali",
    "brahim_boufakri01",
    "leonishan",
    "d4rkm4tter",
    "potatosalad420",
    "mrkalibot",
    "komic_sans",
    "user923413253",
    "and 2 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 13017,
    "asset_type": "URL",
    "asset_identifier": "www.starbucks.co.uk",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 23025,
      "category": "team",
      "content": "bayotop discovered a reflected DOM XSS on www.starbucks.co.uk.\n@bayotop — thank you for reporting this vulnerability and for confirming the resolution.",
      "user": {
        "id": 706273,
        "username": "agedsumatra",
        "name": "agedSumatra",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2019-08-12T17:50:49.926Z",
        "url": "https://hackerone.com/agedsumatra",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/yjUg6PZmutR2o3qPxEP2MT1J/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/yjUg6PZmutR2o3qPxEP2MT1J/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/yjUg6PZmutR2o3qPxEP2MT1J/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
