{
  "id": 395845,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTU4NDU=",
  "url": "https://hackerone.com/reports/395845",
  "title": "url.parse() hostname spoofing via javascript: URIs",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-08-16T09:28:36.010Z",
  "submitted_at": "2018-08-16T09:28:36.010Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bayotop",
    "url": "/bayotop",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-01-15T09:00:13.685Z",
  "bug_reporter_agreed_on_going_public_at": "2020-01-15T09:00:13.612Z",
  "team_member_agreed_on_going_public_at": "2020-01-14T23:54:32.352Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\n\nUsing [url.parse()](https://nodejs.org/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost) in security sensitive checks is dangerous as an arbitrary hostname can be spoofed via `javascript:` URIs. \n\n**Description:**\n\n[The original url.parse() API](https://github.com/nodejs/node/blob/master/lib/url.js) is dangerous as it allows to spoof an arbitrary hostname via a `javascript:` URI:\n\n```bash\n$ node -e 'console.log(require(\"url\").parse(\"javAscript:alert(1);a=\\x27@white-listed.com\\x27\"))'\nUrl {\n  protocol: 'javascript:',\n  slashes: null,\n  auth: 'alert(1);a=\\'',\n  host: 'white-listed.com',\n  port: null,\n  hostname: 'white-listed.com',\n  hash: null,\n  search: null,\n  query: null,\n  pathname: '\\'',\n  path: '\\'',\n  href: 'javascript:alert(1)%3Ba%3D\\'@white-listed.com\\'' }\n\n```\n\n**Steps To Reproduce:**\n\n  1. `node -e 'console.log(require(\"url\").parse(\"javAscript:alert(1);a=\\x27@white-listed.com\\x27\"))'`\n\nAfter a quick look, I believe the issue stems from case-sensitive checks on lines [268](https://github.com/nodejs/node/blob/master/lib/url.js#L268) and [275](https://github.com/nodejs/node/blob/master/lib/url.js#L275)\n\n**Additional notes:**\n\nI didn't set the severity as I have no idea how widely the \"Legacy API\" is still used and the actual impact is hugely context-based. For the sake of completeness, I found this issue when testing a real world app.\n\nThis also affects [this npm package](https://www.npmjs.com/package/url). \nThe WHATWG API handles this particular case well.\n\nIn might be a good idea to mention in the documentation that URL parsing shouldn't be relied on in security relevant context. Exact string matching or similarly simple concepts should be always preferred.\n\n## Impact\n\nThis can be dangerous if used in security relevant access controls as follows:\n\n```js\nlet parsedUrl = UrlHelper.parse(url); // url = javAscript:alert(1);a='@localhost/'\nif (parsedUrl.hostname === 'localhost') { // parsedUrl.hostname = localhost\n  return true; // and do something like window.location = url \n}\n```\n\nAlthough being a bad practice, developers will write this code and will introduce bypassable access controls. Given that the bypass works only with `javascript:` URIs this will likely lead to XSS in most cases.",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-02-13T23:54:32.425Z",
  "allow_singular_disclosure_after": -126191698.19698642,
  "singular_disclosure_allowed": true,
  "vote_count": 11,
  "voters": [
    "jonathanbouman",
    "sameerphad72",
    "bl4de",
    "mik317",
    "johndoe1492",
    "poulfaded",
    "speedman",
    "varunjha089",
    "ryanlevi",
    "goldenninja",
    "and 1 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 6.1,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
