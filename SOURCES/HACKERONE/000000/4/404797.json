{
  "id": 404797,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MDQ3OTc=",
  "url": "https://hackerone.com/reports/404797",
  "title": "IDOR to delete images from other stores",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2018-09-03T16:42:10.715Z",
  "submitted_at": "2018-09-03T16:42:10.715Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "emitrani",
    "url": "/emitrani",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/206/181/54e8d7444534dbe32a21bd75c87febb777a18496_original.PNG/bbbf913458c48565d99f975f7ab9fc18ad1e989aa4f8811c1209ed725333d1ec"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 2943,
    "url": "https://hackerone.com/zomato",
    "handle": "zomato",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/943/71b47f9aa21166f0989dfb97112ca10c66a9d0b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/943/71b47f9aa21166f0989dfb97112ca10c66a9d0b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Zomato",
      "twitter_handle": "Zomato",
      "website": "https://www.zomato.com",
      "about": "The fastest way to search for great places to eat at and order from around you. Serving 24 countries worldwide."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2018-09-05T17:01:23.798Z",
  "bug_reporter_agreed_on_going_public_at": "2018-09-05T15:11:33.350Z",
  "team_member_agreed_on_going_public_at": "2018-09-05T17:01:23.591Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** The parameter `photo_ids` in below request is vulnerable to IDOR\n\n/php/client_manage_handler?‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà&case=remove-active-photo\n\n**Description:** Since there is no check for res_id or ownership I was able to delete Gerben's image by just using the photo_id from his store. This is a problem because it is a get request and I can try a bunch of ID's to randomly delete photos that don't belong to me or try to find a way to leak this ID from store page to do targeted deletes. \n\nI believe if you try to delete multiple photos there will be more ids in the request so that would allow to expand the attack by trying a lot of ids at once.\n\n**Platform(s) Affected:** [website]\n\n\n## Steps To Reproduce:\n\n\n  1. Get 2 stores.\n  2. With store 1 navigate to https://www.zomato.com/clients/manage_photos.php\n  3. Start to delete a photo and capture the request that looks like :\n\n```\nGET /php/client_manage_handler?‚ñà‚ñà‚ñà&case=remove-active-photo HTTP/1.1\nHost: www.zomato.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://www.zomato.com/\nX-Requested-With: XMLHttpRequest\nCookie: _ga=GA1.2.2082511252.1535917423; _gid=GA1.2.1587734047.1535917423; PHPSESSID=4821c7caf69f3253db3be3d4c42a15b7b04d223a; fbcity=283; zl=en; fbtrack=a09417c27b7e98b4b3f2ad8357ef3903; __utmx=141625785.FQnzc5UZQdSMS6ggKyLrqQ$0:NaN; __utmxx=141625785.FQnzc5UZQdSMS6ggKyLrqQ$0:1535944804:8035200; dpr=2; cto_lwid=82057293-9985-419b-a25b-4d8b6d89951b; G_ENABLED_IDPS=google; zhli=1; squeeze=cd186e1f53eee0d94e51ef00c9d4eb25; orange=2769113; al=1; session_id=null\nConnection: close\nX-Forwarded-For: 127.0.0.1\n\n```\n\n4 . Save the photo_ids parameter\n5 . Go to your second restaurant account and capture the same request with a different res_id and cookies\n6 . Replace the `photo_ids` with the id from step 4 and send request.\n7 . Observe the photo is deleted.\n\n## Impact\n\nBy using targeted or blind attacks it is possible to delete photos that don't belong to a restaurant because of this IDOR. My leading theory is that currently you are checking that the logged in user has permissions on the res_id in the request but not verifying that the res_id owns that photograph. There should be an additional check to ensure that the photo_id belongs to that restaurant before deleting it.\n\nRegards,\nEray",
  "bounty_amount": "600.0",
  "formatted_bounty": "$600",
  "weakness": {
    "id": 55,
    "name": "Insecure Direct Object Reference (IDOR)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 50,
  "voters": [
    "libcontainer",
    "sameerphad72",
    "miguel_santareno",
    "spam404",
    "ali",
    "mik317",
    "flashdisk",
    "aryan2808",
    "emitrani",
    "generaleg",
    "and 40 more..."
  ],
  "severity": {
    "rating": "low",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 383,
    "asset_type": "WILDCARD",
    "asset_identifier": "*.zomato.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 10261,
      "category": "researcher",
      "content": "When I was testing the restaurant manager specific endpoints on Zomato I discovered that pictures added were being deleted with a get request like so:\n\n```\nGET /php/client_manage_handler?res_id=REDACTED&photo_ids%5B%5D=r_YxNDUOTE4MTYzO&removable=1&case=remove-active-photo HTTP/1.1\nHost: www.zomato.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://www.zomato.com/\nX-Requested-With: XMLHttpRequest\nCookie: REDACTED\nConnection: close\n```\n`photo_ids` seemed like a potential IDOR and I found it was possible to find the ID by visiting a restaurants front page. Since I didn't want to delete a photo in production I decided to contact someone who I knew also had access to a manager account to test my intuition. As I had no way of seeing if his private picture was deleted I waited for his response and then submitted my report with the following POC:\n\n{F341857}\n\n@Zomato team promptly verified and fixed the issue and it was a pleasure to work with them for the first time.\n",
      "user": {
        "id": 206181,
        "username": "emitrani",
        "name": "Eray Mitrani",
        "bio": "Just stumbling into critsüçÄ @ErayMitrani",
        "cleared": true,
        "verified": true,
        "website": null,
        "location": "New York",
        "created_at": "2017-10-07T01:13:32.261Z",
        "url": "https://hackerone.com/emitrani",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/206/181/54e8d7444534dbe32a21bd75c87febb777a18496_original.PNG/bbbf913458c48565d99f975f7ab9fc18ad1e989aa4f8811c1209ed725333d1ec",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/206/181/54e8d7444534dbe32a21bd75c87febb777a18496_original.PNG/3bab17d5c599dd892d16ec2294c90d31fffec4c913d2a2d1eee99f1b66443b4c",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/206/181/54e8d7444534dbe32a21bd75c87febb777a18496_original.PNG/90619f7826123741ae24fb6c75c2841a469dfc9a1000bcf24480d26f30bd0f60"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
