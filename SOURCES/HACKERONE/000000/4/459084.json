{
  "id": 459084,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NTkwODQ=",
  "url": "https://hackerone.com/reports/459084",
  "title": "The taint flag is not propagated at JSON.parse",
  "state": "Closed",
  "substate": "informative",
  "readable_substate": "Informative",
  "created_at": "2018-12-08T15:22:20.393Z",
  "submitted_at": "2018-12-08T15:22:20.393Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/9a55e00ecd2cdf18a7f40678e6836e4cdc90bf95eb4b50c43f5fb775da40bb65"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 7724,
    "url": "https://hackerone.com/ruby",
    "handle": "ruby",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby",
      "twitter_handle": "",
      "website": "https://www.ruby-lang.org",
      "about": "A Programmer's Best Friend"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2024-01-05T02:48:28.241Z",
  "bug_reporter_agreed_on_going_public_at": "2024-01-02T21:43:01.653Z",
  "team_member_agreed_on_going_public_at": "2024-01-05T02:48:28.155Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I confirmed that the taint flag is not propagated in `JSON.parse`,`JSON.parse!`, `JSON.load`.\n\n```ruby\n$ irb\nirb(main):001:0> require 'json'\n=> true\n\n# dump\nirb(main):002:0> hash = {\"key\".taint => \"value\".taint}.taint\n=> {\"key\"=>\"value\"}\nirb(main):003:0> json_str = JSON.dump(hash)\n=> \"{\\\"key\\\":\\\"value\\\"}\"\nirb(main):004:0> json_str.tainted?\n=> false\nirb(main):005:0>\n\n# prepare tainted string\nirb(main):006:0> json_str.taint\n=> \"{\\\"key\\\":\\\"value\\\"}\"\nirb(main):007:0> json_str.tainted?\n=> true\nirb(main):008:0>\n\n# parse\nirb(main):009:0> json_parse = JSON.parse(json_str)\n=> {\"key\"=>\"value\"}\n\n# not propagated \nirb(main):010:0> json_parse.tainted?\n=> false\nirb(main):011:0> json_parse.keys[0].tainted?\n=> false\nirb(main):012:0> json_parse[\"key\"].tainted?\n=> false\nirb(main):013:0> json_parse.to_s.tainted?\n=> false\nirb(main):014:0>\n\nirb(main):015:0> json_parse_2 = JSON.parse!(json_str)\n=> {\"key\"=>\"value\"}\nirb(main):016:0> json_parse_2.tainted?\n=> false\nirb(main):017:0> json_parse_2.keys[0].tainted?\n=> false\nirb(main):018:0> json_parse_2[\"key\"].tainted?\n=> false\nirb(main):019:0> json_parse_2.to_s.tainted?\n=> false\nirb(main):020:0>\n\nirb(main):021:0> json_parse_3 = JSON.parse!(json_str)\n=> {\"key\"=>\"value\"}\nirb(main):022:0> json_parse_3.tainted?\n=> false\nirb(main):023:0> json_parse_3.keys[0].tainted?\n=> false\nirb(main):024:0> json_parse_3[\"key\"].tainted?\n=> false\nirb(main):025:0> json_parse_3.to_s.tainted?\n=> false\n```\n\nIt propagates in `load` of Yaml and Marshal.\n\n```ruby\n# -- yaml\n\nirb(main):026:0> require 'yaml'\n=> true\n\n# dump\nirb(main):027:0> hash = {\"key\".taint => \"value\".taint}.taint\n=> {\"key\"=>\"value\"}\nirb(main):028:0> yaml_str = YAML.dump(hash)\n=> \"---\\nkey: value\\n\"\nirb(main):029:0> yaml_str.tainted?\n=> false # ?\nirb(main):030:0>\n\n# prepare tainted string\nirb(main):031:0> yaml_str.taint\n=> \"---\\nkey: value\\n\"\nirb(main):032:0> yaml_str.tainted?\n=> true\nirb(main):033:0>\n\n# load\nirb(main):034:0> yaml_load = YAML.load(yaml_str)\n=> {\"key\"=>\"value\"}\n\nirb(main):035:0> yaml_load.tainted?\n=> false # ?\nirb(main):036:0> yaml_load.keys[0].tainted?\n=> true\nirb(main):037:0> yaml_load[\"key\"].tainted?\n=> true\nirb(main):038:0> yaml_load.to_s.tainted?\n=> true\nirb(main):039:0>\n\n\n# -- marshal\n\n# dump\nirb(main):040:0> marshal_str = Marshal.dump(hash)\n=> \"\\x04\\b{\\x06I\\\"\\bkey\\x06:\\x06ETI\\\"\\nvalue\\x06;\\x00T\"\nirb(main):041:0> marshal_str.tainted?\n=> true\nirb(main):042:0>\n\n# prepare tainted string\nirb(main):043:0> marshal_str.taint\n=> \"\\x04\\b{\\x06I\\\"\\bkey\\x06:\\x06ETI\\\"\\nvalue\\x06;\\x00T\"\nirb(main):044:0> marshal_str.tainted?\n=> true\nirb(main):045:0>\n\n# load\nirb(main):046:0> marshal_load = Marshal.load(marshal_str)\n=> {\"key\"=>\"value\"}\nirb(main):047:0> marshal_load.tainted?\n=> true\nirb(main):048:0> marshal_load.keys[0].tainted?\n=> true\nirb(main):049:0> marshal_load[\"key\"].tainted?\n=> true\nirb(main):050:0> marshal_load.to_s.tainted?\n=> true\n```\n\n## Impact\n\nIt is possible that an incorrect decision may be made if the user is using the taint flag.\nI can not judge whether to propagate also about `dump`.",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 40,
  "voters": [
    "freepointer",
    "zy9ard3",
    "hrdfrdh",
    "exec_iq",
    "eye_",
    "ssherlock1",
    "golu_369",
    "devine_vinayak",
    "hunt3eran0n",
    "0xm1racle",
    "and 30 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
