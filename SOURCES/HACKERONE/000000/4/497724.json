{
  "id": 497724,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80OTc3MjQ=",
  "url": "https://hackerone.com/reports/497724",
  "title": "Stored XSS in Post Preview as Contributor",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-02-18T21:03:20.337Z",
  "submitted_at": "2019-02-18T21:03:20.337Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "simonscannell",
    "url": "/simonscannell",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/HvE5FGgP56eXFMNMr4rwmunu/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 55,
    "url": "https://hackerone.com/wordpress",
    "handle": "wordpress",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "WordPress",
      "twitter_handle": "wordpress",
      "website": "https://wordpress.org/",
      "about": "Beautiful sites of any kind."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-08-18T18:02:04.483Z",
  "bug_reporter_agreed_on_going_public_at": "2020-07-19T18:02:00.973Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Root cause\n\nI noticed that the `get_the_content()` makes a preg_replace_callback after all other validation and sanitization has been performed.\n\n```\nfunction get_the_content( $more_link_text = null, $strip_teaser = false ) {\n\tglobal $page, $more, $preview, $pages, $multipage;\n\n\t$post = get_post();\n\n\t...\n\tif ( $preview ) // Preview fix for JavaScript bug with foreign languages.\n\t\t$output =\tpreg_replace_callback( '/\\%u([0-9A-F]{4})/', '_convert_urlencoded_to_entities', $output );\n\n\treturn $output;\n}\n```\n\nAny JavaScript URL encoded characters will get replaced by the result of the `_convert_urlencoded_to_entities()` function.\n\n```\nfunction _convert_urlencoded_to_entities( $match ) {\n\treturn '&#' . base_convert( $match[1], 16, 10 ) . ';';\n}\n```\n\nThis function replaces the URL encoded characters with a corresponding HTML entity.\n\nThis in fact leads to a bypass of `esc_url()`.\n\n`esc_url()` usually prevents payloads such as `javascript:alert(1)` etc. It even understands `javascript&#3A;alert(1);`. However, the payload `<a href=\"javascript%u003Aalert(/XSS/)\">text</a>` would not get sanitized by `esc_url()`. Due to the characters being converted back to HTML entities after the sanitization, the payload works again.\n\n## Steps for replication\n\n1. Create a new blog post\n2. Paste the following HTML: `<a href=\"javascript%u003Aalert(/XSS/)\">text</a>`\n3. Preview the post and click the link\n\nI have tested this with Firefox.\n\n## Impact\n\nIf an attacker can trick an admin into previewing a post and get him to click the link, he can execute arbitrary JavaScript code in the context of the admin user. \n\nI have demonstrated in #428019 how using already existing CSS classes the link can be turned into an invisible overlay over the entire page, which makes exploitation way more likely.",
  "weakness": {
    "id": 62,
    "name": "Cross-site Scripting (XSS) - Stored"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-08-18T18:02:01.055Z",
  "allow_singular_disclosure_after": -110056566.37032457,
  "singular_disclosure_allowed": true,
  "vote_count": 13,
  "voters": [
    "cxzer0",
    "foobar7",
    "mashoud1122",
    "ali",
    "sibwtf",
    "mr0kalash",
    "hopeforbest",
    "allenjohnsonkav",
    "paqman",
    "bc6d19eb5e26e6e88426cca",
    "and 3 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 2750,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "WordPress Core",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
