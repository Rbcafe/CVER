{
  "id": 484745,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80ODQ3NDU=",
  "url": "https://hackerone.com/reports/484745",
  "title": "GoldSrc: Buffer Overflow in DELTA_ParseDelta function leads to RCE",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2019-01-23T18:31:17.741Z",
  "submitted_at": "2019-01-23T18:31:17.741Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "pixelindigo",
    "url": "/pixelindigo",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23363,
    "url": "https://hackerone.com/valve",
    "handle": "valve",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Valve",
      "twitter_handle": "",
      "website": "https://www.valvesoftware.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-05-04T19:29:19.947Z",
  "bug_reporter_agreed_on_going_public_at": "2020-10-14T21:34:04.892Z",
  "team_member_agreed_on_going_public_at": "2021-05-04T19:29:19.764Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "3000.0",
  "formatted_bounty": "$3,000",
  "weakness": {
    "id": 4,
    "name": "Stack Overflow"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 25,
  "voters": [
    "nightshiba",
    "njbooher",
    "drsniper",
    "mvc",
    "spam404",
    "ali",
    "romesful",
    "fe7ch",
    "theappsec",
    "cryptographer",
    "and 15 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.6,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "high",
      "availability": "high"
    }
  },
  "structured_scope": {
    "databaseId": 1289,
    "asset_type": "DOWNLOADABLE_EXECUTABLES",
    "asset_identifier": "hl.exe",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 47932,
      "category": "team",
      "content": "## Description\nThe bug is triggered by 2 packets.\nFirst one is `svc_deltadescription` which describes memory layout of such structures as `event_t`, `weapon_data_t`, ...\nIt is sent as a list of fields' descriptions: type, offset and others.\nNext, `DELTA_ParseDelta` fills these structures when corresponding delta packets are received. The problem is that this function doesn't check if `field_offset + field_size` doesn't exceed bounds of allocated memory for these structures which can lead to buffer overflow.\n\nTo actually trigger this overflow we need to send specially crafted delta information. I found that `svc_event` packet is parsed in `ParseEvent` function that allocates `event_t` structure on the stack and then fills it in vulnerable `DELTA_ParseDelta` function.\n\nUsing this info we can craft two packets that will triger stack overflow.\nIn my exploit I used following memory layout for `event_t` structure:\n```\npayload:\n  - type=String\n  - offset=0xac  # offset of return address in ParseEvent function\nint1:\n  - type=Integer\n  - offset=0xac + <int1 offset in payload>\n...\nintn:\n  - type=Integer\n  - offset=0xac + <intn offset in payload>\n```\nThe first field is used for the payload. Other extra integer fields are used to put data in the payload that has 2 or more zeros (for example 0x0b for syscall) since `DELTA_ParseDelta` copies string until it meets the null character `\\0`.\n\nNX is enabled, so it is not possible to execute shellcode on the stack or any other writable memory region directly. However, the main executable `hl` is loaded at the fixed address, which means we can build some ROPs without leaking addresses.\nI decided to take it one step further and build a rop chain to pop calc, so I checked other libraries and found `int 0x80` gadget in `hw.so`. Though, it will be loaded on different addresses on each run, which means that a rop chain has to calculate the base address of `hw.so` at runtime.\n\nI came up with the following rop chain (you can check the full one in the attached extra materials):\n1. Call `strncpy` to build `/usr/bin/xcalc` and `DISPLAY=:0` strings in .bss section from bytes that scattered across readonly sections\n2. Call `Sys_LoadModule(\"hw.so\")` to get its base address\n3. Prepare execve syscall arguments and jmp to int 0x80\n\n## Steps to reproduce\nThis poc exploit pops  `xcalc`. In my demo I used clean ubuntu 18.10, but it should work in other environments that have `/usr/bin/xcalc`.\n1. Make sure that you have python3 installed to run server\n2. Start server with `python3 poc.py` F411266  \n3. Launch Counter-Strike 1.6  \n4. Connect to 127.0.0.1  \n\nAfter these steps xcalc should pop up.\n\n\n## PoC Demo\n{F411267}\n\n## Impact\n\nRemote Code Execution on client.",
      "user": {
        "id": 279011,
        "username": "mikela",
        "name": "Mike L",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-05-17T22:06:50.780Z",
        "url": "https://hackerone.com/mikela",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
