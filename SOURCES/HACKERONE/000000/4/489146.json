{
  "id": 489146,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80ODkxNDY=",
  "url": "https://hackerone.com/reports/489146",
  "title": "Confidential data of users and limited metadata of programs and reports accessible via GraphQL",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2019-01-31T15:32:20.974Z",
  "submitted_at": "2019-01-31T15:32:20.974Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "yashrs",
    "url": "/yashrs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/S9WnJuUrpWvxZ6iM38qL2HE4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": true,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-02-03T10:57:19.220Z",
  "bug_reporter_agreed_on_going_public_at": "2019-02-03T10:57:19.106Z",
  "team_member_agreed_on_going_public_at": "2019-02-03T10:36:46.940Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\nThe GraphQL endpoint doesn't have access controls implemented properly.\n\n**Description:**\nAny attacker can get personally identifiable information of users of Hackerone such as email address, backup hash codes, facebook_user_id, account_recovery_phone_number_verified_at, totp_enabled, etc.\n\nThese are just some examples of fields which are getting leaked directly from GraphQL.\n\nThis is the request sent to GraphQL:\n\n```\n{\n  id\n  users()\n  {\n    total_count \n    nodes\n    {\n      _id\n      name\n      username\n      email\n      account_recovery_phone_number\n      account_recovery_unverified_phone_number\n      bounties\n      {\n        total_amount\n      }\n      otp_backup_codes\n      i_can_update_username\n      location\n      year_in_review_published_at\n      anc_triager\n      blacklisted_from_hacker_publish\n      calendar_token\n      vpn_credentials\n      {\n        name\n      }\n      account_recovery_phone_number_sent_at\n      account_recovery_phone_number_verified_at\n      swag\n      {\n        total_count\n      }\n      totp_enabled\n      subscribed_for_team_messages\n      subscribed_for_monthly_digest\n      sessions\n      {\n        total_count\n      }\n      facebook_user_id\n      unconfirmed_email\n    }\n  }\n```\n\nSample Response:\n█████████\n\nPlease fix it.\n\nThanks,\nYash :)\n\n## Impact\n\nThis could potentially leak many users' info",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-03-05T10:36:47.124Z",
  "allow_singular_disclosure_after": -156048031.85080382,
  "singular_disclosure_allowed": true,
  "vote_count": 992,
  "voters": [
    "mcmahoniel",
    "pajoda",
    "13c50k4",
    "0x541",
    "alganad",
    "njmulsqb",
    "joaxcar",
    "rootz491",
    "rioru",
    "san1t1z3r",
    "and 982 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 9.3,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "unchanged",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 3,
    "asset_type": "URL",
    "asset_identifier": "hackerone.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 14009,
      "category": "team",
      "content": "On January 31st, 2019 at 7:16pm PST, HackerOne confirmed that two reporters were able to query confidential data through a GraphQL endpoint. This vulnerability was introduced on December 17th, 2018 and was caused by a backend migration to a class-based implementation of GraphQL types, mutations, and connections. The [class-based implementation introduced](http://graphql-ruby.org/schema/class_based_api) the `nodes` field by default on all connections. The `nodes` field, in contrast with `edges`, didn’t leverage any of the defenses HackerOne has implemented to mitigate the exposure of sensitive information.\n\nOur investigation concluded that malicious actors did not exploit the vulnerability. No confidential data was compromised. A short-term fix was released on January 31st, 2019 at 9:46 PM, a little over 2 hours after the vulnerability was reproduced.\n\n# Timeline\n\n| **Date** | **Time (PST)** | **Action** |\n|-------------|----------------|------------------------------------------------------------------------------------------------------------------|\n| 2018-12-17 | 9:07 AM | Software containing bug deployed to production. |\n| 2019-01-31 | 7:32 AM | Vulnerability submitted to HackerOne’s bug bounty program. |\n| 2019-01-31 | 7:21 PM | HackerOne validated the report and started incident response. |\n| 2019-01-31 | 8:25 PM | HackerOne identified which code change introduced the security vulnerability and started work on a patch. |\n| 2019-01-31 | 9:46 PM | A patch was released mitigating the identified vulnerability. |\n| 2019-01-31 | 11:46 PM | HackerOne confirmed the vulnerability was not abused by any malicious actors. |\n| 2019-02-01 | 6:18 AM | The root cause of the vulnerability was identified and a long term mitigation was proposed. |\n| 2019-02-01 | 5:08 PM | Long term mitigation was deployed to production. |\n| 2019-02-03 | 2:34 AM | Impacted users were alerted that their information was exposed to the reporters who submitted the vulnerability. |\n\n# Root Cause\nHackerOne has a number of defenses in place to reduce the risk of over-exposing data through our GraphQL layer. The first notable defense is a separate database schema that limits the set of rows a user can query based on their current role. This significantly reduces the impact in case, for example, the result of `Report.all`, would be serialized and returned to the user. The second notable defense is attribute-level authorization depending on the role of the requester. This makes sure that when an object is serialized, for example a publicly disclosed report, the user is not able to obtain internal metadata of the report.\n\n*Why upgrade?*\nOn December 17th, when the code change was put up for review, engineers noticed the addition of the `nodes` field. An assumption was made that the field behaved like a shortcut for `edges { node }` — which, in hindsight, was not the case. No manual testing was performed to make sure that the authorization model for `nodes` was similar to other connection types.\n\nHackerOne’s engineering team decided to upgrade to the class-based implementation of `graphql-ruby` because the old .define-based implementation was lazy-loaded. This caused problems when hot reloading pieces of code in a development environment. The class-based implementation also performs better in most situations. The .define-style implementation is also deprecated by the maintainers of the gem (to be removed with GraphQL 2.0).\n\n*Why didn’t we notice?*\nThe `nodes` field is a helper field for Relay, which is used by the frontend. Even though the field was introduced, HackerOne engineers hadn’t started using this in our frontend. This caused the addition to fly under the radar of other engineers. The go-to way to query data through connection types at HackerOne is to go through the `edges` field. Because engineers outside of the specific team who upgraded to the class-based implementation did not deem the change important enough, there was no communication to other engineering teams.\n\n*Why was it exploitable?*\nWhen a GraphQL query is deconstructed and turned into one or multiple SQL queries, it will cast the result of it into an array of stale objects and use the attribute-level authorization to scrub all data the current user isn’t authorized to see. Root cause analysis showed that this code path was only followed when the nodes were queried through the `edges` field.\n\n**Query that followed the expected code path**\n```\nquery {\n  users() {\n    edges {\n      node {\n        email\n      }\n    }\n  }\n}\n```\n\nDuring the GraphQL gem upgrade on December 17th, all GraphQL types, connections, and mutations were rewritten to a class-based implementation. This introduced the `nodes` field on every connection type [in HackerOne’s GraphQL schema](https://github.com/arkadiyt/bounty-targets-data/commit/cc4ce27dc1c92996191374f46312e4da5b7099c0#diff-8f06618eaa831640dfc824ff0cc29ebd). Instead of casting the result to an array with stale objects, the `nodes` field would result in an `ActiveRecord::Relation` object. The attribute-level authorization instrumentation would then incorrectly assume that the result was safe to be serialized, as it assumes the parent of the GraphQL field had already been scrubbed.\n\n**Query that followed the unexpected code path**\n```\nquery {\n  users() {\n    nodes {\n      email\n    }\n  }\n}\n```\n\nIn the team’s investigation to determine whether this was exploited by malicious actors, the team concluded that the current logging level enabled them to answer two crucial questions: which GraphQL queries were executed and what information was transferred to the people proving the security vulnerability in the first place. These questions confirmed it was not exploited.\n\n# Resolution and Recovery\nAt 7:21 PM PST, HackerOne successfully reproduced the vulnerability as described by the reporter. The responding team identified the code change that introduced the vulnerability and started working on a short-term mitigation at 8:25 PM. This mitigation was released at 9:46 PM. The short-term mitigation was to disable the `nodes` field [from every connection type](https://github.com/arkadiyt/bounty-targets-data/commit/dd90f110609bff572f15b62d29701195a3c2b3bf#diff-8f06618eaa831640dfc824ff0cc29ebd). An internal code rule was deployed to alert the incident responders in case a new connection type was added that had the `nodes` field enabled. At the time, the root cause of the vulnerability was still unclear.\n\nOn February 1st at 6:18 AM, the team concluded the root cause analysis of the identified vulnerability. A long-term fix was put up for discussion. This fix addressed the underlying problem of the lack of attribute-level protection for the `nodes` field. Going forward any connection type that is introduced will either be sanitized through the attribute-level authorization or will stop processing the request in case of an unexpected object to be returned.\n\nThe minimum bounty award for a critical vulnerability on hackerone.com is currently set to $15,000. Even though this vulnerability exposed confidential information, it was limited to user information and metadata of programs and reports. None of the exposed information could have led to the compromise of confidential vulnerability information. It did, however, allow actors to query a significant amount of information. Because of that, the team decided to award the reporters with $20,000 for uncovering this vulnerability and working with us throughout the process.\n\n# Vulnerability Impact on Data\nSensitive information of multiple objects was exposed. Due to the two notable defenses as described in the Root Cause section, the scope of the information that was exposed was limited. Below is an overview of the objects and the confidential data that a user was able to access.\n\n*Connection: users*\nThe GraphQL schema enables anyone to query the users on the platform. This is an intentional design decision. However, because every User object could be accessed, a significant amount of confidential information was accessible.\n\nBelow is an overview of all sensitive attributes that could be queried for every user on hackerone.com.\n\n| **Sensitive attribute** | **Note** |\n|------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| account_recovery_phone_number | The last two digits of a verified account recovery phone number. |\n| account_recovery_unverified_phone_number | The complete unverified account recovery phone number. |\n| address | Accessible when swag was awarded for a report the authenticated user had access to, regardless of their role (e.g. publicly disclosed report). |\n| calendar_token | The secret calendar token that exposes when HackerOne challenges were scheduled for the user. [This does not expose customer names](https://hackerone.com/reports/488643). |\n| duplicate_users | An array of possible duplicate accounts based on platform behavior. |\n| email | The email address. |\n| otp_backup_codes | An array of bcrypt-hashed OTP backup codes. |\n| payout_preferences | A connection of the user’s payout preferences. This does **not** include bank account details. |\n| reports | See Report connection for the scope and attributes that were exposed. |\n| unconfirmed_email | The unconfirmed email address. |\n\n*Connection: teams*\nThe secure database schema, by default, allows any user to query public programs (teams) and public external programs. Because of the relationship between external programs and HackerOne programs, this data set includes programs who may be running a private program. This means it was possible to obtain internal triage notes and the policy of a select number of private programs the user did not have access to. The reporters queried partial program information, but they did not obtain any sensitive information that warranted HackerOne to reach out to any customers.\n\n| **Sensitive attribute** | **Note** |\n|-----------------------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| average_bounty_lower_amount | The lower bound of the average bounty range. |\n| average_bounty_upper_amount | The higher bound of the average bounty range. |\n| base_bounty | The minimum bounty of a program. |\n| bounties_total | The sum of awarded bounties in the entire lifetime of the program. |\n| bug_count | The total number of resolved reports. |\n| child_teams | A connection containing the hierarchy of teams. |\n| first_response_time | A float containing the average time to first response. |\n| goal_valid_reports | The goal of valid vulnerabilities per month the program set. |\n| grace_period_remaining_in_days | The number of days the program has to recover from too many SLA failures to avoid their program being taken off HackerOne. |\n| new_staleness_threshold | The internal SLA until a report is marked as an SLA miss when it hasn’t received a first response. |\n| new_staleness_threshold_limit | The internal SLA until a report is marked as an SLA fail when it hasn’t received a first response. |\n| policy | The program policy in raw markdown. |\n| policy_html | The rendered program policy. |\n| product_edition | The product edition the program uses. |\n| report_submission_form_intro | The submission form introduction in raw markdown. |\n| report_submission_form_intro_html | The rendered submission form introduction. |\n| report_template | The default report template in raw markdown. |\n| reporters | An array of user objects who have reporter access to the program. |\n| resolution_time | A float containing the average time to resolution. |\n| resolved_staleness_threshold | The internal SLA until a report is marked as an SLA miss when it hasn’t been resolved. |\n| sla_failed_count | The number of reports failing the internal SLA. |\n| structured_policy | A structured representation of the program policy. |\n| structured_scopes | A connection that only disclosed an internal `reference` in case the user was authorized to see the structured scopes on the program page. |\n| target_signal | A float representing the targeted signal of the program. |\n| triage_bounty_management | A text field containing instructions for HackerOne’s triage team on how to handle bounty payments. |\n| triage_enabled | A boolean field indicating whether the program uses HackerOne’s triage services. |\n| triage_note | Internal triage notes in raw markdown. |\n| triage_note_html | The rendered triage notes. |\n| triage_time | A float containing the average time to triage. |\n| triaged_staleness_threshold | The internal SLA until a report is marked as an SLA miss when it hasn’t been triaged. |\n| triaged_staleness_threshold_limit | The internal SLA until a report is marked as an SLA fail when it hasn’t been triaged. |\n| whitelisted_hackers | See `reporters`. |\n\n*Connection: reports*\nThe reports data hasn’t been fully migrated to the secure database schema yet, which means that at the time the vulnerability was reported, only fully publicly disclosed and all reports the user participated in were accessible. This significantly reduced the number of report information that was exposed.\n\n| **Sensitive attribute** | **Note** |\n|-----------------------------|-----------------------------------------------------------------------------------------------|\n| anc_reasons | An array of strings containing flags why the report was submitted to the HackerOne Human-Augmented Signal queue. |\n| mediation_requested_at | A date/time field when mediation was requested. |\n| pre_submission_review_state | A flag representing how Human-Augmented Signal responded to the report. |\n| reference | An optional internal reference. |\n| reference_link | An optional link to an internal ticket. |\n\nEven though the reporters confirmed that they did not query more information than necessary to prove the vulnerability and that they have deleted the information, HackerOne has reached out to the people for which sensitive information was downloaded by the reporters.\n\n**If your data was accessed during this incident, you have received a separate notification from HackerOne.**\n\n# Preventative Measures\nAs part of our incident response process, we are conducting an internal review and analysis of the incident. We are taking the following actions to address the underlying causes of issues and to help prevent future occurrence:\n* Consider leveraging the `graphql-ruby` gem hooks for built-in authorization callbacks to catch more edge cases\n* Break the execution flow when an unexpected object is returned in the resolution of a connection field\n* Reduce the complexity of connection type resolution\n",
      "user": {
        "id": 2,
        "username": "jobert",
        "name": "Jobert Abma",
        "bio": "Co-founder of HackerOne. ಠ_ಠ",
        "cleared": true,
        "verified": true,
        "website": "https://hackerone.com",
        "location": "San Francisco, CA",
        "created_at": "2013-03-08T01:17:12.256Z",
        "url": "https://hackerone.com/jobert",
        "hackerone_triager": false,
        "hackerone_employee": true,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
