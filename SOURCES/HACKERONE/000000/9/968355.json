{
  "id": 968355,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NjgzNTU=",
  "url": "https://hackerone.com/reports/968355",
  "title": "[i18next] Prototype pollution attack",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-08-27T09:16:19.316Z",
  "submitted_at": "2020-08-27T09:16:19.390Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "0b5cur17y",
    "url": "/0b5cur17y",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/oQRYWBvwMZSWFYZtEEzqK5AN/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-04-26T20:52:07.700Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2021-03-27T20:51:48.564Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a prototype pollution vulnerability in i18next.\nIt allows to modify the prototype of a base object, which may result in DoS, XSS, RCE, etc. depending on the way the library is used.\n\n# Module\n\n**module name:** i18next\n**version:** 19.7.0\n**npm page:** ` https://www.npmjs.com/package/i18next`\n\n## Module Description\n\ni18next is a very popular internationalization framework for browser or any other javascript environment (eg. node.js).\n\n## Module Stats\n\nWeekly downloads: 1,003,465\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe i18next API provides a function `addResourceBundle` in [src/ResourceStore.js:79](https://github.com/i18next/i18next/blob/master/src/ResourceStore.js#L79) (see API docs [here](https://www.i18next.com/overview/api#addresourcebundle)).\nIt allows to set many translations at once. Optionally, it can process nested objects and overwrite existing translations.\nFor example, you can call `i18next.addResourceBundle('en', 'translations', { homepage: { title: 'The English Title'} }, true, true);` to set the key \"homepage.title\" to \"The English Title\", overwriting it if it existed before.\n\nThe function `addResourceBundle` uses a utility function `deepExtend` to process nested objects.\nIt is defined in [src/utils.js:84](https://github.com/i18next/i18next/blob/44c2e7621a7e07660433b27122281b50886a1caf/src/utils.js#L84).\nThis function attempts to guard against prototype pollution by blacklisting the property `__proto__`.\nHowever, it does not blacklist the property `constructor`.\n\nTo pollute `Object` you could thus set a translation like `{ constructor: { prototype: { polluted: true } } }`.\n\nFor an application to be vulnerable, it has to use  `addResourceBundle` with attacker-controlled input passed into the `resources` argument.\nMoreover, both arguments `deep` and `overwrite` must be set to `true`. \n\n## Steps To Reproduce:\n\nTo try it out quickly, you can just copy the function `deepExtend` from [src/utils.js:84](https://github.com/i18next/i18next/blob/44c2e7621a7e07660433b27122281b50886a1caf/src/utils.js#L84)\nand use it to apply the above-mentioned payload  to an empty object, with the `overwrite` argument set to `true`.\n\nThe following self-contained code snipped exemplifies how to do it.\nCopy and paste to a file \"main.js\" and run in \"node main.js\".\nIt will print \"Object is polluted\".\n\n```\n// -------------- deepExtend as defined in i18next -------------- \nfunction deepExtend(target, source, overwrite) {\n  /* eslint no-restricted-syntax: 0 */\n  for (const prop in source) {\n    if (prop !== '__proto__') {\n      if (prop in target) {\n        // If we reached a leaf string in target or source then replace with source or skip depending on the 'overwrite' switch\n        if (\n          typeof target[prop] === 'string' ||\n          target[prop] instanceof String ||\n          typeof source[prop] === 'string' ||\n          source[prop] instanceof String\n        ) {\n          if (overwrite) target[prop] = source[prop];\n        } else {\n          deepExtend(target[prop], source[prop], overwrite);\n        }\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n  }\n  return target;\n}\n// --------------------------------------------------------------- \n\nconst translations = '{ \"constructor\": { \"prototype\": { \"polluted\": true} } }';  \nconst existingData = {};                         \n                                                  \ndeepExtend(existingData, JSON.parse(translations), true)\n\nif ({}.polluted)\n    console.log(\"Object is polluted\")\n```\n\n# Wrap up\n\nSelect Y or N for the following statements:\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N]\n\n## Impact\n\nThe vulnerability may result in DoS, XSS, RCE, etc. depending on the way the library is used.",
  "weakness": {
    "id": 106,
    "name": "Modification of Assumed-Immutable Data (MAID)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-04-26T20:51:48.704Z",
  "allow_singular_disclosure_after": -88362113.76821238,
  "singular_disclosure_allowed": true,
  "vote_count": 9,
  "voters": [
    "battle_angel",
    "aditi_singh",
    "yassinek3ch",
    "demonia",
    "justdax",
    "courcy",
    "jaymac024",
    "walid_faour",
    "ekgaribadmi"
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 56304,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "i18next",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
