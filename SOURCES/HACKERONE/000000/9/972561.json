{
  "id": 972561,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NzI1NjE=",
  "url": "https://hackerone.com/reports/972561",
  "title": "kubeadm logs tokens before deleting them",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2020-09-01T23:15:55.815Z",
  "submitted_at": "2020-09-01T23:15:55.868Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "mlevesquedion",
    "url": "/mlevesquedion",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 39386,
    "url": "https://hackerone.com/kubernetes",
    "handle": "kubernetes",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Kubernetes",
      "twitter_handle": "kubernetesio",
      "website": "https://kubernetes.io/",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-11-21T18:04:06.009Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2020-10-22T18:03:51.596Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Report Submission Form\n\n## Summary:\n`kubeabdm`'s `delete` command takes as input either a bootstrap token ID, or a full token. Before determining whether the input is just an id or a full token, `kubeadm` logs the input using `klog`. If the deletion fails, the token would remain valid. An attacker who has access to the logs could use it to perform actions that require a bootstrap token, such as creating a cluster or joining nodes to an existing cluster.\n\n## Kubernetes Version:\nThe vulnerable code is present in kubernetes 1.19. The specific line that contains the call to `klog` was last edited on 2019-03-24.\n\n## Steps To Reproduce:\nThe vulnerable code is in the `github.com/kubernetes` repository, under `kubernetes/cmd/kubeadm/app/cmd/token.go`, at line `423`. Here is the whole function:\n```go\n// RunDeleteTokens removes a bootstrap tokens from the server.\nfunc RunDeleteTokens(out io.Writer, client clientset.Interface, tokenIDsOrTokens []string) error {\n\tfor _, tokenIDOrToken := range tokenIDsOrTokens {\n\t\t// Assume this is a token id and try to parse it\n\t\ttokenID := tokenIDOrToken\n\t\tklog.V(1).Infof(\"[token] parsing token %q\", tokenIDOrToken) // POTENTIAL LEAK HERE\n\t\tif !bootstraputil.IsValidBootstrapTokenID(tokenIDOrToken) {\n\t\t\t// Okay, the full token with both id and secret was probably passed. Parse it and extract the ID only\n\t\t\tbts, err := kubeadmapiv1beta2.NewBootstrapTokenString(tokenIDOrToken)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Errorf(\"given token %q didn't match pattern %q or %q\",\n\t\t\t\t\ttokenIDOrToken, bootstrapapi.BootstrapTokenIDPattern, bootstrapapi.BootstrapTokenIDPattern)\n\t\t\t}\n\t\t\ttokenID = bts.ID\n\t\t}\n\n\t\ttokenSecretName := bootstraputil.BootstrapTokenSecretName(tokenID)\n\t\tklog.V(1).Infof(\"[token] deleting token %q\", tokenID)\n\t\tif err := client.CoreV1().Secrets(metav1.NamespaceSystem).Delete(context.TODO(), tokenSecretName, metav1.DeleteOptions{}); err != nil {\n\t\t\treturn errors.Wrapf(err, \"failed to delete bootstrap token %q\", tokenID)\n\t\t}\n\t\tfmt.Fprintf(out, \"bootstrap token %q deleted\\n\", tokenID)\n\t}\n\treturn nil\n}\n```\n\nAnd here's the definition of the kubeadm command that calls that function:\n```go\n\tdeleteCmd := &cobra.Command{\n\t\tUse:                   \"delete [token-value] ...\",\n\t\tDisableFlagsInUseLine: true,\n\t\tShort:                 \"Delete bootstrap tokens on the server\",\n\t\tLong: dedent.Dedent(`\n\t\t\tThis command will delete a list of bootstrap tokens for you.\n\n\t\t\tThe [token-value] is the full Token of the form \"[a-z0-9]{6}.[a-z0-9]{16}\" or the\n\t\t\tToken ID of the form \"[a-z0-9]{6}\" to delete.\n\t\t`),\n\t\tRunE: func(tokenCmd *cobra.Command, args []string) error {\n\t\t\tif len(args) < 1 {\n\t\t\t\treturn errors.Errorf(\"missing subcommand; 'token delete' is missing token of form %q\", bootstrapapi.BootstrapTokenIDPattern)\n\t\t\t}\n\t\t\tkubeConfigFile = cmdutil.GetKubeConfigPath(kubeConfigFile)\n\t\t\tclient, err := getClientset(kubeConfigFile, dryRun)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\treturn RunDeleteTokens(out, client, args)\n\t\t},\n\t}\n```\n\n## Supporting Material/References:\nNone.\n\n## Impact\n\nAn attacker who obtains a bootstrap token from the logs could use it to authenticate with `kubeadm` and create a new cluster or join nodes to an existing cluster, e.g. to use computing resources. An attacker could also perform other actions using `kubeadm`, e.g. listing or deleting other tokens.",
  "weakness": {
    "id": 87,
    "name": "Insufficiently Protected Credentials"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-11-21T18:03:51.695Z",
  "allow_singular_disclosure_after": -101850615.28543827,
  "singular_disclosure_allowed": true,
  "vote_count": 6,
  "voters": [
    "mik317",
    "h4x0r_dz",
    "cryptographer",
    "rover404",
    "voyageur",
    "mlevesquedion"
  ],
  "severity": {
    "rating": "low",
    "score": 3.4,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "local",
      "attack_complexity": "high",
      "privileges_required": "high",
      "user_interaction": "none",
      "scope": "changed",
      "confidentiality": "low",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 32543,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/kubernetes/kubeadm",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
