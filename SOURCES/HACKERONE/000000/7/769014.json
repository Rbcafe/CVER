{
  "id": 769014,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NjkwMTQ=",
  "url": "https://hackerone.com/reports/769014",
  "title": "[GoldSrc] RCE via 'spk' Console Command",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2020-01-06T20:39:03.210Z",
  "submitted_at": "2020-01-06T20:39:03.210Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "gamer7112",
    "url": "/gamer7112",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23363,
    "url": "https://hackerone.com/valve",
    "handle": "valve",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Valve",
      "twitter_handle": "",
      "website": "https://www.valvesoftware.com",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "no-content",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-08-19T04:37:36.871Z",
  "bug_reporter_agreed_on_going_public_at": "2020-08-19T03:46:34.820Z",
  "team_member_agreed_on_going_public_at": "2020-08-19T04:37:36.735Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "",
  "bounty_amount": "350.0",
  "formatted_bounty": "$350",
  "weakness": {
    "id": 3,
    "name": "Classic Buffer Overflow"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 23,
  "voters": [
    "njbooher",
    "gamer7112",
    "mvc",
    "rook1337",
    "spam404",
    "romesful",
    "0xwise",
    "idiablos",
    "sa1tama0",
    "abhishekmorla",
    "and 13 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 1289,
    "asset_type": "DOWNLOADABLE_EXECUTABLES",
    "asset_identifier": "hl.exe",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 24090,
      "category": "team",
      "content": "Details:\n#Description\nRCE can be achieved on clients via the 'spk' console command due to missing length checks before copying into a stack based buffer.\n\n#POC\n1. Place the attached cfg file in the root directory of the game: {F676967}\n2. Launch the game and bring up the console with `~`\n3. Type in `exec rce.cfg` and press enter\n4. View calc pop \n\n#Vulnerable Code\nThe problem arises because `VOX_LoadSound` calls `VOX_GetDirectory` which copies into the stack buffer `szpath` without any length validation which leads to a buffer overflow.\n```cpp\n\nchar *VOX_GetDirectory(char *szpath, char *psz)\n{\n\tchar c;\n\tint cb = 0;\n\tchar *pszscan = psz + strlen(psz) - 1;\n\n\t// scan backwards until first '/' or start of string\n\tc = *pszscan;\n\twhile (pszscan > psz && c != '/')\n\t{\n\t\tc = *(--pszscan);\n\t\tcb++;\n\t}\n\n\tif (c != '/')\n\t{\n\t\t// didn't find '/', return default directory\n\t\tstrcpy(szpath, \"vox/\");\n\t\treturn psz;\n\t}\n\n\tcb = strlen(psz) - cb;\n\tmemcpy(szpath, psz, cb); // missing length validation\n\tszpath[cb] = 0;\n\treturn pszscan + 1;\n}\n\naud_sfxcache_t *VOX_LoadSound(aud_channel_t *pchan, char *pszin)\n{\n\tchar buffer[512];\n\tint i, j, k, cword;\n\tchar\tpathbuffer[64];\n\tchar\tszpath[32];\n\taud_sfxcache_t *sc;\n\tvoxword_t rgvoxword[CVOXWORDMAX];\n\tchar *psz;\n\n\tif (!pszin)\n\t\treturn NULL;\n\n\tmemset(rgvoxword, 0, sizeof (voxword_t) * CVOXWORDMAX);\n\tmemset(buffer, 0, sizeof(buffer));\n\n\t// lookup actual string in (*gAudEngine.rgpszrawsentence), \n\t// set pointer to string data\n\n\tpsz = VOX_LookupString(pszin, NULL);\n\n\tif (!psz)\n\t{\n\t\tgEngfuncs.Con_DPrintf (\"VOX_LoadSound: no sentence named %s\\n\",pszin);\n\t\treturn NULL;\n\t}\n\n\t// get directory from string, advance psz\n\tpsz = VOX_GetDirectory(szpath, psz);\n\n\tif (strlen(psz) > sizeof(buffer) - 1)\n\t{\n\t\tgEngfuncs.Con_DPrintf (\"VOX_LoadSound: sentence is too long %s\\n\",psz);\n\t\treturn NULL;\n\t}\n\n\t// copy into buffer\n\tstrncpy(buffer, psz, sizeof(buffer) - 1);\n\tbuffer[sizeof(buffer) - 1] = 0;\n\tpsz = buffer;\n\n\t// parse sentence (also inserts null terminators between words)\n\t\n\tVOX_ParseString(psz);\n\n\t// for each word in the sentence, construct the filename,\n\t// lookup the sfx and save each pointer in a temp array\t\n\n\ti = 0;\n\tcword = 0;\n\twhile (rgpparseword[i])\n\t{\n\t\t// Get any pitch, volume, start, end params into voxword\n\n\t\tif (VOX_ParseWordParams(rgpparseword[i], &rgvoxword[cword], i == 0))\n\t\t{\n\t\t\t// this is a valid word (as opposed to a parameter block)\n\t\t\t_snprintf(pathbuffer, sizeof(pathbuffer), \"%s%s.wav\", szpath, rgpparseword[i]);\n\t\t\tpathbuffer[sizeof(pathbuffer) - 1] = 0;\n\n\t\t\tif (strlen(pathbuffer) >= sizeof(pathbuffer))\n\t\t\t\tcontinue;\n\n\t\t\t// find name, if already in cache, mark voxword\n\t\t\t// so we don't discard when word is done playing\n\t\t\trgvoxword[cword].sfx = S_FindName(pathbuffer, &(rgvoxword[cword].fKeepCached));\n\t\t\tcword++;\n\t\t}\n\t\ti++;\n\t}\n\n\tk = VOX_IFindEmptySentence();\n\tif (k < 0)\n\t\treturn NULL;\n\n\tj = 0;\n\twhile (rgvoxword[j].sfx != NULL)\n\t\trgrgvoxword[k][j] = rgvoxword[j++];\n\n\tpchan->isentence = k;\n\tpchan->iword = 0;\n\tpchan->sfx = rgvoxword[0].sfx;\n\n\tsc = S_LoadSound(pchan->sfx, pchan);\n\tif (!sc)\n\t{\n\t\tS_FreeChannel(pchan);\n\t\treturn NULL;\n\t}\n\n\treturn sc;\n}\n```\n\n## Impact\n\nRCE allows for an attacker to execute any arbitrary code on a chosen victim.\n",
      "user": {
        "id": 279011,
        "username": "mikela",
        "name": "Mike L",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": null,
        "location": "",
        "created_at": "2018-05-17T22:06:50.780Z",
        "url": "https://hackerone.com/mikela",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "medium": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png",
          "xtralarge": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
