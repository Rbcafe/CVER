{
  "id": 715413,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MTU0MTM=",
  "url": "https://hackerone.com/reports/715413",
  "title": "curl successfully matches IP address literal in URL against IP address literal in certificate Common Name",
  "state": "Closed",
  "substate": "informative",
  "readable_substate": "Informative",
  "created_at": "2019-10-16T11:24:19.420Z",
  "submitted_at": "2019-10-16T11:24:19.420Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "lersek-rh",
    "url": "/lersek-rh",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 35663,
    "url": "https://hackerone.com/curl",
    "handle": "curl",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "curl",
      "twitter_handle": "",
      "website": "https://curl.se",
      "about": "cURL is an Open Source project providing a library and command-line tool for doing internet transfers"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2019-14553"
  ],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2021-01-08T09:18:29.536Z",
  "bug_reporter_agreed_on_going_public_at": "2021-01-08T09:18:29.493Z",
  "team_member_agreed_on_going_public_at": "2021-01-08T08:20:59.522Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\nA user may invoke the curl command line utility with an IP address literal in the URL, such as\n\n    https://192.168.124.2/...\n\nIf the HTTPS server presents a certificate whose Common Name matches this IP address literal as a *string* (that is, Common Name is the ASCII string `192.168.124.2`), then curl accepts the certificate (assuming it is properly signed by a trusted CA).\n\nThis is wrong. Per [RFC-2818, section *3.1.  Server Identity*](https://tools.ietf.org/html/rfc2818#section-3.1):\n\n    In some cases, the URI is specified as an IP address rather than a\n    hostname. In this case, the iPAddress subjectAltName must be present\n    in the certificate and must exactly match the IP in the URI.\n\nThat is, if the user-specified URL contains an IPv4 or IPv6 address literal, then the server certificate may only match the URL if the certificate contains the same *numeric* IP address in the *SAN*, as a `GEN_IP` entry.\n\nCurl should first attempt `X509_VERIFY_PARAM_set_ip_asc()`, and call `X509_VERIFY_PARAM_set1_host()` only if the former fails.\n\n## Steps To Reproduce:\n\n  1. Generate a new certificate request, for example with the [`genkey` utility](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/ch-web_servers#s3-apache-mod_ssl-genkey), specifying the server's IPv4 or IPv6 address on the command line / in the Common Name field. (My `genkey` is from `crypto-utils-2.4.1-42.el7.x86_64`.)\n  1. Sign the certificate request with a local CA such that `curl` trust the local CA.\n  1. Configure Apache's `mod_ssl` such that it listen on the IPv4 or IPv6 address in question.\n  1. Fetch an URI with curl from the web server, using the `https` scheme, and the IP address.\n  1. Curl accepts the certificate.\n\n## Supporting Material/References:\nThis issue with curl popped up while discussing the edk2 patch series mitigating CVE-2019-14553:\n\nhttps://bugzilla.tianocore.org/show_bug.cgi?id=960\nhttp://mid.mail-archive.com/20190927034441.3096-1-Jiaxin.wu@intel.com\n\n## Impact\n\nI'm not sure this problem can be used for an *attack*. It's just that string representations of IP addresses are not unique. URL to Subject Name matching should use canonical representations only.",
  "weakness": {
    "id": 28,
    "name": "Improper Certificate Validation"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 0,
  "voters": [],
  "structured_scope": {
    "databaseId": 18844,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/curl/curl",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
