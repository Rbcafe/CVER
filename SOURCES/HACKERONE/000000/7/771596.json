{
  "id": 771596,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NzE1OTY=",
  "url": "https://hackerone.com/reports/771596",
  "title": "CRLF Injection in legacy url API (url.parse().hostname)",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "medium",
  "readable_substate": "Informative",
  "created_at": "2020-01-10T12:07:06.310Z",
  "submitted_at": "2020-01-10T12:07:06.310Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "vavkamil",
    "url": "/vavkamil",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/069/616/003619f9ca0b0b3d11a238bb540d86b9b22d5b5c_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 22984,
    "url": "https://hackerone.com/nodejs",
    "handle": "nodejs",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js",
      "twitter_handle": "nodejs",
      "website": "https://nodejs.org",
      "about": "The Node.js JavaScript Runtime"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-01-10T17:55:53.774Z",
  "bug_reporter_agreed_on_going_public_at": "2020-01-10T17:55:53.693Z",
  "team_member_agreed_on_going_public_at": "2020-01-10T17:51:45.981Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Summary:**\n\nThere is CRLF Injection in legacy `url.hostname()` API.\n\n**Description:**\n\nDuring the recent penetration test, I have found a whitelist bypass using CRLF Injection. We did a code review and determined the issue is in a legacy url.hostname() API. Not sure if it's a known issue or not, I wasn't able to find any report related to `url.hostname()`.\n\n## Steps To Reproduce:\n\n```\npoc_url = \"http://test1.com\\n\\rtest2.com\"\n\nconst url = require('url');\nconsole.log(\"Vulnerable: \", url.parse(poc_url).hostname)\n\nconsole.log(\"\\n\")\n\nconst myURL = new URL(poc_url);\nconsole.log(\"Not Vulnerable: \", myURL.hostname)\n```\n\nNot exactly sure where is the problem, but probably in here:\n`https://github.com/nodejs/node/blob/master/lib/url.js#L298-L340`\n\n## Impact:\n\nEven if it's legacy code, there still might be a lot of projects and codebases relying on it. As mentioned in the description, I was able to bypass a whitelist function during the recent penetration test and exploit a medium/high vulnerability thanks to it.\n\n## Supporting Material/References:\n\nPoc:\n```\npoc_url = \"http://test1.com\\n\\rtest2.com\"\n\nconst url = require('url');\nconsole.log(\"Vulnerable: \", url.parse(poc_url).hostname)\n\nconsole.log(\"\\n\")\n\nconst myURL = new URL(poc_url);\nconsole.log(\"Not Vulnerable: \", myURL.hostname)\n```\n\nOutput:\n```\nVulnerable:  test1.com\n\nNot Vulnerable:  test1.comtest2.com\n```\n\n## Impact\n\nWhitelist function can use url.parse(\"https://example.com\").hostname to check for allowed hostnames. It can be easily bypassed using CRLF injection and it can lead to whitelist bypass and compromise of the website.",
  "weakness": {
    "id": 69,
    "name": "CRLF Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 2,
  "voters": [
    "premium101",
    "mehrshad232"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 666,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "https://github.com/nodejs/node",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
