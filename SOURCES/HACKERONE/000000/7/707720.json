{
  "id": 707720,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MDc3MjA=",
  "url": "https://hackerone.com/reports/707720",
  "title": "Stored XSS vulnerability in comments on *.wordpress.com",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-10-04T14:16:55.763Z",
  "submitted_at": "2019-10-04T14:16:55.763Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "poutine_hero",
    "url": "/poutine_hero",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/006/643/03de1f85bf80f7b97132e8411ec5b5a9940d1067_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 111,
    "url": "https://hackerone.com/automattic",
    "handle": "automattic",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Automattic",
      "twitter_handle": "",
      "website": "https://automattic.com",
      "about": "WordPress.com, Jetpack, Texts, Akismet, Gravatar, WooCommerce, Crowdsignal, Tumblr and more!"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2019-10-21T14:58:56.152Z",
  "bug_reporter_agreed_on_going_public_at": "2019-10-10T17:03:57.946Z",
  "team_member_agreed_on_going_public_at": "2019-10-21T14:58:56.071Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "## Summary:\n\nThe SyntaxHighlighter plugin used in the comments section of *.wordpress.com sites is vulnerable to stored XSS via a crafted payload.\n\n## Platform(s) Affected:\n\n*.wordpress.com\n\nSyntaxHighlighter is also an open source plugin which is affected by this vulnerability:\n\nhttps://wordpress.org/plugins/syntaxhighlighter/\n\nAutomattic is listed as a developer/contributor to this plugin, so I'm hoping that this is the right place to pass along this vulnerability report in order to get a fix implemented within the plugin as well. Please let me know if it is not.\n\n## Proof of Concept:\n\n\t[code]javascript://%0dalert%28document.cookie%29[/code]\n\nThis creates a link with the `javascript:` pseudo-protocol that can be used to execute arbitrary JavaScript when clicked. The vulnerability is actually with the regular expression used to match and auto-link URLs within the code block:\n\n\t/\\w+:\\/\\/[\\w-.\\/?%&=:@;#]*/g\n\nIn the version of SyntaxHighlighter that comes bundled in the open-source plugin, the regex is:\n\n\t/&lt;\\w+:\\/\\/[\\w-.\\/?%&=@:;]*&gt;|\\w+:\\/\\/[\\w-.\\/?%&=@:;]*/g\n\nThe `\\w+` character class part of `\\w+:\\/\\/` is too loose IMO. I would recommend modifying the regex to match a whitelist of protocols similar to what KSES does within WordPress, or disable auto-linking within SyntaxHighlighter.\n\n## Steps To Reproduce:\n\n1. Visit https://mattstestsite128160580.wordpress.com/2019/10/03/test-post/ in Firefox or Chrome.\n1. Submit `[code]javascript://%0dalert%28document.cookie%29[/code]` as a comment.\n1. Click the `javascript://` portion of the rendered highlighted code.\n\n## Impact\n\nThe attacker can execute arbitrary JavaScript as the victim user's account with the security context of the <site>.wordpress.com domain.",
  "weakness": {
    "id": 62,
    "name": "Cross-site Scripting (XSS) - Stored"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-11-09T17:03:58.009Z",
  "allow_singular_disclosure_after": -134511905.0044364,
  "singular_disclosure_allowed": true,
  "vote_count": 114,
  "voters": [
    "poutine_hero",
    "sameerphad72",
    "v0lck3r",
    "sh1yo",
    "spam404",
    "dhakal_ananda",
    "mik317",
    "exag0ra",
    "sudi",
    "ronr",
    "and 104 more..."
  ],
  "severity": {
    "rating": "medium",
    "score": 4.7,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "none",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "low",
      "integrity": "none",
      "availability": "none"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
