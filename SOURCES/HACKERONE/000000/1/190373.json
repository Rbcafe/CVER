{
  "id": 190373,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTAzNzM=",
  "url": "https://hackerone.com/reports/190373",
  "title": "Gratipay uses the random module's cryptographically insecure PRNG.",
  "state": "Closed",
  "substate": "informative",
  "severity_rating": "none",
  "readable_substate": "Informative",
  "created_at": "2016-12-11T15:49:45.330Z",
  "submitted_at": "2016-12-11T15:49:45.330Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "edoverflow",
    "url": "/edoverflow",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1868,
    "url": "https://hackerone.com/gratipay",
    "handle": "gratipay",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/868/a75c6649c5b4671b3cf44160af884a7da9fd0b67_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/868/a75c6649c5b4671b3cf44160af884a7da9fd0b67_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Gratipay",
      "twitter_handle": "Gratipay",
      "website": "https://gratipay.com/",
      "about": "Gratitude? Gratipay! The easiest way for your company to pay for open source."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-12-12T17:07:22.677Z",
  "bug_reporter_agreed_on_going_public_at": "2016-12-12T17:07:22.645Z",
  "team_member_agreed_on_going_public_at": "2016-12-12T14:32:27.797Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Dear Gratipay bug bounty team,\n\n# Summary\n---\n\nGratipay currently uses the [random](https://docs.python.org/dev/library/random.html) module's pseudo-random number generator which is not a cryptographically secure PRNG as stated in the docs:\n\n> The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the secrets module.\n\nThe PRNG is implemented in `crypto.py` as follows:\n\n~~~\ntry:                                # use the system PRNG if possible\n    random = random.SystemRandom()\n    using_sysrandom = True\nexcept NotImplementedError:         # fall back\n    import warnings\n    warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n    using_sysrandom = False\n~~~\n\nLink: https://github.com/gratipay/gratipay.com/blob/master/gratipay/security/crypto.py#L17\n\n# Why does this vulnerability exist?\n---\n\nA PRNG is an algorithm used to produce random-looking numbers with certain desirable statistical properties. In order for a PRNG to be cryptographically secure it must be resistant to prediction.\n\nThe random module uses the [Mersenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister) by default, which is designed for simulation (Monte-Carlo simulation) and modelling, and is therefore not suitable for cryptographic purposes. Interestingly Gratipay's current fallback from the `random` module is in fact the Mersenne Twister:\n\n~~~\n warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n~~~\n\n# How can this be fixed?\n---\n\nI recommend using the [secrets](https://docs.python.org/dev/library/secrets.html#secrets.SystemRandom) module's PRNG as follows:\n\n~~~\nrandom = secrets.SystemRandom()\n~~~\n\nFor more on `Insecure Randomness` please refer to the OWASP page here: https://www.owasp.org/index.php/Insecure_Randomness\n\nYours sincerely,\nEd",
  "weakness": {
    "id": 32,
    "name": "Cryptographic Issues - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 5,
  "voters": [
    "logicmap",
    "khizer47",
    "hacklad",
    "spetr0x",
    "nosas"
  ],
  "severity": {
    "rating": "none",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
