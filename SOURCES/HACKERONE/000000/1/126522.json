{
  "id": 126522,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMjY1MjI=",
  "url": "https://hackerone.com/reports/126522",
  "title": "Incorrect param parsing in Digits web authentication",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-03-28T16:57:50.738Z",
  "submitted_at": "2016-03-28T16:57:50.738Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "filedescriptor",
    "url": "/filedescriptor",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 61,
    "url": "https://hackerone.com/x",
    "handle": "x",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "X (Formerly Twitter)",
      "twitter_handle": "XSecurity",
      "website": "https://x.com",
      "about": "X helps you create and share ideas and information instantly, without barriers."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2018-08-18T05:57:12.114Z",
  "bug_reporter_agreed_on_going_public_at": "2018-08-16T05:57:17.497Z",
  "team_member_agreed_on_going_public_at": "2018-08-18T05:57:11.979Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\nI would like to report an issue on Digits web authentication which allows attackers to retrieve the OAuth credential data of an application victims authorized.\n\n#Detail\nDigits web authentication has strict validation on *host* and *callback_url*. On the server side, the values are compared with the registered domain. However, on the client side, the way parameters are parsed has a wrong assumption. Specifically, \nin https://cdn.digits.com/45ed91c4cf9b6bb7465c27574b16910df8a86d2e_1458327827406/javascripts/popup.js\n\n```javascript\n              return window.location.search.slice(1).split(\"&\").forEach(function(e) {\n                    var n = e.split(\"=\");\n                    t[n[0]] = window.unescape(n[1])\n                })\n```\n\nThe above code snippet is responsible to convert query string into parameters, which assumes that the param delimiter has to be ampersand (&). In fact, the server side also accepts semi-colon (;) as param delimiter. For example:\n> https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE;host=https%3A%2F%2Fwww.periscope.tv\n\nis the same as \n\n> https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&host=https%3A%2F%2Fwww.periscope.tv\n\nThis creates a problem because from the server's perspective, ```a=b;c=d``` is two different parameters *a* and *c*, while the client thinks there is only one parameter *a* with value *b;c=d*. Attacker can evade the validation by append `;@attacker.com` in the corresponding param. Such bypass looks like this:\n\n> https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&host=https%3A%2F%2Fwww.periscope.tv;@attacker.com\n\nThe server side thinks the  *host* parameter is ```https://www.periscope.tv```, while for client side it is ```https://www.periscope.tv;@attacker.com```.\n\nThe funky URL in browser perspective looks like this:\n\n```\nhttps://www.periscope.tv;@attacker.com\n--------\\    authority   /\\ hostname /\n```\n\nTherefore attacker successfully control the destination domain to his/her controlled site.\n\n#PoC\n1. Prepare a Periscope account which is associated with a phone number\n2. Login to Periscope using the phone number with digits web login flow: https://innerht.ml/pocs/digits-validation-bypass/\n3. After that your account will be renamed as \"Pwn3d\"\n\n#Fix\nIn addition to ampersand, also treat semi-colon as param delimiter. A sample patch would be to change\n```javascript\nwindow.location.search.slice(1).split(\"&\")\n```\nto\n```javascript\nwindow.location.search.slice(1).split(/[&;]/)\n```",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2018-09-15T05:57:17.605Z",
  "allow_singular_disclosure_after": -170834830.91887674,
  "singular_disclosure_allowed": true,
  "vote_count": 122,
  "voters": [
    "motionflex",
    "libcontainer",
    "jokebookservice1",
    "niklasb",
    "n1m0",
    "foobar7",
    "ramsexy",
    "mashoud1122",
    "stillwater",
    "bogdantcaciuc",
    "and 112 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
