{
  "id": 117480,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTc0ODA=",
  "url": "https://hackerone.com/reports/117480",
  "title": "Stored XSS via Angular Expression injection on developer.zendesk.com",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-02-19T18:25:48.676Z",
  "submitted_at": "2016-02-19T18:25:48.676Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "albinowax",
    "url": "/albinowax",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/056/414/9d843d496965d8c0e710de3867a41720c1577dc4_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 205,
    "url": "https://hackerone.com/zendesk",
    "handle": "zendesk",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/205/1f7838d9b4201d122e0a7fbacc8ff3e90f57fa0c_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/205/1f7838d9b4201d122e0a7fbacc8ff3e90f57fa0c_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Zendesk",
      "twitter_handle": "",
      "website": "https://www.zendesk.com",
      "about": "Zendesk is a leading cloud-based customer service software solution. Over 100,000 customer accounts use Zendesk to increase customer satisfaction."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-06-01T21:15:09.461Z",
  "bug_reporter_agreed_on_going_public_at": "2016-05-28T12:32:06.476Z",
  "team_member_agreed_on_going_public_at": "2016-06-01T21:15:09.350Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "developer.zendesk.com is vulnerable to stored XSS via Angular template injection.\n\nTo replicate:\nBrowse to https://developer.zendesk.com\nSign up with an arbitrary email address and the following name: \"{{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}}\"\nObserve the popup. \n\nThis is a stored vulnerability - every time that user views https://developer.zendesk.com/account it will hit them.\n\nThis is not self-xss - it's possible to exploit other users by using the intentional XSS on freetrial.zendesk.com to inject a cookie into other users' browsers, forcibly logging them into my account. \n\n\nClient-side template injection vulnerabilities arise when applications using a client-side template framework dynamically embed user input in web pages. When a web page is rendered, the framework will scan the page for template expressions, and execute any that it encounters. An attacker can exploit this by supplying a malicious template expression that launches a cross-site scripting (XSS) attack.\n\nIf possible, avoid using server-side code to dynamically embed user input into client-side templates. You can prevent angular from executing expressions in blocks of HTML by using the ng-non-bindable directive: https://docs.angularjs.org/api/ng/directive/ngNonBindable If this is not practical, consider filtering out { and } from user input. Upgrading to Angular 1.5 will prevent this particular sandbox escape from working, but is not a robust fix as Angular maintain that the sandbox isn't a security feature and can't be trusted - see https://sites.google.com/site/bughunteruniversity/nonvuln/angularjs-expression-sandbox-bypass\n\nPlease refer to http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html for further information on this technique.",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 74379,
      "file_name": "zendesk_storedxss.PNG",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/074/379/d78b87a3f12340178e9a65d68f62ac8ad966aa94/zendesk_storedxss.PNG?response-content-disposition=attachment%3B%20filename%3D%22zendesk_storedxss.PNG%22%3B%20filename%2A%3DUTF-8%27%27zendesk_storedxss.PNG&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2ILJLE6S%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T115852Z&X-Amz-Expires=3470&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDJPm2BocKwYVHq6OvXN7Sjam7eo%2BSIxzA09VW0AVbp2gIhAJSEEdx%2Bwdp3lk64VEqNkIYIhXx%2FxKFpBdSyuvKn3uDQKrIFCHAQAxoMMDEzNjE5Mjc0ODQ5IgwDahPqWWM9RqpHhfIqjwWks8v1jlby6TsImaMYsudHHbH1Wx6QSFFy8DYbsq4sdNBOEyl9ATKaXjCK28W3pUZj7TyOZVii2jhReFgA81tdYD5PFfaf5uIAxYqN97CUjE9tYuC42DG8AfHfqoUrQSIYfsELneF%2FrwPpYOjej6pbEuJZgC5M%2FMSNXxJ9AkJT8ulcJ7ug2u26Vej6laJdmacOPyHhTSDRKqZ8bmU2qZkHjpllBjac8S0jwAJ%2FXOU29NjYq0HDmzg%2FtCQVuok6OwzgDb5hbqWacuN1sxtQGmO9mkyNT4Jw9z%2F%2FM2jKe5Ofp7a%2BsW7M29sPZWBmYpMpm8g2vSNBkxTCySmUy56WR33dkSWPoBYsFBFRxV0i7fuZNan6wwqSXVqlsDGcF4MC3juEMfOmDXorpSY3GLJ%2FVwB%2Fj80Xv6a%2Bp7E%2Bz60vHuZPKRdWwdUIM1%2FbZuj9lLL0UDjQ8xpD%2Bn0FK1fiDxHk1SpOsDjzEP1WahBgmwofMy3D1wpHA5KqDWaKaVFS70XROakujpAfdyfQE5PP6LUnATbGHMnn1bUwhuc0l2VVsshmhKcQ3B5C%2Br3sjG3Hmc9awv6w5zgQBLzR5VleYsLEogGPGtoOncfnHncG8bFUQeNJ22mQ5IuXzbJgMrGIr0P2mvs9lAWFZg6lDLV4JH5vHDviIh7FgcYJUEIkC%2FASSSfJ4S%2F1zmeydCzaoMWM1qaEMyyUrSw34Rs%2FNYdwqtXkMGgT8i40ddZ1ExgLoiuYapUfOH5SmgiRbbREJwXv%2FHCtjdpSUHP9m9syQLajUPFrc65NAq0WB5qVPRHnYKkJmfEG1uUTPQG95vZJq9AQRivJGj4HDlBYWgll%2B9E5Nd9B68J7QKUpyIIN7ophw%2FbOBQN8MMaXrK4GOrABPy7xOWyZjlcC8oDrt3gIH%2BpFpbBCNRA1BmLMfIgaiBMP5w4F8eLFwLZvlKhnztuddGA6O4Uh8OLKOQ2aMk5lW1Xis4FfdDyGJM6fgZBIafAGSXYrAN8T%2FOBBirnmKH3TipDF3gxk1HBgavZXNceHqfYGjmJlFOMF6p%2B60lxNvCERqm7z1BwOfKyvtKJeK4bvct0t59UMTMS%2FtySInE4heSVeslW4qBd%2FQRC4aXxUgJY%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b0f1d4d1bf58b93fe81608dd049fa71383c0139921171080fb6b0edf15687d22",
      "file_size": 173338,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 8,
  "voters": [
    "albinowax",
    "spam404",
    "snoopy101",
    "greensec",
    "0xm1racle",
    "spetr0x",
    "911",
    "dyabla"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
