{
  "id": 183696,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODM2OTY=",
  "url": "https://hackerone.com/reports/183696",
  "title": "Invalid memory access while freeing memory, caused by invalid type passed to mrb_ary_unshift",
  "state": "Closed",
  "substate": "duplicate",
  "readable_substate": "Duplicate",
  "created_at": "2016-11-21T04:57:52.137Z",
  "submitted_at": "2016-11-21T04:57:52.137Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "haquaman",
    "url": "/haquaman",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/017/646/07cbfc394d4d3432eb95cf9735f225ea803090bb_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 15668,
    "url": "https://hackerone.com/shopify-scripts",
    "handle": "shopify-scripts",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "paused",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "shopify-scripts",
      "twitter_handle": "",
      "website": "",
      "about": ""
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-12-17T20:51:10.069Z",
  "bug_reporter_agreed_on_going_public_at": "2016-12-17T20:16:27.760Z",
  "team_member_agreed_on_going_public_at": "2016-12-17T20:51:10.024Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\n\nPhew, this was a tricky one as the cause wasn't next door to where the dereference happened!\n\nThe file causing this is:\n```\na *case\n  when nil\n  redo\nend\n```\n\n```\n$ ./dev/bin/mruby --version\nmruby 1.2.0 (2015-11-17)\n```\n\n```\n$ ./dev/bin/mruby crash.rb\ncrash.rb:1:3: '*' interpreted as argument prefix\ntrace:\n        [0] crash.rb:3\ncrash.rb:3: undefined method 'a' for main (NoMethodError)\nSegmentation fault: 11\n```\n\n```\n(lldb) target create \"./dev/bin/mruby\"\nCurrent executable set to './dev/bin/mruby' (x86_64).\n(lldb) settings set -- target.run-args  \"crash.rb\"\n(lldb) r\nProcess 47144 launched: './dev/bin/mruby' (x86_64)\ncrash.rb:1:3: '*' interpreted as argument prefix\ntrace:\n\t[0] crash.rb:3\ncrash.rb:3: undefined method 'a' for main (NoMethodError)\nProcess 47144 stopped\n* thread #1: tid = 0x5aab878, 0x0000000100037533 mruby`kh_destroy_iv + 35, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x19)\n    frame #0: 0x0000000100037533 mruby`kh_destroy_iv + 35\nmruby`kh_destroy_iv:\n->  0x100037533 <+35>: movq   0x18(%rax), %rax\n    0x100037537 <+39>: movq   %rax, %rsi\n    0x10003753a <+42>: callq  0x100017740               ; mrb_free\n    0x10003753f <+47>: movq   -0x8(%rbp), %rdi\n(lldb) bt\n* thread #1: tid = 0x5aab878, 0x0000000100037533 mruby`kh_destroy_iv + 35, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x19)\n  * frame #0: 0x0000000100037533 mruby`kh_destroy_iv + 35\n    frame #1: 0x0000000100037d9d mruby`iv_free + 29\n    frame #2: 0x0000000100037e90 mruby`mrb_gc_free_iv + 48\n    frame #3: 0x0000000100017a76 mruby`obj_free + 86\n    frame #4: 0x00000001000179e7 mruby`free_heap + 135\n    frame #5: 0x0000000100017dfd mruby`mrb_gc_destroy + 29\n    frame #6: 0x000000010002b2a2 mruby`mrb_close + 210\n    frame #7: 0x0000000100001475 mruby`cleanup + 133\n    frame #8: 0x0000000100000e6b mruby`main + 1147\n    frame #9: 0x00007fff8a9db5ad libdyld.dylib`start + 1\n    frame #10: 0x00007fff8a9db5ad libdyld.dylib`start + 1\n(lldb register read\nGeneral Purpose Registers:\n       rax = 0x0000000000000001\n       rbx = 0x0000000000000000\n       rcx = 0x0000000000000006\n       rdx = 0x0000000100017a66  mruby`obj_free + 70\n       rdi = 0x0000000100300390\n       rsi = 0x0000000000000001\n       rbp = 0x00007fff5fbfd870\n       rsp = 0x00007fff5fbfd860\n        r8 = 0x000000000000000d\n        r9 = 0x000000010030f950\n       r10 = 0x00000000013292e2\n       r11 = 0x0000000100300000\n       r12 = 0x0000000000000000\n       r13 = 0x0000000000000000\n       r14 = 0x0000000000000000\n       r15 = 0x0000000000000000\n       rip = 0x0000000100037533  mruby`kh_destroy_iv + 35\n    rflags = 0x0000000000010202\n        cs = 0x000000000000002b\n        fs = 0x0000000000000000\n        gs = 0x0000000000000000\n\n(lldb) q\nQuitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y\n```\n\nThe cause for this was that a non-array type was getting passed to `mrb_ary_unshift`, which then treated it like an `RArray` struct, and incremented the `len`, which accidentally incremented the `iv` field on the `RObject` struct it actually was. This was then used when trying to free the object in `mrb_gc_free_iv`, which just checks `if (obj->iv)` (`src/variable.c:435`), which is true (it is `0x01`), so calls `iv_free` (`src/variable.c:385`), which dereferences the table which is an invalid memory address of `0x01`.\n\nTo show this in action, here is a gdb output with symbols (on a different system). I started the program and ran til the crash, then went up the stack until we could see the parent `obj` struct, then set a watchpoint on the `iv` field. Restarted, then continued until the `iv` field was set to `0x0` again, then set a breakpoint for `mrb_ary_unshift`. Stepped through until the `a` variable wasn't \"optimized out\" (happens on my fuzzing box due to setup), and then set a watchpoint on `a->len`, then continued. It stops showing both the `iv` and the `len` value changes to 1 at the same time showing the bug.\n\n```\n$ gdb --args ./bin/mruby crash.rb\nGNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1\nCopyright (C) 2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./bin/mruby...done.\n(gdb) r\nStarting program: /root/mruby-fixes/bin/mruby crash.rb\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\ncrash.rb:1:3: '*' interpreted as argument prefix\ntrace:\n        [0] crash.rb:3\ncrash.rb:3: undefined method 'a' for main (NoMethodError)\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000004cd59c in kh_destroy_iv (h=0x1, mrb=0x602e0001fc60)\n    at /root/mruby-fixes/src/variable.c:292\n292     KHASH_DEFINE(iv, mrb_sym, mrb_value, TRUE, kh_int_hash_func, kh_int_hash_equal)\n(gdb) up\n#1  iv_free (t=0x1, mrb=0x602e0001fc60) at /root/mruby-fixes/src/variable.c:387\n387       kh_destroy(iv, mrb, &t->h);\n(gdb)\n#2  mrb_gc_free_iv (mrb=0x602e0001fc60, obj=0x609a00007870)\n    at /root/mruby-fixes/src/variable.c:436\n436         iv_free(mrb, obj->iv);\n(gdb) watch -location obj->iv\nHardware watchpoint 1: -location obj->iv\n(gdb) r\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\n\nStarting program: /root/mruby-fixes/bin/mruby crash.rb\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nHardware watchpoint 1: -location obj->iv\n\nOld value = <unreadable>\nNew value = (struct iv_tbl *) 0x0\nmemset () at ../sysdeps/x86_64/memset.S:94\n94      ../sysdeps/x86_64/memset.S: No such file or directory.\n(gdb) c\nContinuing.\nHardware watchpoint 1: -location obj->iv\n\nOld value = (struct iv_tbl *) 0x0\nNew value = (struct iv_tbl *) 0x609a00007840\nadd_heap (gc=0x602e0001fd38, mrb=0x609a00000400) at /root/mruby-fixes/src/gc.c:328\n328       for (p = objects(page), e=p+MRB_HEAP_PAGE_SIZE; p<e; p++) {\n(gdb) c\nContinuing.\nHardware watchpoint 1: -location obj->iv\n\nOld value = (struct iv_tbl *) 0x609a00007840\nNew value = (struct iv_tbl *) 0x0\nmrb_obj_alloc (mrb=mrb@entry=0x602e0001fc60, ttype=ttype@entry=MRB_TT_OBJECT,\n    cls=0x609a0000c3d0) at /root/mruby-fixes/src/gc.c:500\n500       *(RVALUE *)p = RVALUE_zero;\n(gdb) break mrb_ary_unshift\nBreakpoint 2 at 0x41e000: file /root/mruby-fixes/src/array.c, line 485.\n(gdb) c\nContinuing.\ncrash.rb:1:3: '*' interpreted as argument prefix\n\nBreakpoint 2, mrb_ary_unshift (mrb=mrb@entry=0x602e0001fc60, self=..., item=...)\n    at /root/mruby-fixes/src/array.c:485\n485     {\n(gdb) n\n<snip while getting to a point where a isn't \"optimized out\">\nmrb_ary_unshift (mrb=mrb@entry=0x602e0001fc60, self=..., item=...)\n    at /root/mruby-fixes/src/array.c:496\n496         if (a->aux.capa < a->len + 1)\n(gdb) p *a\n$1 = {tt = MRB_TT_OBJECT, color = 1, flags = 0, c = 0x609a00007840,\n  gcnext = 0x609a0000c3d0, len = 0, aux = {capa = 0, shared = 0x0}, ptr = 0x0}\n(gdb) watch -location a->len\nHardware watchpoint 3: -location a->len\n(gdb) c\nContinuing.\nHardware watchpoint 1: -location obj->iv\n\nOld value = (struct iv_tbl *) 0x0\nNew value = (struct iv_tbl *) 0x1\nHardware watchpoint 3: -location a->len\n\nOld value = 0\nNew value = 1\nmrb_ary_unshift (mrb=mrb@entry=0x602e0001fc60, self=..., item=...)\n    at /root/mruby-fixes/src/array.c:502\n502       mrb_field_write_barrier_value(mrb, (struct RBasic*)a, item);\n(gdb) d br\nDelete all breakpoints? (y or n) y\n(gdb) c\nContinuing.\ntrace:\n        [0] crash.rb:3\ncrash.rb:3: undefined method 'a' for main (NoMethodError)\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000004cd59c in kh_destroy_iv (h=0x1, mrb=0x602e0001fc60)\n    at /root/mruby-fixes/src/variable.c:292\n292     KHASH_DEFINE(iv, mrb_sym, mrb_value, TRUE, kh_int_hash_func, kh_int_hash_equal)\n(gdb) q\nA debugging session is active.\n\n        Inferior 1 [process 31010] will be killed.\n\nQuit anyway? (y or n) y\n\n```\n\nA fix for this would be similar as follows:\n\n```\ndiff --git a/src/array.c b/src/array.c\nindex 838f6e4..bd44c7f 100644\n--- a/src/array.c\n+++ b/src/array.c\n@@ -483,6 +483,11 @@ mrb_ary_shift(mrb_state *mrb, mrb_value self)\n MRB_API mrb_value\n mrb_ary_unshift(mrb_state *mrb, mrb_value self, mrb_value item)\n {\n+  if (!mrb_array_p(self)) {\n+    mrb_raisef(mrb, E_TYPE_ERROR, \"expecting Array, got %S\", mrb_obj_value(mrb_obj_class(mrb, self)));\n+    return mrb_nil_value();\n+  }\n+\n   struct RArray *a = mrb_ary_ptr(self);\n \n   if (ARY_SHARED_P(a)\n```\n\nAs mentioned above, this affects mruby-engine:\n\n```\n./bin/sandbox:20:in `sandbox_eval': undefined method 'a' for main (MRubyEngine::EngineRuntimeError)\n\tfrom ./bin/sandbox:20:in `<main>'\n./bin/sandbox: [BUG] Segmentation fault at 0x00000000000019\nruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]\n\n-- Crash Report log information --------------------------------------------\n   See Crash Report log file under the one of following:\n     * ~/Library/Logs/CrashReporter\n     * /Library/Logs/CrashReporter\n     * ~/Library/Logs/DiagnosticReports\n     * /Library/Logs/DiagnosticReports\n   for more details.\nDon't forget to include the above Crash Report log file in bug reports.\n\n-- Control frame information -----------------------------------------------\nc:0001 p:0000 s:0002 E:0013d0 (none) [FINISH]\n\n\n-- Machine register context ------------------------------------------------\n rax: 0x0000000000000108 rbx: 0x0000000000000001 rcx: 0x00000001017eca32\n rdx: 0x00000001017ecbe0 rdi: 0x00000001018fc440 rsi: 0x0000000101903d30\n rbp: 0x00007fff5ed50660 rsp: 0x00007fff5ed50650  r8: 0x0000000101929e70\n  r9: 0x000000010191cad0 r10: 0x000000010191c830 r11: 0x00007fd4ad300000\n r12: 0x0000000101903d30 r13: 0x0000000000000000 r14: 0x00000001018fc440\n r15: 0x00000001018fc920 rip: 0x00000001018034f3 rfl: 0x0000000000010202\n\n-- C level backtrace information -------------------------------------------\n0   ruby                                0x000000010104c5d4 rb_vm_bugreport + 388\n1   ruby                                0x0000000100eee023 rb_bug_context + 483\n2   ruby                                0x0000000100fc1653 sigsegv + 83\n3   libsystem_platform.dylib            0x00007fff9826d52a _sigtramp + 26\n4   mruby_engine.bundle                 0x00000001018034f3 mrb_gc_free_iv + 19\n5   ???                                 0x0000000101903d30 0x0 + 4321197360\n\n-- Other runtime information -----------------------------------------------\n\n* Loaded script: ./bin/sandbox\n\n* Loaded features:\n\n    0 enumerator.so\n    1 thread.rb\n    2 rational.so\n    3 complex.so\n<snip various gems>\n  185 /Users/<snip>/mruby-engine/lib/mruby_engine/mruby_engine.bundle\n  186 /Users/<snip>/mruby-engine/lib/mruby_engine.rb\n\n[NOTE]\nYou may have encountered a bug in the Ruby interpreter or extension libraries.\nBug reports are welcome.\nFor details: http://www.ruby-lang.org/bugreport.html\n\n```\n\nApplying the patch above to `ext/mruby_engine/mruby` and recompiling fixes the issue.\n\n```\n$ ./bin/mruby ../crash.rb\n../crash.rb:1:3: '*' interpreted as argument prefix\ntrace:\n        [0] ../crash.rb:3\nTypeError: expecting Array, got Object\n```\n\n```\n$ ./bin/sandbox crash.rb\n./bin/sandbox:20:in `sandbox_eval': expecting Array, got Object (MRubyEngine::EngineRuntimeError)\n        from ./bin/sandbox:20:in `<main>'\n```\n\nCheers,\n\nHugh",
  "weakness": {
    "id": 48,
    "name": "Denial of Service"
  },
  "original_report_id": 181232,
  "original_report_url": "https://hackerone.com/reports/181232",
  "attachments": [],
  "allow_singular_disclosure_at": null,
  "vote_count": 2,
  "voters": [
    "eveeez",
    "spetr0x"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
