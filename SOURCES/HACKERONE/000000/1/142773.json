{
  "id": 142773,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDI3NzM=",
  "url": "https://hackerone.com/reports/142773",
  "title": "16 instances where return value of OpenSSL i2d_RSAPublicKey is discarded -- might lead to use of uninitialized memory",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-06-02T23:53:52.293Z",
  "submitted_at": "2016-06-02T23:53:52.293Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "guido",
    "url": "/guido",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1800,
    "url": "https://hackerone.com/torproject",
    "handle": "torproject",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Tor",
      "twitter_handle": "torproject",
      "website": "https://www.torproject.org/",
      "about": "Anonymity Online"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-11-26T13:13:02.150Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2017-10-27T13:12:57.523Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The following functions rely on OpenSSL i2d_RSAPublicKey and do not heed its return value.\n\n```\nint crypto_pk_get_all_digests()\n    tor-0.2.7.6/src/common/tortls.c:775\n        if i2d_RSAPublicKey fails, cert->pkey_digests is all zeroes (cert was allocated with tor_malloc_zero)\nint crypto_pk_get_digest()\n    tor-0.2.7.6/src/or/connection_or.c:1686\n        if i2d_RSAPublicKey fails, digest_rcvd_out is left uninitialized XXX\n        (digest_rcvd_out is a stack-based buffer in connection_tls_finish_handshake and is never initialized)\n    tor-0.2.7.6/src/or/hibernate.c:552\n        if i2d_RSAPublicKey fails, digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendcommon.c:482\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendservice.c:2318\n        if i2d_RSAPublicKey fails, key_digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/router.c:201\n        if i2d_RSAPublicKey fails, server_identitykey_digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/router.c:859\n        if i2d_RSAPublicKey fails, v3_digest is all zeroes (it was initialized with memset) XXX\n    tor-0.2.7.6/src/or/router.c:1019\n        if i2d_RSAPublicKey fails, digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/routerkeys.c:1070\n        if i2d_RSAPublicKey fails, signed_data is left uninitialized XXX\n    tor-0.2.7.6/src/or/routerparse.c:5075\n        if i2d_RSAPublicKey fails, public_key_hash is left uninitialized XXX\nint crypto_pk_get_fingerprint()\n    tor-0.2.7.6/src/or/control.c:1737\n        if i2d_RSAPublicKey fails, answer is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1922\n        if i2d_RSAPublicKey fails, fingerprint is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1923\n        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1946\n        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized (or retains its previous data) XXX\nint rend_get_service_id()\n    tor-0.2.7.6/src/or/directory.c:2138\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendservice.c:3250\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n```\n\ni2d_RSA_PublicKey does a memory allocation internally and a shortage of allocatable memory will cause it to fail. Like I said in the other report, a repeatedly triggered memory leak by the attacker, or utilizing some way to allocate a large amount of memory, or a \"natural\" memory shortage on the system caused by another process using large amounts of memory could trigger this.\n\nHere is a proof of concept:\n\n```c\n#include <openssl/sha.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <openssl/rsa.h>\n\n#define tor_assert(x) {if (!(x)) { abort(); }}\n\nstruct crypto_pk_t\n{\n  int refs; /**< reference count, so we don't have to copy keys */\n  RSA *key; /**< The key itself */\n};\ntypedef struct crypto_pk_t crypto_pk_t;\nint\ncrypto_digest(char *digest, const char *m, size_t len)\n{\n  tor_assert(m);\n  tor_assert(digest);\n  return (SHA1((const unsigned char*)m,len,(unsigned char*)digest) == NULL);\n}\nint\ncrypto_pk_get_digest(const crypto_pk_t *pk, char *digest_out)\n{\n  unsigned char *buf = NULL;\n  int len;\n\n  len = i2d_RSAPublicKey((RSA*)pk->key, &buf);\n  if (len < 0 || buf == NULL)\n    return -1;\n  if (crypto_digest(digest_out, (char*)buf, len) < 0) {\n    OPENSSL_free(buf);\n    return -1;\n  }\n  OPENSSL_free(buf);\n  return 0;\n}\n\n#define DIGEST_LEN 20\nint main(void)\n{\n    char _digest[DIGEST_LEN];\n    char digest[] = \"uninitialized mem..\";\n\n    if ( sizeof(_digest) != sizeof(digest) )\n    {\n        return 0;\n    }\n    void* ptr = (void*)1;\n    int count = 0;\n    crypto_pk_t* pk = malloc(sizeof(crypto_pk_t));\n\n    pk->key = RSA_generate_key(1024, 3, 0, 0);\n\n    while ( ptr != 0 )\n    {\n        ptr = malloc(100);\n        count ++;\n    }\n\n    printf(\"allocated 100 * %d bytes\\n\", count);\n    printf(\"crypto_pk_digest returns: %d\\n\", crypto_pk_get_digest(pk, digest));\n\n    printf(\"digest is: %s\\n\", digest);\n    return 0;\n}\n```\n\nBefore you run this, you might want to run this command:\n\n```\nulimit -Sv 500000\n```\n\nso that process memory is limited to 500MB (so your whole system doesn't start lagging).\n\nIt should output something like this:\n\n```\nallocated 100 * 4477420 bytes\ncrypto_pk_digest returns: -1\ndigest is: uninitialized mem..\n```\n\nIn other words, ```digest``` is not touched by ```crypto_pk_digest()``` and retains it original value.\n\nGuido",
  "weakness": {
    "id": 18,
    "name": "Information Disclosure"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-11-26T13:12:57.605Z",
  "allow_singular_disclosure_after": -196124397.31529254,
  "singular_disclosure_allowed": true,
  "vote_count": 11,
  "voters": [
    "jensec",
    "sameerphad72",
    "fa1rlight",
    "edoverflow",
    "geeknik",
    "eveeez",
    "marwan",
    "b3nac",
    "cr4xerbik4sh",
    "japz",
    "and 1 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
