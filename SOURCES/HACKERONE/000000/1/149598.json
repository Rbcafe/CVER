{
  "id": 149598,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDk1OTg=",
  "url": "https://hackerone.com/reports/149598",
  "title": "Insecure 2FA/authentication implementation creates a brute force vulnerability",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-07-06T17:42:07.460Z",
  "submitted_at": "2016-07-06T17:42:07.460Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "yaworsk",
    "url": "/yaworsk",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/046/435/8321e52445321287eea5b5b3f4c9f6ea69e92bb5_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 264,
    "url": "https://hackerone.com/gitlab",
    "handle": "gitlab",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/f0hovtq73f9ap815a0r1w42bocp4/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "GitLab",
      "twitter_handle": "gitlab",
      "website": "https://about.gitlab.com",
      "about": "A single application for the entire software development lifecycle."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2016-10-28T15:22:28.163Z",
  "bug_reporter_agreed_on_going_public_at": "2016-10-28T15:21:34.174Z",
  "team_member_agreed_on_going_public_at": "2016-10-28T15:22:28.113Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi All,\nI believe I've found a vulnerability with regards to your user authentication and 2FA implementation but wasn't sure you'd be interested given the reference to \"rate limiting\" being out of scope so please bare with me. I also took a quick look at https://gitlab.com/gitlab-org/gitlab-ce/issues?utf8=%E2%9C%93&issue_search=two+factor and noticed there is no reference to this coming up.\n\n#Background Setup\nI've configured my own GitLab server on an AWS EC2 small instance. I'm not overly familiar with your platform so all my settings are default.\n\n#Description\n###2FA\nIn short, testing out your 2FA implementation, I noticed that there is limited protection against brute forcing. It appears the only protection is rate limiting and a time limited token from the Google authenticator app. With the time drift, a token is valid for 60 seconds.\n\nNow, that said, if an attacker knows a users password (I address guessing it below), they are able to begin a brute force attack to guess the token (please continue to bare with me). The reason I'm reporting in system design, specifically:\n\n- It appears that initially, an attacker can submit anywhere from 10 - 19 requests to validate a 2FA before rate limiting kicks in. This then stops the attacker for, what appears to be, 30 - 40 seconds (in some tests it was less). Then an attacker can submit the username and password and submit another 9 requests before rate limiting stops them again. While these numbers may be off slightly, for arguments sake, **let's say they can submit 20 request per valid token.**\n\n- Since tokens are 6 digits long, we have a 20 in 1,000,000 chance of being right (or 0.00002). So, on that note, if we made 5,000 attempts (of 20 guesses per minute) at the token, **we'd have a 9.5% chance of finding the right one at least once in 3.5 days (5,000 attempts = 5,000 minutes = 83.3 hours = 3.47 days).** 10,000 attempts would take approximately 7 days and yield an 18% chance (I used this calculator http://stattrek.com/online-calculator/binomial.aspx)\n\n- Compounding the issue, during the attacker, **a victim and admin get no notification / impact on service.** The victim can still log in and use their account while the attacker is guessing a valid token, no email is generated to indicate someone is attempting to compromise their account (at least in the 5 or 6 times I ran the test) and I couldn't find anything in the web based logs for the admin account. That said, because I'm not overly familiar with the platform and didn't run this for the full day, maybe I'm missing some notification system. If so, I apologize.\n\n###Password Guessing\nIn addition to the above, I noticed that there is also limited protection against guessing a password. After X number of attempts at guessing a password incorrectly, an account does become locked, an email sent to the victim and the attacker is never notified.\n\nBut, while the account is locked, if an attacker guesses a correct password, they are still redirected to the 2FA screen to confirm a token rather than being stopped. **So, while the account is locked, an attacker still is able to confirm a victim's password.**\n\n#Vulnerability\nI'm reporting because 2FA is the second line of defense for victims, especially in light of all the recent password compromises and continued password reuse by users. While this attack would take time, it is likely that once an attacker knows a victim's password, they will be able to bypass GitLab's 2FA implementation within days.\n\nBased on other systems I've tested, potential mitigations include:\n\n###2FA\n- Only allow 3 attempts at a token\n- After 3 different attempts at 3 different tokens, lock the user account and email the victim\n\n###Password Brute Forcing\n- Once an account is locked, do not validate the password of a user\n\nI hope this helps. Please let me know if you have any questions.\nPete",
  "weakness": {
    "id": 57,
    "name": "Violation of Secure Design Principles"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2016-11-27T15:21:34.245Z",
  "allow_singular_disclosure_after": -227566542.2496286,
  "singular_disclosure_allowed": true,
  "vote_count": 31,
  "voters": [
    "delimitry",
    "michiel",
    "ebrietas",
    "shubham_srt",
    "johndoe1492",
    "jimeno",
    "bugdiscloseguys",
    "xsam",
    "its_afolic",
    "mdv",
    "and 21 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
