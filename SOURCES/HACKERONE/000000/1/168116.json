{
  "id": 168116,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjgxMTY=",
  "url": "https://hackerone.com/reports/168116",
  "title": "Insufficient validation on Digits bridge",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-09-13T19:44:33.505Z",
  "submitted_at": "2016-09-13T19:44:33.505Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "filedescriptor",
    "url": "/filedescriptor",
    "profile_picture_urls": {
      "small": "/assets/avatars/default-25f7248a18bdf9e2dc8310319b148d66cff430fa0fade6c5f25fee1b8d7f27ed.png"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 61,
    "url": "https://hackerone.com/x",
    "handle": "x",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/ikx4ept298unt534kpz4am2bd4zs/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "X (Formerly Twitter)",
      "twitter_handle": "XSecurity",
      "website": "https://x.com",
      "about": "X helps you create and share ideas and information instantly, without barriers."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2020-08-20T11:20:39.071Z",
  "bug_reporter_agreed_on_going_public_at": "2020-07-21T11:20:38.963Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hi,\nI would like to report an issue in one of the login methods, [getLoginStatus()](https://docs.fabric.io/web/digits/sign-in-with-phone-number.html) in Digits, which allows attacker to retrieve the OAuth credential data of an application victims authorized.\n\n#Details\nThe *getLoginStatus()* method provides a seamless login option. If a user has logged in Digits, a website can use this method to get the user's OAuth credentials instead of asking him to authorize it. The way it works is to embed an iframe (https://www.digits.com/bridge) onto a web page, and communicate with the web page through *postMessage()*. Currently, there is a security check in place which prevents a website to call this method with other app's key by making sure the HTTP Referer is the registered domain. The protection works because embedding an iframe involves sending the *Referer* header in the request. If app A wants to call the method and pretend itself as app B, it won't work because the *Referer* header is from app A instead of the registered domain of app B.\n\nHowever, It was found that if the *Referer* header is left empty, the validation will also think this is valid. The problem is that there is a way for a website to disable sending *Referer* for out bound requests by using the tag `<meta name=\"referrer\" content=\"never\">`. This allows an attacker to bypass the validation.\n\n#PoC\n1. Prepare a Periscope account which is associated with a phone number, and make sure you have logged in Digits (https://www.digits.com/signin) with that number\n2. Go to http://innerht.ml/pocs/digits-bridge-referer-bypass\n3. Wait for a while\n4. You Periscope account will be renamed as \"Pwn3d\"\n\n#Fix\nInstead of validating HTTP Referer, using the app's registered domain as the *targetOrigin* in [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) is more reliable. That way, only the correct recipient can read the transferred data.",
  "weakness": {
    "id": 27,
    "name": "Improper Authentication - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2020-08-20T11:20:39.032Z",
  "allow_singular_disclosure_after": -109904573.65117545,
  "singular_disclosure_allowed": true,
  "vote_count": 251,
  "voters": [
    "ibrahim_0x",
    "shellnox",
    "proviesec",
    "ashbi",
    "oxecho",
    "th3hidd3nmist",
    "madinmars",
    "n1m0",
    "samengmg",
    "xploiterr",
    "and 241 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
