{
  "id": 170548,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzA1NDg=",
  "url": "https://hackerone.com/reports/170548",
  "title": "Ruby OpenSSL Library - IV Reuse in GCM Mode",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-09-19T21:05:58.161Z",
  "submitted_at": "2016-09-19T21:05:58.161Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "offftherecord",
    "url": "/offftherecord",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/717/bc24b05572e1595ff8d7e9f45761d4ffae0f6ad3_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 7724,
    "url": "https://hackerone.com/ruby",
    "handle": "ruby",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Ruby",
      "twitter_handle": "",
      "website": "https://www.ruby-lang.org",
      "about": "A Programmer's Best Friend"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2021-03-07T11:46:51.786Z",
  "bug_reporter_agreed_on_going_public_at": "2021-02-12T16:46:35.851Z",
  "team_member_agreed_on_going_public_at": "2021-03-07T11:46:51.640Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hello,\n\nAn IV reuse bug was discovered in Ruby's OpenSSL library when using\naes-gcm. When encrypting data with aes-*-gcm, if the IV is set before\nsetting the key, the cipher will default to using a static IV. This creates\na static nonce and since aes-gcm is a stream cipher, this can lead to known\ncryptographic issues.\n\nThe documentation does not appear to specify the order of operations when\nsetting the key and IV [1]. As an example, see the following insecure code\nsnippet below:\n\nVulnerable Code:\n```\ndef encrypt(plaintext)\n    cipher = OpenSSL::Cipher.new('aes-256-gcm')\n    iv = cipher.random_iv # Notice here the IV is set before the key\n    cipher.key = '11111111111111111111111111111111'\n    cipher.auth_data = \"\"\n    ciphertext = cipher.update(plaintext) + cipher.final\n    tag = cipher.auth_tag\n\n    puts \"[+] Encrypting: #{plaintext}\"\n    puts \"[+] CipherMessage (IV | Tag | Ciphertext): #{bin2hex(iv)} |\n#{bin2hex(tag)} | #{bin2hex(ciphertext)}\"\nend\n```\nA developer that uses the code above may incorrectly assume that their code\nis secure from the pitfalls associated with IV reuse in aes-*-gcm, since\nthe ‘cipher.random_iv’ method is used. According to the documentation, this\nshould generate a random IV each time the encryption method is called.\n\nWhen the code above is run with the same key and same plaintext message,\nthe following results are obtained:\n\nOutput:\n```\n# Run 1\n./gcm_encrypt.rb 'This is some secret message.'\n[+] Encrypting: This is some secret message.\n[+] CipherMessage (IV | Tag | Ciphertext): e32594080cca2b37f7d7e968 |\n8c676db7551cf046266252ee776ecaa9 | 81092d16b62902d9985656253891dc\n800a5bb48fb1c4ad0b7bdf6054\n```\n```\n# Run 2\n./gcm_encrypt.rb 'This is some secret message.'\n[+] Encrypting: This is some secret message.\n[+] CipherMessage (IV | Tag | Ciphertext): 431d70714f5e5f876d1c7830 |\n8c676db7551cf046266252ee776ecaa9 | 81092d16b62902d9985656253891dc\n800a5bb48fb1c4ad0b7bdf6054\n```\nNotice that in the output above a unique IV is returned for both runs, but\nwith the same ciphertext. This proves that even though the random_iv method\nis called, the code is defaulting to a static IV. If an attacker can\nretrieve multiple ciphertext messages, it is possible to decrypt the\nciphertexts by applying the same attack one would use in a two-time pad\n(XOR ciphertexts and crib drag).\n\nNext review the following code snippet and output, which depicts a secure\nimplementation of the code:\n\nValid Code:\n```\ndef encrypt(plaintext)\n    cipher = OpenSSL::Cipher.new('aes-256-gcm')\n    cipher.key = '11111111111111111111111111111111'\n    iv = cipher.random_iv # Notice here the IV is set after the key\n    cipher.auth_data = \"\"\n    ciphertext = cipher.update(plaintext) + cipher.final\n    tag = cipher.auth_tag\n\n    puts \"[+] Encrypting: #{plaintext}\"\n    puts \"[+] CipherMessage (IV | Tag | Ciphertext): #{bin2hex(iv)} |\n#{bin2hex(tag)} | #{bin2hex(ciphertext)}\"\nend\n```\nOutput:\n```\n# Run 1\n./gcm_encrypt.rb 'This is some secret message.'\n[+] Encrypting: This is some secret message.\n[+] CipherMessage (IV | Tag | Ciphertext): 8beb4aa05533e90f4f4eddd3 |\nea1b015958a9b8bd2aafa61887309caf | 19574a9c9869b92140a57a5fd43a14\n9a5eaa7e5beefdff5d56cc4136\n```\n```\n# Run 2\n./gcm_encrypt.rb 'This is some secret message.'\n[+] Encrypting: This is some secret message.\n[+] CipherMessage (IV | Tag | Ciphertext): 87361b3f1e32291602ac7b40 |\nbce7093daa10cc9d2fad0f2b91e077f2 | 47f9a5ba55631204233ace70f169e6\n65846e877dca11a6e13a659540\n```\nNotice that this time both the IV and ciphertexts are both different for\nthe same plaintext. This is the intended result a developer would expect to\nhappen when using this library.\n\nReference:\n[1] https://ruby-doc.org/stdlib-2.0.0/libdoc/openssl/rdoc/OpenSSL/Cipher.html#class-OpenSSL::Cipher-label-Authenticated+Encryption+and+Associated+Data+-28AEAD-29",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2021-03-14T16:46:35.929Z",
  "allow_singular_disclosure_after": -92086642.32407574,
  "singular_disclosure_allowed": true,
  "vote_count": 17,
  "voters": [
    "xploiterr",
    "theappsec",
    "salahhasoneh",
    "khizer47",
    "offftherecord",
    "c1231665",
    "makeg",
    "spetr0x",
    "k4l1",
    "janmeyjaysharma",
    "and 7 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
