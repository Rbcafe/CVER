{
  "id": 195156,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTUxNTY=",
  "url": "https://hackerone.com/reports/195156",
  "title": "CSRF in all API endpoints when authenticated using HTTP Authentication",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2017-01-01T23:12:42.550Z",
  "submitted_at": "2017-01-01T23:12:42.550Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "zombiehelp54",
    "url": "/zombiehelp54",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/mevfgipw1pc7n4wy86swdq1yaeuq/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1382,
    "url": "https://hackerone.com/shopify",
    "handle": "shopify",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Shopify",
      "twitter_handle": "",
      "website": "https://www.shopify.com",
      "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-03-28T21:21:12.422Z",
  "bug_reporter_agreed_on_going_public_at": "2017-03-28T21:21:12.391Z",
  "team_member_agreed_on_going_public_at": "2017-03-28T21:15:15.026Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "#Description:\n**Short:**\nI have found a CSRF vulnerability in all API endpoints `/admin/[any_api_endpoint]/` if the current user has authenticated using HTTP authentication.\n\n**Details:**\nWhen a user generates API credentials for a private application in his shop he will be given API key and password that he can use to access his shop resources, moreover shopify provides an HTTP authentication URL to the user as an example URL.\n{F148606}\n\nIf the user is authenticated through HTTP authentication , the browser will automatically send the credentials in the `Authroization` header with each request so the user will still be authenticated without need to submit the username and password each time.\n\nI have found that if a user has authenticated through HTTP authentication (opened the example URL that shopify provided him when he created the private application) , all the API endpoints will be vulnerable to CSRF.\n#Steps to reproduce: \n1. Login to your shopify account \n2. Create a private application then open the authentication example URL in a new browser.\n3. for testing , submit the following form through the browser in which you opened the example link: \n\n```\n<form action=\"https://[shop].myshopify.com/admin/products.json\" method=post>\n<input name=\"product[title]\" value=\"API CSRF TEST\">\n<input name=\"product[vendor]\" value=\"test\">\n<input name=\"product[body_html]\" value=\"<h1>API CSRF TEST [Can be stored XSS for admins]</h1>\">\n <input name=\"product[product_type]\" value=\"test\">\n<input type=submit>\n</form>\n```\n4- Go to `[shop].myshopify.com/admin/products` and you'll see the product.\n\nAll the API endpoints are vulnerable , even the endpoints that only accept (PUT , PATCH or DELETE) , you can submit requests with these methods using `_method` parameter. \n#What is the problem here?\nThe vulnerability exists because API endpoints accept data submitted with `content-type: application/x-www-form-urlencoded` without any validation for the authenticity token if the user is authenticated through HTTP authentication. \n#Impact:\nThrough this vulnerability an attacker can do malicious actions through the victim's session which includes: creating a webhook that pings the attacker's server for all events happening on the victim's shop, fulfilling orders  , creating a transaction ,editing themes ..etc (All possible actions done through the API).\n\n\nThanks and happy new year :)",
  "weakness": {
    "id": 45,
    "name": "Cross-Site Request Forgery (CSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 148606,
      "file_name": "example_api_url.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/148/606/0808aa3306f9065bcc9af872f5b46f0b475ea12d/example_api_url.png?response-content-disposition=attachment%3B%20filename%3D%22example_api_url.png%22%3B%20filename%2A%3DUTF-8%27%27example_api_url.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQU6SKXNFL%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T123152Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBsQY5L%2BFkxRPC58PY5o2r1B4FvJQHizPIG9rlwXtVRvAiAL0D5jMubGIu63HWEEj%2BrlMXD00CwCZl6n%2B2kgNXCz%2BSqyBQh1EAMaDDAxMzYxOTI3NDg0OSIM9fJcytorMyA%2BJcGWKo8FlA6t%2FhW4ihTQDwTO66lwrpmBlh3InHCG7ZNyP57uNt%2FwRHIxvyi6PfiN2yoHKbnj3AHO%2B2d5zoBenUsjkTNVRrSUiifpdaXKnzF7u0bzX9wtP9298ZDuZh%2FGs9ROFHAwwSZO%2BvwKQLvQiKkud03lUkSsYAWSATrr7bzJ1TgRIshBwEoMxF63sGP9s7tsNfzRA%2BRBnErSD0VUQqi0BLoiz8aEpp9YWVfFSARTl85AS70jGdLFyjPSL3p4qQWEPUkiV0yqHhdAEAs09CT1fGjn4y7il2MxOD%2BwERRa3lBGnRAFCEqrktUlGxrk%2BtAvTc%2B7MYBNtBaSu88Qp3FBMeRxgNXuz4B4aE75hNE7hCdKjZkNp653DgLLcvSAVkWXKJ8bc7pY8EMi5I1A2Dl%2BW8ZHS7yWw13MauFUqTfpwfPhg4FrjlzkfofKeir9moM1Qw92DiMAzmXNA9VCWZgtwF9peq7cledMqKMhyz553%2BMG21%2FcYWqw%2FWqRrVoyVdqjqI8FKUBe%2BTS1SxpldVu8xEmCKzbfFzq%2FhT%2FkR7exoQXrx2l%2BL7t%2FuGgGEEKJunLBHXQWh79aKlW4%2FLY1zZRs3z63USsKCdupXOFqYSXN1SfICON%2Fqq6JqRCfisNv890YfHqytS0RRv6qX0n0SN%2BaUeTqSWHqTP0py0ZSVQX4asOO3F%2FAoFXsCcUW8Hln49ICQ0yyR%2Bcv27Gbe2FMzVWYlJHO79Zqq6ItXDPLhetwQl%2BNTdHzqrRFOsB9FNw7KlAliVAd2TMcGOIN3W1R76B95DRHTSvbmbHOhm%2FIFrdcghtBTzYBtLmNwUj6qld3rUi4V7xCIaxjyaDAD3J3BIh9Z56z79Puv7VTgcD1IbaGvCsbkTDaoa2uBjqyAfXgKJ7u1ZqUyaqlA35nJDggYhFUEhgBeS%2FonLnznw%2F8MZgMPwNTg9%2B%2BKneXQRJEmw0IxrRJCtp8dpbLw%2BejfQTVmdG%2FWK%2BDS%2FFX7U1sRmDMc%2FfmYPqycmml%2Bg9esPYXet%2FKlKaaFDXG3gzd7HfWF0%2BL5V0SyxaHdCxSBI4q4kLfNakyjwzmb4ALjzY0fA2TwRp16US2P1dwfWi2GjYsqaNGUOCV0dxXn6CrIbOv%2F%2Bk4ioM%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f2e4afba957b7f4976c2f65d2109b24755053c83dcfd18269a80a1b3fdd42799",
      "file_size": 148208,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": null,
  "vote_count": 26,
  "voters": [
    "delimitry",
    "drsniper",
    "fqdn",
    "flashdisk",
    "aryan2808",
    "mdv",
    "th3g3nt3lman",
    "pappan",
    "rudra16",
    "eveeez",
    "and 16 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 3678,
      "category": "team",
      "content": "This issue would have allowed to force a merchant to perform authenticated actions via Shopify's API if this merchant had saved their own API credentials in their browser. While this situation was likely not exploitable (saving basic auth credentials would prevent normal web navigation since API authentication is checked before session authentication) we opted for fixing this issue nonetheless. The fix was not trivial since we use the same domain for both the API and web access, so we ended up denying any requests authenticated with Basic Auth that also provide any http cookies.",
      "user": {
        "id": 19168,
        "username": "francoischagnon",
        "name": "Francois Chagnon",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "",
        "location": "",
        "created_at": "2015-03-19T21:06:55.673Z",
        "url": "https://hackerone.com/francoischagnon",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "company",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
