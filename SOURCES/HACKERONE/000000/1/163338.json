{
  "id": 163338,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjMzMzg=",
  "url": "https://hackerone.com/reports/163338",
  "title": "\\OCA\\DAV\\CardDAV\\ImageExportPlugin allows serving arbitrary data with user-defined or empty mimetype",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2016-08-25T13:26:40.644Z",
  "submitted_at": "2016-08-25T13:26:40.644Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "lukasreschke",
    "url": "/lukasreschke",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/037/891/e7fea4d5383dc07d1fe767b02f3bda2bc7639c63_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": false,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 13291,
    "url": "https://hackerone.com/nextcloud",
    "handle": "nextcloud",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/tnqlkt8d6fcch8hj8brdjp8nw864/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/tnqlkt8d6fcch8hj8brdjp8nw864/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Nextcloud",
      "twitter_handle": "nextclouders",
      "website": "https://nextcloud.com",
      "about": "Access, share and protect your files, calendars, contacts, communication & more at home and in your enterprise."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": true,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2016-9465"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2016-12-03T21:59:28.846Z",
  "bug_reporter_agreed_on_going_public_at": "2016-11-03T21:59:15.769Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "The SabreDAV plugin `\\OCA\\DAV\\CardDAV\\ImageExportPlugin` is used for displaying pictures of a VCF. It registers on a GET request on a CardDAV element and acts when the query parameter `photo` is sent.\n\nThe logic can be seen below:\n```\n/**\n * Intercepts GET requests on addressbook urls ending with ?photo.\n *\n * @param RequestInterface $request\n * @param ResponseInterface $response\n * @return bool|void\n */\nfunction httpGet(RequestInterface $request, ResponseInterface $response) {\n\n\t$queryParams = $request->getQueryParameters();\n\t// TODO: in addition to photo we should also add logo some point in time\n\tif (!array_key_exists('photo', $queryParams)) {\n\t\treturn true;\n\t}\n\n\t$path = $request->getPath();\n\t$node = $this->server->tree->getNodeForPath($path);\n\n\tif (!($node instanceof Card)) {\n\t\treturn true;\n\t}\n\n\t$this->server->transactionType = 'carddav-image-export';\n\n\t// Checking ACL, if available.\n\tif ($aclPlugin = $this->server->getPlugin('acl')) {\n\t\t/** @var \\Sabre\\DAVACL\\Plugin $aclPlugin */\n\t\t$aclPlugin->checkPrivileges($path, '{DAV:}read');\n\t}\n\n\tif ($result = $this->getPhoto($node)) {\n\t\t$response->setHeader('Content-Type', $result['Content-Type']);\n\t\t$response->setStatus(200);\n\n\t\t$response->setBody($result['body']);\n\n\t\t// Returning false to break the event chain\n\t\treturn false;\n\t}\n\treturn true;\n}\n```\n\nAs can be seen the the content-type is read from `$this->getPhoto($node)` as well as the body, looking at it's implementation shows that the data is directly read from the vCard:\n\n```\nfunction getPhoto(Card $node) {\n\t// TODO: this is kind of expensive - load carddav data from database and parse it\n\t//       we might want to build up a cache one day\n\ttry {\n\t\t$vObject = $this->readCard($node->get());\n\t\tif (!$vObject->PHOTO) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$photo = $vObject->PHOTO;\n\t\t$type = $this->getType($photo);\n\n\t\t$val = $photo->getValue();\n\t\tif ($photo->getValueType() === 'URI') {\n\t\t\t$parsed = \\Sabre\\URI\\parse($val);\n\t\t\t//only allow data://\n\t\t\tif ($parsed['scheme'] !== 'data') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (substr_count($parsed['path'], ';') === 1) {\n\t\t\t\tlist($type,) = explode(';', $parsed['path']);\n\t\t\t}\n\t\t\t$val = file_get_contents($val);\n\t\t}\n\t\treturn [\n\t\t\t'Content-Type' => $type,\n\t\t\t'body' => $val\n\t\t];\n\t} catch(\\Exception $ex) {\n\t\t$this->logger->logException($ex);\n\t}\n\treturn false;\n}\n```\n\nThis means if somebody uploads a VCF with the following content this will deliver the content `<html><font color=\"red\">test</font></html>` with an empty Content-Type. The photo is a base64 encoding of before mentioned string.\n\n```\nBEGIN:VCARD\nVERSION:3.0\nFN:test\nUID:5cf6e5e2-ec37-4798-abb7-3c261eda92c9\nPHOTO;ENCODING=b:PGh0bWw+PGZvbnQgY29sb3I9InJlZCI+dGVzdDwvZm9udD48L2h0bWw+\nEND:VCARD\n```\n\nThen it's sufficient to just access http://10.211.55.7/stable9/remote.php/dav/addressbooks/users/admin/contacts/5cf6e5e2-ec37-4798-abb7-3c261eda92c9.vcf?photo, the easiest to reproduce this is by enabling `debug` mode and using Internet Explorer since we employ CSP which largely mitigates the issue.\n\nAs another remark, we should replace the `file_get_contents` with another implementation. This seems currently like a too risky implementation for me.\n\n{F114833}",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 114833,
      "file_name": "2016-08-25_15-26-06.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/114/833/4aa3fbc2c1e64d92e8781dae48f5740964b607ea/2016-08-25_15-26-06.png?response-content-disposition=attachment%3B%20filename%3D%222016-08-25_15-26-06.png%22%3B%20filename%2A%3DUTF-8%27%272016-08-25_15-26-06.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXDWGU53J%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T122145Z&X-Amz-Expires=990&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIEQrBbU8Jad1w5JwSX%2BtcCe%2B%2Bf2fWuM59KuP4ISMFc4wAiBo2h1%2BGY0GcS29KJV9ChmgWe9tqhKd5ZLb1WWqvprHYiqxBQhwEAMaDDAxMzYxOTI3NDg0OSIMhG92oDXEtczQPYIjKo4Fy8fG%2F18wGKWDOaZUOzqIsPg%2F2%2Bhxtkqy9tw5WM0FnO0efhz261ude9PuTQW%2F8W1XVC%2B6%2Btv%2F%2FGVnCyHPPzSf21evTkJ%2F2elUnngDFTubvtbmQMdS4Rnt0%2FU%2FuXzMknf8g%2BX5PviUKj6nGgaRnY9Hp0kLUpB9xZV%2BBUdPCVV4HR0N%2BfR1rXE7N8YpBPWLYN%2BeSFjCXMLIPUyphbmsuZkyiXQtehFKt7nJxobss3F2hvjZloveNvwrVNVWJFNQom1gLI9F7%2BIpCnOeXjEy3MSXsLuTbawl2ybmhjHZrkvOBGKRCJZ%2B2u5iwtWDz1wnMZRyFyaeTcUEvO9J6iZaOADHjWDUQ0JKmYoztclRLBYdqnFqX4GvRgDrPlxBgIXLYhik%2BmiNM0sGzn7a7dUiYYPCq%2FdAd9zf%2Bi%2F2Nc6bbCemAOnCRpYV7CfzwpAvbOTg1ETpUulaDRVq85Dx2p0leRTu%2FT%2FWnLION%2BrUWGT9LWh7WHbiRD9czkDV6jmhMSgRB%2Bl0SrMovwZEVMZSrCU%2BLZ04O9Ixjhzq%2B1Vr0XZu7DRtQOja%2FirIkVuwQiYxCdihARcXY10a6JugOVRadvNpcM%2BWrNER7eW6Ggy%2F7f6BytYoIxde%2BqacE7wj84z9DiuAc2no4T1dj4uFJ7X6msn0%2FWRzATSRapOIgtEcp4pwGfB%2BgJFOL0hN4w15UCIL%2FBVzrYd%2BXa1P5NfHNayl%2B47A6AtIllD1sc5l2BQdyjSXlYZVLP2DEDSN%2F9jemORnER%2FjuktMS4RtWWHcTnxoCzT9%2F%2FA8uQ%2FnRXtwTrFdv9agI5vhmpVKiMFBKwXX8KP59Ilg%2Fit%2BFtjLhR36yfvnmCbVRQoElpkcYZZM0YhVFqxqlVMBMJKcrK4GOrIBANrznU6BJTMtT8T9H36XK5m%2BmVr8n6tG0lGtMpTogn8GvplsC4ZKMuQxe3g9N4DP5saesTh9dqff09EBOPWaGcNb6eKu1xWMCP6%2FWNwnlhKPZDaWoTSy84GV7wvrpprkfGE6wb4T1PsZpb%2FIZElZKvxaZpFBFfT0K3jPH7QW9j17n06s2QlpvBBCJkLlXBGs%2FcA4E70Mzy6JNhXk5S%2BRjCCYfigjYp55SDrDc%2F%2FldOze%2FA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=917ae4f783563a5463e063e44a32749477635f7e278ca407c90ea3a42991f403",
      "file_size": 84417,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2016-12-03T21:59:15.809Z",
  "allow_singular_disclosure_after": -227024549.64196503,
  "singular_disclosure_allowed": true,
  "vote_count": 9,
  "voters": [
    "lukasreschke",
    "mpz",
    "kiraak-boy",
    "alfredsaonoy",
    "ishahriyar",
    "demo--hacker",
    "spetr0x",
    "dyabla",
    "b42f97eb69dddcafe5cc278"
  ],
  "severity": {
    "rating": "medium",
    "score": 5.4,
    "author_type": "User",
    "metrics": {
      "attack_vector": "network",
      "attack_complexity": "low",
      "privileges_required": "low",
      "user_interaction": "required",
      "scope": "changed",
      "confidentiality": "low",
      "integrity": "low",
      "availability": "none"
    }
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
