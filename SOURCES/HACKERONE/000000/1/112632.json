{
  "id": 112632,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTI2MzI=",
  "url": "https://hackerone.com/reports/112632",
  "title": "[tor] libevent dns remote stack overread vulnerability",
  "state": "Closed",
  "substate": "resolved",
  "readable_substate": "Resolved",
  "created_at": "2016-01-25T02:27:56.487Z",
  "submitted_at": "2016-01-25T02:27:56.487Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "guido",
    "url": "/guido",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1800,
    "url": "https://hackerone.com/torproject",
    "handle": "torproject",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Tor",
      "twitter_handle": "torproject",
      "website": "https://www.torproject.org/",
      "about": "Anonymity Online"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-10-19T10:16:26.792Z",
  "bug_reporter_agreed_on_going_public_at": "2017-10-19T10:16:26.676Z",
  "team_member_agreed_on_going_public_at": "2017-10-19T09:34:08.728Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Hello,\n\nthe name_parse function in libevent's DNS code is vulnerable to a buffer overread.\n```c\n 935 static int\n 936 name_parse(u8 *packet, int length, int *idx, char *name_out, int name_out_len) {\n 937     int name_end = -1;\n 938     int j = *idx;\n 939     int ptr_count = 0;\n 940 #define GET32(x) do { if (j + 4 > length) goto err; memcpy(&_t32, packet + j, 4); j += 4; x = ntohl(_t32); } while      (0)\n 941 #define GET16(x) do { if (j + 2 > length) goto err; memcpy(&_t, packet + j, 2); j += 2; x = ntohs(_t); } while (0)\n 942 #define GET8(x) do { if (j >= length) goto err; x = packet[j++]; } while (0)\n 943 \n 944     char *cp = name_out;\n 945     const char *const end = name_out + name_out_len;\n 946 \n 947     /* Normally, names are a series of length prefixed strings terminated */\n 948     /* with a length of 0 (the lengths are u8's < 63). */\n 949     /* However, the length can start with a pair of 1 bits and that */\n 950     /* means that the next 14 bits are a pointer within the current */\n 951     /* packet. */\n 952 \n 953     for (;;) {\n 954         u8 label_len;\n 955         if (j >= length) return -1;\n 956         GET8(label_len);\n 957         if (!label_len) break;\n 958         if (label_len & 0xc0) {\n 959             u8 ptr_low;\n 960             GET8(ptr_low);\n 961             if (name_end < 0) name_end = j;\n 962             j = (((int)label_len & 0x3f) << 8) + ptr_low;\n 963             /* Make sure that the target offset is in-bounds. */\n 964             if (j < 0 || j >= length) return -1;\n 965             /* If we've jumped more times than there are characters in the\n 966              * message, we must have a loop. */\n 967             if (++ptr_count > length) return -1;\n 968             continue;\n 969         }\n 970         if (label_len > 63) return -1;\n 971         if (cp != name_out) {\n 972             if (cp + 1 >= end) return -1;\n 973             *cp++ = '.';\n 974         }\n 975         if (cp + label_len >= end) return -1;\n 976         memcpy(cp, packet + j, label_len);\n 977         cp += label_len;\n 978         j += label_len;\n 979     }\n 980     if (cp >= end) return -1;\n 981     *cp = '\\0';                                                                                                   \n 982     if (name_end < 0)\n 983         *idx = j;\n 984     else\n 985         *idx = name_end;\n 986     return 0;\n 987  err:\n 988     return -1;\n 989 }\n```\n\nPrior to the memcpy on line 976 it is not asserted that the range (```packet + j```) - (```packet + j + label_len```) does not exceed the length of the ```packet``` buffer (as stored in variable ```length```). My proof of concept exploits the possibility to keep jumping around in the buffer (lines 959 - 968), until the buffer index (```j```) is at the very end --- then, an overread of 63 bytes will occur. No overwrite takes place.\n\nAs you know, an overread *may* result in a crash, depending on a variety of factors.\n\nI believe the code in Tor is vulnerable and I will update this report with PoC against Tor itself as soon as I've constructed one.\n\nNobody has been notified of this bug except you. I will not contact the libevent developers about this issue unless you explicitly request so. It's up to you to notify them yourself.\n\nTo test against the latest version of libevent (libevent-2.0.22-stable.tar.gz):\n\n```sh\nCFLAGS=\"-fomit-frame-pointer -fsanitize=address\" ./configure\nmake -j4\ncd samples\n./dns-example -servertest\n```\n\nin a different terminal run\n```sh\npython libevent-poc.py\n```\n\nOutput of ```dns-example``` should be:\n```\nEVUTIL_AI_CANONNAME in example = 2\n=================================================================\n==27496== ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcf5a7355c at pc 0x7f6096a6b652 bp 0x7ffcf5a72bb0 sp 0x7ffcf5a72ba8\nREAD of size 1 at 0x7ffcf5a7355c thread T0\n\n...\n...\n```\n\nGuido",
  "weakness": {
    "id": 2,
    "name": "Memory Corruption - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 70753,
      "file_name": "libevent-poc.py",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/070/753/f0e7d2a8a55f947329f3935b2547a64de96e082c/libevent-poc.py?response-content-disposition=attachment%3B%20filename%3D%22libevent-poc.py%22%3B%20filename%2A%3DUTF-8%27%27libevent-poc.py&response-content-type=text%2Fplain&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4FAMPPRY%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T115529Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCID7qnbDtQnppWbK9qoDjLwYSeBYc3LRQ%2BMdKpj5H8QM5AiBcd5fhkOSjbw3KxGXsdAbT3wThN7msB2RWCygRr5LCFCqxBQhwEAMaDDAxMzYxOTI3NDg0OSIMgNfkjKpbMNfrzm%2FrKo4FsJk%2BxIB%2FpE9OZtgUFnkErO%2BhHPLPdxGIhFqg%2Bq0WjmQDZNK0xDM7xsBL8S96OIBsJhKmFO2X5YXAM%2BJWLiq5jWeZK2UlcjaqMbEYoqMwzZZpon%2BJgSLl7CmhaaJEYo2Eqg8gQk%2FzsS7gK1DQUo5y7p40mrs3bqiBli%2BEbN3p1DzRF1OsJmu1tZGMKR0FAcr61%2B9haXE8SpV7jEcHIuniF5i4IiY6EhO8q7kzwOOWNJi%2BBAgp27jLj8bpr8BIQYO9YMDJ2sl9KSPyh3nYV9sPJ8eAhDm9MU6faC%2F6CndOHo39J7nBh3nxv2OgaiNVBrG9IB1IshOcJ6TbRWQITABKSELW8lcGO%2Fk5kL84OvCkCj8lGri2ErfG6E2cdhO5msFSxbOSsdeTEzyZMnlXNbIwvPbKFe1JSot39yqx1rwXOWENIyZGKymFar7C00y4EjMAnYIa8LnZv9bZddep%2B6C8rAKUuhA5WNFQMoEjYPbkMBoR5%2BJwceeEq9Y7eWce1bzC2baAtlgJv00Bq8dW1ERyDEqL2rMEsnwcqK176fzylvXzP3%2BwcRPApE21%2F2U2EPNQcv%2FpdP5UelCpwvfNpMQdSI%2BeOWh6zhSs2Qu5HziRgeMzA86pDdxk%2B16Slz2CwT8P4OXzvVQRmNY7Nz0miEc3OEklOATXOFxHiDHWPfc7csKSpFUSLauCI%2FULJBbezKD4QcgYP0B9xcbgKlsLzw%2BACW6EoDGtQCfib%2BDcpdzWYvsn9wbqvcZT7DBvkRrH2qyoW7Vqwv2n%2BIZuOW8JIYNJ8lI5wHRZGNr9kwx6cfvK0V2%2Fkpi8X7UdGfaGDccM7kwtlYjl90mD1zjfZCweNKMiv6mx5wX8Ek1dDgHEbl31MLeorK4GOrIB0Cm%2F258YlHJ0u3oe5G2fqDJBkkDc4nTkDoxYVyXxLDavzSxkqxIe4yUE6WkeTnQ50Hek4AkKUuDs3EcCnHh0bldMqsIZ4S5yaHjH3LoM%2BCaH9miaUPuq2ugm1ugC7WzW0auy4Y%2F5eNeOJH1TtrOM44T7LWh6S0WEUeScI8SSHyviHGGemiCIB8Pt7Ns0huMN7cWBZ6nAw2p5vpvlUOWFreiZY5OJe4C9DAST3zh0ufFv%2FA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b8aa7b566288ccc5def1bab194325d65a046dd97ef3bba2e392c4d30f4cbd815",
      "file_size": 9526,
      "type": "text/plain",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2017-11-18T09:34:08.767Z",
  "allow_singular_disclosure_after": -196827680.30279234,
  "singular_disclosure_allowed": true,
  "vote_count": 6,
  "voters": [
    "geeknik",
    "eveeez",
    "mr_r3boot",
    "japz",
    "spetr0x",
    "b4155f7c29acd42c27d007a"
  ],
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
