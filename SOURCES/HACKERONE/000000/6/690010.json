{
  "id": 690010,
  "global_id": "Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82OTAwMTA=",
  "url": "https://hackerone.com/reports/690010",
  "title": "OS Command Injection on Jison [all-parser-ports]",
  "state": "Closed",
  "substate": "resolved",
  "severity_rating": "medium",
  "readable_substate": "Resolved",
  "created_at": "2019-09-07T05:36:16.351Z",
  "submitted_at": "2019-09-07T05:36:16.351Z",
  "is_member_of_team?": false,
  "is_organization_group_member?": false,
  "reporter": {
    "disabled": false,
    "username": "0x48piraj",
    "url": "/0x48piraj",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/enjZfKWpT1EjeUw1mMxbXjW7/3c7b305354c9073c106ae3d1701798defaaf5be844fb8fdfa49ca62f991a2c2c"
    },
    "is_me?": false,
    "cleared": false,
    "verified": false,
    "hackerone_triager": false,
    "hacker_mediation": false
  },
  "team": {
    "id": 23949,
    "url": "https://hackerone.com/nodejs-ecosystem",
    "handle": "nodejs-ecosystem",
    "profile_picture_urls": {
      "small": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./d3dc6b2d7e2dc3657e8861b0d7e2dfca1a6d513dd784c613f4e56738907cea98",
      "medium": "https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./5136ed9b2fa7c4d4abbf39fb971047c62d98ec4740a88eb55d7e26373250a937"
    },
    "permissions": [],
    "submission_state": "disabled",
    "default_currency": "usd",
    "awards_miles": false,
    "offers_bounties": true,
    "state": "public_mode",
    "only_cleared_hackers": false,
    "pentest_feature_enabled?": false,
    "profile": {
      "name": "Node.js third-party modules",
      "twitter_handle": "",
      "website": "https://nodejs.org/en/security/",
      "about": "This program was used to handle vulnerabilities in the Node.js ecosystem."
    }
  },
  "has_bounty?": false,
  "in_validation?": false,
  "can_view_team": true,
  "can_view_report": true,
  "is_external_bug": false,
  "is_published": false,
  "is_participant": false,
  "has_collaborators": false,
  "submitted_by_team_member": false,
  "stage": 4,
  "public": true,
  "visibility": "full",
  "cve_ids": [
    "CVE-2020-8178"
  ],
  "singular_disclosure_disabled": false,
  "disclosed_at": "2020-05-28T10:39:50.786Z",
  "bug_reporter_agreed_on_going_public_at": null,
  "team_member_agreed_on_going_public_at": "2020-04-28T10:39:48.723Z",
  "comments_closed?": false,
  "facebook_team?": false,
  "team_private?": false,
  "vulnerability_information": "I would like to report **OS Command Injection** vulnerability on [Jison](https://www.npmjs.com/package/jison) in parser ports. *(CSharp, PHP)*\n\nIt allows arbitrary OS shell command execution through a crafted command-line argument.\n\n# Basic Information\n\n**Module:** ***jison***\n**Version:** `0.4.18`\n**NPM Project Page:** `https://www.npmjs.com/package/jison`\n\n## Module Description\n\n##### An API for creating parsers in JavaScript\n\n> Jison generates bottom-up parsers in JavaScript. Its API is similar to Bison's, hence the name. It supports many of Bison's major features, plus some of its own. If you are new to parser generators such as Bison, and Context-free Grammars in general, a good introduction is found in the Bison manual. If you already know Bison, Jison should be easy to pickup.\n> Briefly, Jison takes a JSON encoded grammar or Bison style grammar and outputs a JavaScript file capable of parsing the language described by that grammar. You can then use the generated script to parse inputs and accept, reject, or perform actions based on the input.\n\n## Module Stats\n\n##### Downloads in the last week: (https://api.npmjs.org/downloads/point/last-week/jison)\n\n```\ndownloads : 138857\nstart : 2019-08-31\nend : 2019-09-06\npackage : jison\n```\n\n##### Downloads in the last month: (https://api.npmjs.org/downloads/point/last-month/jison)\n\n```\ndownloads : 678197\nstart : 2019-08-08\nend : 2019-09-06\npackage : jison\n```\n> Stats by npm-stat: https://npm-stat.com/charts.html?package=jison\n\n# Vulnerability\n\n**Jison** has parsing/lexing template to php, C# which don't sanitize `process.argv` (command line arguments), before passing it to `child_process.exec()`, hence allowing arbitrary shell command injection.\n\nThe vulnerable code is in `/ports/csharp/Jison/Jison/csharp.js` at [csharp.js#L19](https://github.com/zaach/jison/blob/bcf986e180359aa2404b1b73ecbfef1df4c6b011/ports/csharp/Jison/Jison/csharp.js#L19)\n\n```\nconsole.log(\"Executing: \" + \"jison \" + process.argv[2]);\n\nexec(\"jison \" + process.argv[2], function (error) {\n    if (error) {\n        console.log(error);\n        return;\n    }\n```\n\n## Steps To Reproduce:\n1. Installing Jison command-line tool via `npm install jison -g`\n2. Obtaining *Jison* parsing templates : `git clone https://github.com/zaach/jison`\n3. `cd jison/ports/csharp/Jison/Jison/`\n4. Payload : `node csharp.js \"echo''>pwned\"`\n5. Check if the attack was successful or not (dummy payload was executed or not): `ls -la`\n\nSimilarly, `/ports/php/php.js` is vulnerable too as it contains the same blob ([php.js#L19](https://github.com/zaach/jison/blob/bcf986e180359aa2404b1b73ecbfef1df4c6b011/ports/php/php.js#L19)). `\"\"` was added just to isolate the payload.\n\n## Patch\n\nSanitizing the input. Using `execFile` (this method signatures force developers to separate the command and its arguments)\n\n## Supporting Material/References:\n\n- Windows 10 1803 (OS Build 17134.950)\n- **NodeJS Version:** v10.16.3\n- **NPM Version:** 6.9.0 \n\n# Wrap up\n\n- I contacted the maintainer to let them know: N \n- I opened an issue in the related repository: N\n\n## Impact\n\nArbitrary OS command execution.",
  "weakness": {
    "id": 59,
    "name": "OS Command Injection"
  },
  "original_report_id": null,
  "original_report_url": null,
  "attachments": [
    {
      "id": 576968,
      "file_name": "jison-osi.png",
      "expiring_url": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/Y3g55me2ZuFvb12SUtXQ6Ea6?response-content-disposition=attachment%3B%20filename%3D%22jison-osi.png%22%3B%20filename%2A%3DUTF-8%27%27jison-osi.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQS6SCAH72%2F20240213%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240213T132752Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDu%2B5Pwo%2F34eoeVeuWsr%2Ff9B54eFSJHpHqs9we%2BjQAH6gIhALp00VqCzQ3yXDicmppc8nMEwhMltHZsqN0RcGzFE1GqKrIFCHUQAxoMMDEzNjE5Mjc0ODQ5Igwkers7f9aKGbx%2BvDcqjwVWDMAhBUKhOq6mxVC7xmKOa%2FU2AiQBQKvDNaKfEmdipLMP6n95LC8VlOQ3Ca%2B7a8IxSNPEW%2FMJrckmzRQkQn5Pvo7LyCxG1l6k7KZzOYPdFRTU7P2FcXBvM6OhRy8ERlHZ1Ufnved4qCHN0953KV512I88RdKF2UQ9KA9EEzg3ey2SzXbnBk2JKsmpPRc0sUDb4ZMn4GDyk%2B2mbDjFILmQt6lr%2B6v0UoAJ%2B7v4%2F%2F852Q6Ruj9P1iez9HOSmDy3175zVvNBeZ4WctM1b8jW6o%2BmI4wZT%2FgWlgSufI1k6yaDWkc%2FE3Bn%2BpLvQoQXU80KrdN1Yr3AjY%2BuRyqxmectMc5y%2Br2%2F%2FwomOAO3I7t5j85rAvGeCLnU1ZAYisFSaSSgAJ%2BfsZD3xX9YCITIgC401%2F5etOaBcdLCaIxhXTp4wk5QS7eRBWvkzPZGEUcM52Rtz1NPZ0uXWarmK9P4ZIqYLWu82nHAH0wf3c3zd07rclVWahRXRkxP0wL3906s66oMXu%2FAgOj02dajNNZpgK8AaMKZXh5LU98RMkHWul32xDirzkDtJ6wBhMOXNHeLLut%2FijTOpDPFtCEBcHCr43hYLb1oSRkvigVVHtwhd%2BDjkszCy1F3hxu7H2ujIa9DoZ20hfrH4QAdqgLvpCC5kvd9Mdm9%2Fx13AdQjdUqxw2uU5HHCcUUMvji7mFcM0YKL33beYGIrXk5AJSUULfcFoq3Vln%2FoLmEL9STeERNxXuI9ijvLiCJCbUpcqNlCitD7ewAHGbNSSxgqcuRKjxMizmXSxM5uuuRQlbl7%2BOU8q4LcVoDIFjj15cH0GRJIGCdM2OT1aQG%2F%2FURgsiaYaysR3DfHV5zWoNx%2FNh%2FdRuvtdIdbsxviMKq0ra4GOrABb%2BYWX5qJazI%2FwiuYHFwT6C%2FymmUklRtb8O7FwtNQp8ZsagCHes2g1O8LOYf5T0%2FOXV0bp7oUjKh25bYYogztfc9XxMWj9SG%2BcrOe8OCs8YNKO4wu1gapV5ceXDZq%2FbF7bPsNEkzubLAYNEzVpO8uqKPZd6oKWBP%2Frue89n87JX%2FKDXf2RuT5sO6X4%2FoVBQryJS%2B7K2SqOzxLHHOKg0mmsmeYRh0fWGzJhtEb%2B0a4xOk%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8b86493e98a4f5250cb0c63acbe9d4f208c17a4465c4129094e0ea1f84271b15",
      "file_size": 41322,
      "type": "image/png",
      "moderated": null
    }
  ],
  "allow_singular_disclosure_at": "2020-05-28T10:39:48.941Z",
  "allow_singular_disclosure_after": -117168483.9794682,
  "singular_disclosure_allowed": true,
  "vote_count": 13,
  "voters": [
    "ali",
    "brahim_boufakri01",
    "mik317",
    "h2x0",
    "mjunaidzafar",
    "0x48piraj",
    "mwanamume",
    "actarus",
    "malone5923",
    "jane_mae22",
    "and 3 more..."
  ],
  "severity": {
    "rating": "medium",
    "author_type": "User"
  },
  "structured_scope": {
    "databaseId": 49407,
    "asset_type": "SOURCE_CODE",
    "asset_identifier": "jison",
    "max_severity": "critical"
  },
  "abilities": {
    "assignable_team_members": [],
    "assignable_team_member_groups": []
  },
  "summaries": [
    {
      "category": "team",
      "can_view?": true,
      "can_create?": false
    },
    {
      "category": "researcher",
      "can_view?": true,
      "can_create?": false
    }
  ]
}
